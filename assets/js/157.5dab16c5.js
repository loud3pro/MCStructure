(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{468:function(t,a,o){"use strict";o.r(a);var e=o(27),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"t-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t-1"}},[t._v("#")]),t._v(" T~1")]),t._v(" "),a("h3",{attrs:{id:"takepicturecommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#takepicturecommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TakePictureCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TakePictureCommand : Command\n{\n  CommandSelector<Actor> mCameraTargets;\n  CommandSelector<Player> mPlayerTargets;\n  CommandPosition mCameraSpawnPos;\n  bool mCameraPositionProvided;\n  bool mCameraTargetProvided;\n};\n\n")])])]),a("h3",{attrs:{id:"takepicturecommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#takepicturecommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TakePictureCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TakePictureCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"takepicturecommand-execute-l2-lambda-cc590f793e7a5cf4bb497762ce148e7d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#takepicturecommand-execute-l2-lambda-cc590f793e7a5cf4bb497762ce148e7d"}},[t._v("#")]),t._v(" "),a("code",[t._v("TakePictureCommand::execute::__l2::<lambda_cc590f793e7a5cf4bb497762ce148e7d>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TakePictureCommand::execute::__l2::<lambda_cc590f793e7a5cf4bb497762ce148e7d>\n{\n  Player *player;\n  TripodCamera *camera;\n};\n\n")])])]),a("h3",{attrs:{id:"testservercommands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testservercommands"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestServerCommands")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TestServerCommands\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tagcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tagcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TagCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TagCommand : Command\n{\n  _BYTE mAction[1];\n  __declspec(align(8)) WildcardCommandSelector<Actor> mSelector;\n  std::string mTagString;\n};\n\n")])])]),a("h3",{attrs:{id:"tagcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tagcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TagCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TagCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"teleportcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#teleportcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TeleportCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(2)) TeleportCommand : Command\n{\n  CommandSelector<Actor> mTargets;\n  CommandSelector<Actor> mDestinationEntity;\n  CommandPositionFloat mDestinationPos;\n  CommandSelector<Actor> mFacingEntity;\n  CommandPositionFloat mFacingPos;\n  RelativeFloat mYRot;\n  RelativeFloat mXRot;\n  TeleportCommand::FacingResult mHaveFacing;\n  bool mDestinationIsPosition;\n  bool mFacingIsPosition;\n  bool mCheckForBlocks;\n};\n\n")])])]),a("h3",{attrs:{id:"teleportcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#teleportcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TeleportCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TeleportCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"tellcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tellcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TellCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TellCommand : MessagingCommand\n{\n  CommandSelector<Player> mTargets;\n  CommandMessage mMessage;\n};\n\n")])])]),a("h3",{attrs:{id:"tellcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tellcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TellCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TellCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"tellrawcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tellrawcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TellRawCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TellRawCommand : MessagingCommand\n{\n  CommandSelector<Player> mTargets;\n  Json::Value mRawText;\n};\n\n")])])]),a("h3",{attrs:{id:"tellrawcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tellrawcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TellRawCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TellRawCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"testforblockcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testforblockcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestForBlockCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TestForBlockCommand : Command\n{\n  CommandPosition mPosition;\n  const Block *mBlock;\n  int mData;\n};\n\n")])])]),a("h3",{attrs:{id:"testforblockcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testforblockcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestForBlockCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TestForBlockCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"testforblockscommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testforblockscommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestForBlocksCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TestForBlocksCommand : Command\n{\n  CommandPosition mBegin;\n  CommandPosition mEnd;\n  CommandPosition mDestination;\n  TestForBlocksCommand::Mode mMode;\n};\n\n")])])]),a("h3",{attrs:{id:"testforblockscommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testforblockscommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestForBlocksCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TestForBlocksCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"testforcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testforcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestForCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TestForCommand : Command\n{\n  CommandSelector<Actor> mTargets;\n};\n\n")])])]),a("h3",{attrs:{id:"testforcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testforcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestForCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TestForCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"tickingareacommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tickingareacommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TickingAreaCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TickingAreaCommand : Command\n{\n  TickingAreaCommand::Mode mMode;\n  _BYTE mAddAreaType[4];\n  TickingAreaCommand::TargetDimensions mTargetDimensions;\n  CommandPosition mPosition;\n  CommandPosition mMax;\n  std::string mName;\n  int mRadius;\n};\n\n")])])]),a("h3",{attrs:{id:"tickingareacommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tickingareacommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TickingAreaCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TickingAreaCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"timecommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timecommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TimeCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TimeCommand : Command\n{\n  TimeCommand::Mode mMode;\n  TimeCommand::Query mQuery;\n  TimeCommand::TimeSpec mSpec;\n  int mValue;\n};\n\n")])])]),a("h3",{attrs:{id:"timecommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timecommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TimeCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TimeCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"titlecommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titlecommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TitleCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TitleCommand : MessagingCommand\n{\n  _BYTE mMode[4];\n  __declspec(align(8)) CommandSelector<Player> mTargets;\n  CommandMessage mMessage;\n  int mFadeIn;\n  int mStay;\n  int mFadeOut;\n};\n\n")])])]),a("h3",{attrs:{id:"titlecommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titlecommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TitleCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TitleCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"titlerawcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titlerawcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("TitleRawCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TitleRawCommand : MessagingCommand\n{\n  _BYTE mMode[4];\n  __declspec(align(8)) CommandSelector<Player> mTargets;\n  Json::Value mMessage;\n  int mFadeIn;\n  int mStay;\n  int mFadeOut;\n};\n\n")])])]),a("h3",{attrs:{id:"titlerawcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titlerawcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TitleRawCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TitleRawCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"toggledownfallcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toggledownfallcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("ToggleDownfallCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ToggleDownfallCommand : Command\n{\n};\n\n")])])]),a("h3",{attrs:{id:"toggledownfallcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toggledownfallcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ToggleDownfallCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ToggleDownfallCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"tickingareacommand-list-l15-lambda-ef527cf2db8145510630afcadcb9e9a5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tickingareacommand-list-l15-lambda-ef527cf2db8145510630afcadcb9e9a5"}},[t._v("#")]),t._v(" "),a("code",[t._v("TickingAreaCommand::_list::__l15::<lambda_ef527cf2db8145510630afcadcb9e9a5>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TickingAreaCommand::_list::__l15::<lambda_ef527cf2db8145510630afcadcb9e9a5>\n{\n  std::string *listOfTickingAreas;\n  const TickingAreaCommand *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"teleportcommand-execute-l32-lambda-d12bd4980707bc17e4326e7408eadb2e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#teleportcommand-execute-l32-lambda-d12bd4980707bc17e4326e7408eadb2e"}},[t._v("#")]),t._v(" "),a("code",[t._v("TeleportCommand::execute::__l32::<lambda_d12bd4980707bc17e4326e7408eadb2e>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TeleportCommand::execute::__l32::<lambda_d12bd4980707bc17e4326e7408eadb2e>\n{\n  Actor *target;\n  AutomaticID<Dimension,int> *destinationDimension;\n  Vec3 *destination;\n};\n\n")])])]),a("h3",{attrs:{id:"tagscomponent-idtype-leveltagsetidtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tagscomponent-idtype-leveltagsetidtype"}},[t._v("#")]),t._v(" "),a("code",[t._v("TagsComponent<IDType<LevelTagSetIDType> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TagsComponent<IDType<LevelTagSetIDType> > : IEntityComponent\n{\n  IDType<LevelTagSetIDType> mTagSetID;\n};\n\n")])])]),a("h3",{attrs:{id:"tree-desc-s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-desc-s"}},[t._v("#")]),t._v(" "),a("code",[t._v("tree_desc_s")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tree_desc_s\n{\n  ct_data_s *dyn_tree;\n  int max_code;\n  const static_tree_desc_s *stat_desc;\n};\n\n")])])]),a("h3",{attrs:{id:"timestamp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timestamp"}},[t._v("#")]),t._v(" "),a("code",[t._v("TimeStamp")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TimeStamp\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tropicalfish"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tropicalfish"}},[t._v("#")]),t._v(" "),a("code",[t._v("TropicalFish")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TropicalFish : WaterAnimal\n{\n  float mAnimationAmount;\n  float mAnimationAmountPrev;\n};\n\n")])])]),a("h3",{attrs:{id:"targetgoaldefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#targetgoaldefinition"}},[t._v("#")]),t._v(" "),a("code",[t._v("TargetGoalDefinition")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TargetGoalDefinition : BaseGoalDefinition\n{\n  bool mAttackOwner;\n  bool mMustReach;\n  bool mMustSee;\n  float mDefaultFollowDistance;\n  float mForgetTargetTime;\n  float mPersistTargetTime;\n  std::vector<MobDescriptor> mTargetTypes;\n};\n\n")])])]),a("h3",{attrs:{id:"targetgoaldefinition-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#targetgoaldefinition-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TargetGoalDefinition_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TargetGoalDefinition_vtbl\n{\n  void (__fastcall *~BaseGoalDefinition)(BaseGoalDefinition *this);\n  bool (__fastcall *validateMobType)(BaseGoalDefinition *this, Mob *);\n  bool (__fastcall *validate)(BaseGoalDefinition *this, Mob *);\n};\n\n")])])]),a("h3",{attrs:{id:"targetgoal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#targetgoal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TargetGoal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TargetGoal : Goal\n{\n  Mob *mMob;\n  bool mAttackOwner;\n  bool mMustReach;\n  bool mGlobalMustSee;\n  bool mTargetMustSee;\n  int mTargetMustSeeForgetTicks;\n  bool mFilterFailure;\n  int mFilterFailureTicks;\n  int mGlobalMustSeeForgetTicks;\n  int mPersistTargetTicks;\n  int mReachCache;\n  int mReachCacheTime;\n  int mUnseenTicks;\n  float mWithinDefault;\n  std::vector<MobDescriptor> mTargetTypes;\n};\n\n")])])]),a("h3",{attrs:{id:"targetgoal-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#targetgoal-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TargetGoal_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TargetGoal_vtbl\n{\n  void (__fastcall *~Goal)(Goal *this);\n  bool (__fastcall *canUse)(Goal *this);\n  bool (__fastcall *canContinueToUse)(Goal *this);\n  bool (__fastcall *canBeInterrupted)(Goal *this);\n  void (__fastcall *start)(Goal *this);\n  void (__fastcall *stop)(Goal *this);\n  void (__fastcall *tick)(Goal *this);\n  void (__fastcall *appendDebugInfo)(Goal *this, std::string *);\n  bool (__fastcall *isTargetGoal)(Goal *this);\n  void (__fastcall *onPlayerDimensionChanged)(Goal *this, Player *, AutomaticID<Dimension,int>);\n  bool (__fastcall *_canAttack)(TargetGoal *this, Mob *, Actor *, bool, bool, const MobDescriptor **);\n};\n\n")])])]),a("h3",{attrs:{id:"typeid-t-goal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeid-t-goal"}},[t._v("#")]),t._v(" "),a("code",[t._v("typeid_t<Goal>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj typeid_t<Goal>\n{\n  unsigned __int16 mID;\n};\n\n")])])]),a("h3",{attrs:{id:"turtle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#turtle"}},[t._v("#")]),t._v(" "),a("code",[t._v("Turtle")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj Turtle : Animal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"testnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testnode"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestNode")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TestNode : BehaviorNode\n{\n  std::string mTestVal;\n  int mCnt;\n};\n\n")])])]),a("h3",{attrs:{id:"testnode-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testnode-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestNode_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TestNode_vtbl\n{\n  void (__fastcall *~BehaviorNode)(BehaviorNode *this);\n  BehaviorStatus (__fastcall *tick)(BehaviorNode *this, Actor *);\n  void (__fastcall *initializeFromDefinition)(BehaviorNode *this, Actor *);\n};\n\n")])])]),a("h3",{attrs:{id:"testdefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testdefinition"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestDefinition")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TestDefinition : BehaviorDefinition\n{\n  std::string mTestValue;\n  std::string mTestValueId;\n};\n\n")])])]),a("h3",{attrs:{id:"testdefinition-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testdefinition-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TestDefinition_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TestDefinition_vtbl\n{\n  void (__fastcall *~BehaviorDefinition)(BehaviorDefinition *this);\n  void (__fastcall *load)(BehaviorDefinition *this, Json::Value, const BehaviorFactory *);\n  std::unique_ptr<BehaviorNode> *(__fastcall *createNode)(BehaviorDefinition *this, std::unique_ptr<BehaviorNode> *result, Actor *, const BehaviorFactory *, BehaviorNode *, BehaviorData *);\n};\n\n")])])]),a("h3",{attrs:{id:"tiercomponentdescription"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tiercomponentdescription"}},[t._v("#")]),t._v(" "),a("code",[t._v("TierComponentDescription")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TierComponentDescription : BlockComponentDescription\n{\n  DiggerType mDiggerType;\n  int mLevel;\n  bool mDestroySpecial;\n};\n\n")])])]),a("h3",{attrs:{id:"tiercomponentdescription-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tiercomponentdescription-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TierComponentDescription_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TierComponentDescription_vtbl\n{\n  void (__fastcall *~BlockComponentDescription)(BlockComponentDescription *this);\n  const std::string *(__fastcall *getName)(BlockComponentDescription *this);\n  void (__fastcall *initializeComponent)(BlockComponentDescription *this, EntityContext *);\n  void (__fastcall *buildSchema)(BlockComponentDescription *this, std::shared_ptr<JsonUtil::JsonSchemaObjectNode<JsonUtil::EmptyClass,BlockComponentGroupDescription> > *, const BlockComponentFactory *);\n  bool (__fastcall *isNetworkComponent)(BlockComponentDescription *this);\n  std::unique_ptr<CompoundTag> *(__fastcall *buildNetworkTag)(BlockComponentDescription *this, std::unique_ptr<CompoundTag> *result);\n  void (__fastcall *initializeFromNetwork)(BlockComponentDescription *this, const CompoundTag *);\n};\n\n")])])]),a("h3",{attrs:{id:"tiercomponent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tiercomponent"}},[t._v("#")]),t._v(" "),a("code",[t._v("TierComponent")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(4)) TierComponent\n{\n  DiggerType mDiggerType;\n  int mLevel;\n  bool mDestroySpecial;\n};\n\n")])])]),a("h3",{attrs:{id:"thrownegg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrownegg"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThrownEgg")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ThrownEgg : Throwable\n{\n};\n\n")])])]),a("h3",{attrs:{id:"thrownegg-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrownegg-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThrownEgg_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ThrownEgg_vtbl\n{\n  bool (__fastcall *hasComponent)(Actor *this, const HashedString *);\n  void (__fastcall *reloadHardcoded)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadHardcodedClient)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *initializeComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *_serverInitItemStackIds)(Actor *this);\n  void (__fastcall *_doInitialMove)(Actor *this);\n  bool (__fastcall *checkAllSensitiveWords)(Actor *this);\n  bool (__fastcall *checkNameTag)(Actor *this);\n  void (__fastcall *~Actor)(Actor *this);\n  void (__fastcall *reset)(Actor *this);\n  int (__fastcall *getOnDeathExperience)(Actor *this);\n  ActorType (__fastcall *getOwnerEntityType)(Actor *this);\n  void (__fastcall *remove)(Actor *this);\n  void (__fastcall *setPos)(Actor *this, const Vec3 *);\n  const PredictedMovementValues *(__fastcall *getPredictedMovementValues)(Actor *this);\n  const Vec3 *(__fastcall *getPos)(Actor *this);\n  const Vec3 *(__fastcall *getPosOld)(Actor *this);\n  const Vec3 *(__fastcall *getPosExtrapolated)(Actor *this, const Vec3 *result, float);\n  Vec3 *(__fastcall *getAttachPos)(Actor *this, Vec3 *result, ActorLocation, float);\n  Vec3 *(__fastcall *getFiringPos)(Actor *this, Vec3 *result);\n  void (__fastcall *setRot)(Actor *this, const Vec2 *);\n  void (__fastcall *move)(Actor *this, IActorMovementProxy *, const Vec3 *);\n  void (__fastcall *move)(Actor *this, const Vec3 *);\n  Vec3 *(__fastcall *getInterpolatedRidingPosition)(Actor *this, Vec3 *result, float);\n  float (__fastcall *getInterpolatedBodyRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedHeadRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedBodyYaw)(Actor *this, float);\n  float (__fastcall *getYawSpeedInDegreesPerSecond)(Actor *this);\n  float (__fastcall *getInterpolatedWalkAnimSpeed)(Actor *this, float);\n  Vec3 *(__fastcall *getInterpolatedRidingOffset)(Actor *this, Vec3 *result, float);\n  void (__fastcall *checkBlockCollisions)(Actor *this);\n  void (__fastcall *checkBlockCollisions)(Actor *this, const AABB *, std::function<void __cdecl(BlockSource &,Block const &,BlockPos const &,Actor &)>);\n  bool (__fastcall *isFireImmune)(Actor *this);\n  bool (__fastcall *breaksFallingBlocks)(Actor *this);\n  void (__fastcall *blockedByShield)(Actor *this, const ActorDamageSource *, Actor *);\n  void (__fastcall *teleportTo)(Actor *this, const Vec3 *, bool, int, int, const ActorUniqueID *);\n  bool (__fastcall *tryTeleportTo)(Actor *this, const Vec3 *, bool, bool, int, int);\n  void (__fastcall *chorusFruitTeleport)(Actor *this, Vec3 *);\n  void (__fastcall *lerpTo)(Actor *this, const Vec3 *, const Vec2 *, int);\n  void (__fastcall *lerpMotion)(Actor *this, const Vec3 *);\n  std::unique_ptr<AddActorBasePacket> *(__fastcall *getAddPacket)(Actor *this, std::unique_ptr<AddActorBasePacket> *result);\n  void (__fastcall *normalTick)(Actor *this);\n  void (__fastcall *baseTick)(Actor *this);\n  void (__fastcall *rideTick)(Actor *this);\n  void (__fastcall *positionRider)(Actor *this, Actor *, float);\n  float (__fastcall *getRidingHeight)(Actor *this);\n  bool (__fastcall *startRiding)(Actor *this, Actor *);\n  void (__fastcall *addRider)(Actor *this, Actor *);\n  void (__fastcall *flagRiderToRemove)(Actor *this, Actor *);\n  std::string *(__fastcall *getExitTip)(Actor *this, std::string *result, const std::string *, InputMode);\n  bool (__fastcall *intersects)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *, float);\n  bool (__fastcall *isInWall)(Actor *this);\n  bool (__fastcall *isInvisible)(Actor *this);\n  bool (__fastcall *canShowNameTag)(Actor *this);\n  bool (__fastcall *canExistInPeaceful)(Actor *this);\n  void (__fastcall *setNameTagVisible)(Actor *this, bool);\n  const std::string *(__fastcall *getNameTag)(Actor *this);\n  unsigned __int64 (__fastcall *getNameTagAsHash)(Actor *this);\n  std::string *(__fastcall *getFormattedNameTag)(Actor *this, std::string *result);\n  void (__fastcall *filterFormattedNameTag)(Actor *this, const UIProfanityContext *);\n  void (__fastcall *setNameTag)(Actor *this, const std::string *);\n  bool (__fastcall *getAlwaysShowNameTag)(Actor *this);\n  void (__fastcall *setScoreTag)(Actor *this, const std::string *);\n  const std::string *(__fastcall *getScoreTag)(Actor *this);\n  bool (__fastcall *isInWater)(Actor *this);\n  bool (__fastcall *hasEnteredWater)(Actor *this);\n  bool (__fastcall *isImmersedInWater)(Actor *this);\n  bool (__fastcall *isInWaterOrRain)(Actor *this);\n  bool (__fastcall *isInLava)(Actor *this);\n  bool (__fastcall *isUnderLiquid)(Actor *this, MaterialType);\n  bool (__fastcall *isOverWater)(Actor *this);\n  void (__fastcall *makeStuckInBlock)(Actor *this, const Vec3 *);\n  float (__fastcall *getCameraOffset)(Actor *this);\n  float (__fastcall *getShadowHeightOffs)(Actor *this);\n  float (__fastcall *getShadowRadius)(Actor *this);\n  Vec3 *(__fastcall *getHeadLookVector)(Actor *this, Vec3 *result, float);\n  bool (__fastcall *canSeeInvisible)(Actor *this);\n  bool (__fastcall *canSee)(Actor *this, const Vec3 *);\n  bool (__fastcall *canSee)(Actor *this, const Actor *);\n  bool (__fastcall *isSkyLit)(Actor *this, float);\n  float (__fastcall *getBrightness)(Actor *this, float);\n  bool (__fastcall *interactPreventDefault)(Actor *this);\n  void (__fastcall *playerTouch)(Actor *this, Player *);\n  void (__fastcall *onAboveBubbleColumn)(Actor *this, const bool);\n  void (__fastcall *onInsideBubbleColumn)(Actor *this, const bool);\n  bool (__fastcall *isImmobile)(Actor *this);\n  bool (__fastcall *isSilent)(Actor *this);\n  bool (__fastcall *isPickable)(Actor *this);\n  bool (__fastcall *isFishable)(Actor *this);\n  bool (__fastcall *isSleeping)(Actor *this);\n  bool (__fastcall *isShootable)(Actor *this);\n  void (__fastcall *setSneaking)(Actor *this, bool);\n  bool (__fastcall *isBlocking)(Actor *this);\n  bool (__fastcall *isDamageBlocked)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *isAlive)(Actor *this);\n  bool (__fastcall *isOnFire)(Actor *this);\n  bool (__fastcall *isOnHotBlock)(Actor *this);\n  bool (__fastcall *isCreativeModeAllowed)(Actor *this);\n  bool (__fastcall *isSurfaceMob)(Actor *this);\n  bool (__fastcall *isTargetable)(Actor *this);\n  bool (__fastcall *isLocalPlayer)(Actor *this);\n  bool (__fastcall *isPlayer)(Actor *this);\n  bool (__fastcall *canAttack)(Actor *this, Actor *, bool);\n  void (__fastcall *setTarget)(Actor *this, Actor *);\n  Actor *(__fastcall *findAttackTarget)(Actor *this);\n  bool (__fastcall *isValidTarget)(Actor *this, Actor *);\n  bool (__fastcall *attack)(Actor *this, Actor *);\n  void (__fastcall *performRangedAttack)(Actor *this, Actor *, float);\n  void (__fastcall *adjustDamageAmount)(Actor *this, int *);\n  int (__fastcall *getEquipmentCount)(Actor *this);\n  void (__fastcall *setOwner)(Actor *this, const ActorUniqueID);\n  void (__fastcall *setSitting)(Actor *this, bool);\n  void (__fastcall *onTame)(Actor *this);\n  void (__fastcall *onFailedTame)(Actor *this);\n  int (__fastcall *getInventorySize)(Actor *this);\n  int (__fastcall *getEquipSlots)(Actor *this);\n  int (__fastcall *getChestSlots)(Actor *this);\n  void (__fastcall *setStanding)(Actor *this, bool);\n  bool (__fastcall *canPowerJump)(Actor *this);\n  void (__fastcall *setCanPowerJump)(Actor *this, bool);\n  bool (__fastcall *isJumping)(Actor *this);\n  bool (__fastcall *isEnchanted)(Actor *this);\n  void (__fastcall *rideJumped)(Actor *this);\n  void (__fastcall *rideLanded)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *shouldRender)(Actor *this);\n  bool (__fastcall *isInvulnerableTo)(Actor *this, const ActorDamageSource *);\n  ActorDamageCause (__fastcall *getBlockDamageCause)(Actor *this, const Block *);\n  void (__fastcall *actuallyHurt)(Actor *this, int, const ActorDamageSource *, bool);\n  void (__fastcall *animateHurt)(Actor *this);\n  bool (__fastcall *doFireHurt)(Actor *this, int);\n  void (__fastcall *onLightningHit)(Actor *this);\n  void (__fastcall *onBounceStarted)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *feed)(Actor *this, int);\n  void (__fastcall *handleEntityEvent)(Actor *this, ActorEvent, int);\n  float (__fastcall *getPickRadius)(Actor *this);\n  const HashedString *(__fastcall *getActorRendererId)(Actor *this);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const ItemStack *, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int);\n  void (__fastcall *despawn)(Actor *this);\n  void (__fastcall *killed)(Actor *this, Actor *);\n  void (__fastcall *awardKillScore)(Actor *this, Actor *, int);\n  void (__fastcall *setArmor)(Actor *this, ArmorSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getArmor)(Actor *this, ArmorSlot);\n  ArmorMaterialType (__fastcall *getArmorMaterialTypeInSlot)(Actor *this, ArmorSlot);\n  ArmorTextureType (__fastcall *getArmorMaterialTextureTypeInSlot)(Actor *this, ArmorSlot);\n  float (__fastcall *getArmorColorInSlot)(Actor *this, ArmorSlot, int);\n  const ItemStack *(__fastcall *getEquippedSlot)(Actor *this, EquipmentSlot);\n  void (__fastcall *setEquippedSlot)(Actor *this, EquipmentSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getCarriedItem)(Actor *this);\n  void (__fastcall *setCarriedItem)(Actor *this, const ItemStack *);\n  void (__fastcall *setOffhandSlot)(Actor *this, const ItemStack *);\n  const ItemStack *(__fastcall *getEquippedTotem)(Actor *this);\n  bool (__fastcall *consumeTotem)(Actor *this);\n  bool (__fastcall *save)(Actor *this, CompoundTag *);\n  void (__fastcall *saveWithoutId)(Actor *this, CompoundTag *);\n  bool (__fastcall *load)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *loadLinks)(Actor *this, const CompoundTag *, std::vector<ActorLink> *, DataLoadHelper *);\n  ActorType (__fastcall *getEntityTypeId)(Actor *this);\n  const HashedString *(__fastcall *queryEntityRenderer)(Actor *this);\n  ActorUniqueID *(__fastcall *getSourceUniqueID)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *setOnFire)(Actor *this, int);\n  AABB *(__fastcall *getHandleWaterAABB)(Actor *this, AABB *result);\n  void (__fastcall *handleInsidePortal)(Actor *this, const BlockPos *);\n  int (__fastcall *getPortalCooldown)(Actor *this);\n  int (__fastcall *getPortalWaitTime)(Actor *this);\n  AutomaticID<Dimension,int> *(__fastcall *getDimensionId)(Actor *this, AutomaticID<Dimension,int> *result);\n  bool (__fastcall *canChangeDimensions)(Actor *this);\n  void (__fastcall *changeDimension)(Actor *this, const ChangeDimensionPacket *);\n  void (__fastcall *changeDimension)(Actor *this, AutomaticID<Dimension,int>, bool);\n  ActorUniqueID *(__fastcall *getControllingPlayer)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *checkFallDamage)(Actor *this, float, bool);\n  void (__fastcall *causeFallDamage)(Actor *this, float);\n  void (__fastcall *handleFallDistanceOnServer)(Actor *this, float, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, int, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, const Block *, bool);\n  void (__fastcall *onSynchedDataUpdate)(Actor *this, int);\n  bool (__fastcall *canAddRider)(Actor *this, Actor *);\n  bool (__fastcall *canPickupItem)(Actor *this, const ItemStack *);\n  bool (__fastcall *canBePulledIntoVehicle)(Actor *this);\n  bool (__fastcall *inCaravan)(Actor *this);\n  bool (__fastcall *isLeashableType)(Actor *this);\n  void (__fastcall *tickLeash)(Actor *this);\n  void (__fastcall *sendMotionPacketIfNeeded)(Actor *this);\n  bool (__fastcall *canSynchronizeNewEntity)(Actor *this);\n  bool (__fastcall *stopRiding)(Actor *this, bool, bool, bool, bool);\n  void (__fastcall *startSwimming)(Actor *this);\n  void (__fastcall *stopSwimming)(Actor *this);\n  void (__fastcall *buildDebugInfo)(Actor *this, std::string *);\n  CommandPermissionLevel (__fastcall *getCommandPermissionLevel)(Actor *this);\n  AttributeInstance *(__fastcall *getMutableAttribute)(Actor *this, const Attribute *);\n  const AttributeInstance *(__fastcall *getAttribute)(Actor *this, const Attribute *);\n  int (__fastcall *getDeathTime)(Actor *this);\n  void (__fastcall *heal)(Actor *this, int);\n  bool (__fastcall *isInvertedHealAndHarm)(Actor *this);\n  bool (__fastcall *canBeAffected)(Actor *this, const MobEffectInstance *);\n  bool (__fastcall *canBeAffected)(Actor *this, int);\n  bool (__fastcall *canBeAffectedByArrow)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectAdded)(Actor *this, MobEffectInstance *);\n  void (__fastcall *onEffectUpdated)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectRemoved)(Actor *this, MobEffectInstance *);\n  AnimationComponent *(__fastcall *getAnimationComponent)(Actor *this);\n  void (__fastcall *openContainerComponent)(Actor *this, Player *);\n  void (__fastcall *swing)(Actor *this);\n  void (__fastcall *useItem)(Actor *this, ItemStackBase *, ItemUseMethod, bool);\n  bool (__fastcall *hasOutputSignal)(Actor *this, unsigned __int8);\n  int (__fastcall *getOutputSignal)(Actor *this);\n  void (__fastcall *getDebugText)(Actor *this, std::vector<std::string> *);\n  float (__fastcall *getMapDecorationRotation)(Actor *this);\n  float (__fastcall *getRiderYRotation)(Actor *this, const Actor *);\n  float (__fastcall *getYHeadRot)(Actor *this);\n  bool (__fastcall *isWorldBuilder)(Actor *this);\n  bool (__fastcall *isCreative)(Actor *this);\n  bool (__fastcall *isAdventure)(Actor *this);\n  bool (__fastcall *add)(Actor *this, ItemStack *);\n  bool (__fastcall *drop)(Actor *this, const ItemStack *, bool);\n  bool (__fastcall *getInteraction)(Actor *this, Player *, ActorInteraction *, const Vec3 *);\n  bool (__fastcall *canDestroyBlock)(Actor *this, const Block *);\n  void (__fastcall *setAuxValue)(Actor *this, int);\n  void (__fastcall *setSize)(Actor *this, float, float);\n  int (__fastcall *getLifeSpan)(Actor *this);\n  void (__fastcall *onOrphan)(Actor *this);\n  void (__fastcall *wobble)(Actor *this);\n  bool (__fastcall *wasHurt)(Actor *this);\n  void (__fastcall *startSpinAttack)(Actor *this);\n  void (__fastcall *stopSpinAttack)(Actor *this);\n  void (__fastcall *setDamageNearbyMobs)(Actor *this, bool);\n  bool (__fastcall *hasCritBox)(Actor *this);\n  bool (__fastcall *isCritHit)(Actor *this);\n  void (__fastcall *renderDebugServerState)(Actor *this, const Options *);\n  void (__fastcall *reloadLootTable)(Actor *this, const EquipmentTableDefinition *);\n  void (__fastcall *reloadLootTable)(Actor *this);\n  float (__fastcall *getDeletionDelayTimeSeconds)(Actor *this);\n  void (__fastcall *kill)(Actor *this);\n  void (__fastcall *die)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *shouldTick)(Actor *this);\n  std::shared_ptr<IActorMovementProxy> *(__fastcall *createMovementProxy)(Actor *this, std::shared_ptr<IActorMovementProxy> *result);\n  void (__fastcall *updateEntitySpecificMolangVariables)(Actor *this, RenderParams *);\n  bool (__fastcall *shouldTryMakeStepSound)(Actor *this);\n  float (__fastcall *getNextStep)(Actor *this, const float);\n  bool (__fastcall *canMakeStepSound)(Actor *this);\n  void (__fastcall *outOfWorld)(Actor *this);\n  bool (__fastcall *_hurt)(Actor *this, const ActorDamageSource *, int, bool, bool);\n  void (__fastcall *markHurt)(Actor *this);\n  void (__fastcall *readAdditionalSaveData)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *addAdditionalSaveData)(Actor *this, CompoundTag *);\n  void (__fastcall *_playStepSound)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *_playFlySound)(Actor *this, const BlockPos *, const Block *);\n  bool (__fastcall *_makeFlySound)(Actor *this);\n  void (__fastcall *checkInsideBlocks)(Actor *this, float);\n  void (__fastcall *pushOutOfBlocks)(Actor *this, const Vec3 *);\n  bool (__fastcall *updateWaterState)(Actor *this);\n  void (__fastcall *doWaterSplashEffect)(Actor *this);\n  void (__fastcall *spawnTrailBubbles)(Actor *this);\n  void (__fastcall *updateInsideBlock)(Actor *this);\n  LootTable *(__fastcall *getLootTable)(Actor *this);\n  LootTable *(__fastcall *getDefaultLootTable)(Actor *this);\n  void (__fastcall *_removeRider)(Actor *this, const ActorUniqueID *, bool, bool, bool);\n  void (__fastcall *_onSizeUpdated)(Actor *this);\n  void (__fastcall *_doAutoAttackOnTouch)(Actor *this, Actor *);\n  float (__fastcall *getThrowPower)(Throwable *this);\n  bool (__fastcall *stopUponGroundCollision)(Throwable *this);\n  float (__fastcall *getThrowUpAngleOffset)(Throwable *this);\n  float (__fastcall *getGravity)(Throwable *this);\n  ParticleType (__fastcall *getParticleType)(Throwable *this);\n  void (__fastcall *onHit)(Throwable *this, const HitResult *);\n};\n\n")])])]),a("h3",{attrs:{id:"thrownenderpearl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrownenderpearl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThrownEnderpearl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ThrownEnderpearl : Throwable\n{\n};\n\n")])])]),a("h3",{attrs:{id:"thrownenderpearl-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrownenderpearl-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThrownEnderpearl_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ThrownEnderpearl_vtbl\n{\n  bool (__fastcall *hasComponent)(Actor *this, const HashedString *);\n  void (__fastcall *reloadHardcoded)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadHardcodedClient)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *initializeComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *_serverInitItemStackIds)(Actor *this);\n  void (__fastcall *_doInitialMove)(Actor *this);\n  bool (__fastcall *checkAllSensitiveWords)(Actor *this);\n  bool (__fastcall *checkNameTag)(Actor *this);\n  void (__fastcall *~Actor)(Actor *this);\n  void (__fastcall *reset)(Actor *this);\n  int (__fastcall *getOnDeathExperience)(Actor *this);\n  ActorType (__fastcall *getOwnerEntityType)(Actor *this);\n  void (__fastcall *remove)(Actor *this);\n  void (__fastcall *setPos)(Actor *this, const Vec3 *);\n  const PredictedMovementValues *(__fastcall *getPredictedMovementValues)(Actor *this);\n  const Vec3 *(__fastcall *getPos)(Actor *this);\n  const Vec3 *(__fastcall *getPosOld)(Actor *this);\n  const Vec3 *(__fastcall *getPosExtrapolated)(Actor *this, const Vec3 *result, float);\n  Vec3 *(__fastcall *getAttachPos)(Actor *this, Vec3 *result, ActorLocation, float);\n  Vec3 *(__fastcall *getFiringPos)(Actor *this, Vec3 *result);\n  void (__fastcall *setRot)(Actor *this, const Vec2 *);\n  void (__fastcall *move)(Actor *this, IActorMovementProxy *, const Vec3 *);\n  void (__fastcall *move)(Actor *this, const Vec3 *);\n  Vec3 *(__fastcall *getInterpolatedRidingPosition)(Actor *this, Vec3 *result, float);\n  float (__fastcall *getInterpolatedBodyRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedHeadRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedBodyYaw)(Actor *this, float);\n  float (__fastcall *getYawSpeedInDegreesPerSecond)(Actor *this);\n  float (__fastcall *getInterpolatedWalkAnimSpeed)(Actor *this, float);\n  Vec3 *(__fastcall *getInterpolatedRidingOffset)(Actor *this, Vec3 *result, float);\n  void (__fastcall *checkBlockCollisions)(Actor *this);\n  void (__fastcall *checkBlockCollisions)(Actor *this, const AABB *, std::function<void __cdecl(BlockSource &,Block const &,BlockPos const &,Actor &)>);\n  bool (__fastcall *isFireImmune)(Actor *this);\n  bool (__fastcall *breaksFallingBlocks)(Actor *this);\n  void (__fastcall *blockedByShield)(Actor *this, const ActorDamageSource *, Actor *);\n  void (__fastcall *teleportTo)(Actor *this, const Vec3 *, bool, int, int, const ActorUniqueID *);\n  bool (__fastcall *tryTeleportTo)(Actor *this, const Vec3 *, bool, bool, int, int);\n  void (__fastcall *chorusFruitTeleport)(Actor *this, Vec3 *);\n  void (__fastcall *lerpTo)(Actor *this, const Vec3 *, const Vec2 *, int);\n  void (__fastcall *lerpMotion)(Actor *this, const Vec3 *);\n  std::unique_ptr<AddActorBasePacket> *(__fastcall *getAddPacket)(Actor *this, std::unique_ptr<AddActorBasePacket> *result);\n  void (__fastcall *normalTick)(Actor *this);\n  void (__fastcall *baseTick)(Actor *this);\n  void (__fastcall *rideTick)(Actor *this);\n  void (__fastcall *positionRider)(Actor *this, Actor *, float);\n  float (__fastcall *getRidingHeight)(Actor *this);\n  bool (__fastcall *startRiding)(Actor *this, Actor *);\n  void (__fastcall *addRider)(Actor *this, Actor *);\n  void (__fastcall *flagRiderToRemove)(Actor *this, Actor *);\n  std::string *(__fastcall *getExitTip)(Actor *this, std::string *result, const std::string *, InputMode);\n  bool (__fastcall *intersects)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *, float);\n  bool (__fastcall *isInWall)(Actor *this);\n  bool (__fastcall *isInvisible)(Actor *this);\n  bool (__fastcall *canShowNameTag)(Actor *this);\n  bool (__fastcall *canExistInPeaceful)(Actor *this);\n  void (__fastcall *setNameTagVisible)(Actor *this, bool);\n  const std::string *(__fastcall *getNameTag)(Actor *this);\n  unsigned __int64 (__fastcall *getNameTagAsHash)(Actor *this);\n  std::string *(__fastcall *getFormattedNameTag)(Actor *this, std::string *result);\n  void (__fastcall *filterFormattedNameTag)(Actor *this, const UIProfanityContext *);\n  void (__fastcall *setNameTag)(Actor *this, const std::string *);\n  bool (__fastcall *getAlwaysShowNameTag)(Actor *this);\n  void (__fastcall *setScoreTag)(Actor *this, const std::string *);\n  const std::string *(__fastcall *getScoreTag)(Actor *this);\n  bool (__fastcall *isInWater)(Actor *this);\n  bool (__fastcall *hasEnteredWater)(Actor *this);\n  bool (__fastcall *isImmersedInWater)(Actor *this);\n  bool (__fastcall *isInWaterOrRain)(Actor *this);\n  bool (__fastcall *isInLava)(Actor *this);\n  bool (__fastcall *isUnderLiquid)(Actor *this, MaterialType);\n  bool (__fastcall *isOverWater)(Actor *this);\n  void (__fastcall *makeStuckInBlock)(Actor *this, const Vec3 *);\n  float (__fastcall *getCameraOffset)(Actor *this);\n  float (__fastcall *getShadowHeightOffs)(Actor *this);\n  float (__fastcall *getShadowRadius)(Actor *this);\n  Vec3 *(__fastcall *getHeadLookVector)(Actor *this, Vec3 *result, float);\n  bool (__fastcall *canSeeInvisible)(Actor *this);\n  bool (__fastcall *canSee)(Actor *this, const Vec3 *);\n  bool (__fastcall *canSee)(Actor *this, const Actor *);\n  bool (__fastcall *isSkyLit)(Actor *this, float);\n  float (__fastcall *getBrightness)(Actor *this, float);\n  bool (__fastcall *interactPreventDefault)(Actor *this);\n  void (__fastcall *playerTouch)(Actor *this, Player *);\n  void (__fastcall *onAboveBubbleColumn)(Actor *this, const bool);\n  void (__fastcall *onInsideBubbleColumn)(Actor *this, const bool);\n  bool (__fastcall *isImmobile)(Actor *this);\n  bool (__fastcall *isSilent)(Actor *this);\n  bool (__fastcall *isPickable)(Actor *this);\n  bool (__fastcall *isFishable)(Actor *this);\n  bool (__fastcall *isSleeping)(Actor *this);\n  bool (__fastcall *isShootable)(Actor *this);\n  void (__fastcall *setSneaking)(Actor *this, bool);\n  bool (__fastcall *isBlocking)(Actor *this);\n  bool (__fastcall *isDamageBlocked)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *isAlive)(Actor *this);\n  bool (__fastcall *isOnFire)(Actor *this);\n  bool (__fastcall *isOnHotBlock)(Actor *this);\n  bool (__fastcall *isCreativeModeAllowed)(Actor *this);\n  bool (__fastcall *isSurfaceMob)(Actor *this);\n  bool (__fastcall *isTargetable)(Actor *this);\n  bool (__fastcall *isLocalPlayer)(Actor *this);\n  bool (__fastcall *isPlayer)(Actor *this);\n  bool (__fastcall *canAttack)(Actor *this, Actor *, bool);\n  void (__fastcall *setTarget)(Actor *this, Actor *);\n  Actor *(__fastcall *findAttackTarget)(Actor *this);\n  bool (__fastcall *isValidTarget)(Actor *this, Actor *);\n  bool (__fastcall *attack)(Actor *this, Actor *);\n  void (__fastcall *performRangedAttack)(Actor *this, Actor *, float);\n  void (__fastcall *adjustDamageAmount)(Actor *this, int *);\n  int (__fastcall *getEquipmentCount)(Actor *this);\n  void (__fastcall *setOwner)(Actor *this, const ActorUniqueID);\n  void (__fastcall *setSitting)(Actor *this, bool);\n  void (__fastcall *onTame)(Actor *this);\n  void (__fastcall *onFailedTame)(Actor *this);\n  int (__fastcall *getInventorySize)(Actor *this);\n  int (__fastcall *getEquipSlots)(Actor *this);\n  int (__fastcall *getChestSlots)(Actor *this);\n  void (__fastcall *setStanding)(Actor *this, bool);\n  bool (__fastcall *canPowerJump)(Actor *this);\n  void (__fastcall *setCanPowerJump)(Actor *this, bool);\n  bool (__fastcall *isJumping)(Actor *this);\n  bool (__fastcall *isEnchanted)(Actor *this);\n  void (__fastcall *rideJumped)(Actor *this);\n  void (__fastcall *rideLanded)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *shouldRender)(Actor *this);\n  bool (__fastcall *isInvulnerableTo)(Actor *this, const ActorDamageSource *);\n  ActorDamageCause (__fastcall *getBlockDamageCause)(Actor *this, const Block *);\n  void (__fastcall *actuallyHurt)(Actor *this, int, const ActorDamageSource *, bool);\n  void (__fastcall *animateHurt)(Actor *this);\n  bool (__fastcall *doFireHurt)(Actor *this, int);\n  void (__fastcall *onLightningHit)(Actor *this);\n  void (__fastcall *onBounceStarted)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *feed)(Actor *this, int);\n  void (__fastcall *handleEntityEvent)(Actor *this, ActorEvent, int);\n  float (__fastcall *getPickRadius)(Actor *this);\n  const HashedString *(__fastcall *getActorRendererId)(Actor *this);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const ItemStack *, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int);\n  void (__fastcall *despawn)(Actor *this);\n  void (__fastcall *killed)(Actor *this, Actor *);\n  void (__fastcall *awardKillScore)(Actor *this, Actor *, int);\n  void (__fastcall *setArmor)(Actor *this, ArmorSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getArmor)(Actor *this, ArmorSlot);\n  ArmorMaterialType (__fastcall *getArmorMaterialTypeInSlot)(Actor *this, ArmorSlot);\n  ArmorTextureType (__fastcall *getArmorMaterialTextureTypeInSlot)(Actor *this, ArmorSlot);\n  float (__fastcall *getArmorColorInSlot)(Actor *this, ArmorSlot, int);\n  const ItemStack *(__fastcall *getEquippedSlot)(Actor *this, EquipmentSlot);\n  void (__fastcall *setEquippedSlot)(Actor *this, EquipmentSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getCarriedItem)(Actor *this);\n  void (__fastcall *setCarriedItem)(Actor *this, const ItemStack *);\n  void (__fastcall *setOffhandSlot)(Actor *this, const ItemStack *);\n  const ItemStack *(__fastcall *getEquippedTotem)(Actor *this);\n  bool (__fastcall *consumeTotem)(Actor *this);\n  bool (__fastcall *save)(Actor *this, CompoundTag *);\n  void (__fastcall *saveWithoutId)(Actor *this, CompoundTag *);\n  bool (__fastcall *load)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *loadLinks)(Actor *this, const CompoundTag *, std::vector<ActorLink> *, DataLoadHelper *);\n  ActorType (__fastcall *getEntityTypeId)(Actor *this);\n  const HashedString *(__fastcall *queryEntityRenderer)(Actor *this);\n  ActorUniqueID *(__fastcall *getSourceUniqueID)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *setOnFire)(Actor *this, int);\n  AABB *(__fastcall *getHandleWaterAABB)(Actor *this, AABB *result);\n  void (__fastcall *handleInsidePortal)(Actor *this, const BlockPos *);\n  int (__fastcall *getPortalCooldown)(Actor *this);\n  int (__fastcall *getPortalWaitTime)(Actor *this);\n  AutomaticID<Dimension,int> *(__fastcall *getDimensionId)(Actor *this, AutomaticID<Dimension,int> *result);\n  bool (__fastcall *canChangeDimensions)(Actor *this);\n  void (__fastcall *changeDimension)(Actor *this, const ChangeDimensionPacket *);\n  void (__fastcall *changeDimension)(Actor *this, AutomaticID<Dimension,int>, bool);\n  ActorUniqueID *(__fastcall *getControllingPlayer)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *checkFallDamage)(Actor *this, float, bool);\n  void (__fastcall *causeFallDamage)(Actor *this, float);\n  void (__fastcall *handleFallDistanceOnServer)(Actor *this, float, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, int, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, const Block *, bool);\n  void (__fastcall *onSynchedDataUpdate)(Actor *this, int);\n  bool (__fastcall *canAddRider)(Actor *this, Actor *);\n  bool (__fastcall *canPickupItem)(Actor *this, const ItemStack *);\n  bool (__fastcall *canBePulledIntoVehicle)(Actor *this);\n  bool (__fastcall *inCaravan)(Actor *this);\n  bool (__fastcall *isLeashableType)(Actor *this);\n  void (__fastcall *tickLeash)(Actor *this);\n  void (__fastcall *sendMotionPacketIfNeeded)(Actor *this);\n  bool (__fastcall *canSynchronizeNewEntity)(Actor *this);\n  bool (__fastcall *stopRiding)(Actor *this, bool, bool, bool, bool);\n  void (__fastcall *startSwimming)(Actor *this);\n  void (__fastcall *stopSwimming)(Actor *this);\n  void (__fastcall *buildDebugInfo)(Actor *this, std::string *);\n  CommandPermissionLevel (__fastcall *getCommandPermissionLevel)(Actor *this);\n  AttributeInstance *(__fastcall *getMutableAttribute)(Actor *this, const Attribute *);\n  const AttributeInstance *(__fastcall *getAttribute)(Actor *this, const Attribute *);\n  int (__fastcall *getDeathTime)(Actor *this);\n  void (__fastcall *heal)(Actor *this, int);\n  bool (__fastcall *isInvertedHealAndHarm)(Actor *this);\n  bool (__fastcall *canBeAffected)(Actor *this, const MobEffectInstance *);\n  bool (__fastcall *canBeAffected)(Actor *this, int);\n  bool (__fastcall *canBeAffectedByArrow)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectAdded)(Actor *this, MobEffectInstance *);\n  void (__fastcall *onEffectUpdated)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectRemoved)(Actor *this, MobEffectInstance *);\n  AnimationComponent *(__fastcall *getAnimationComponent)(Actor *this);\n  void (__fastcall *openContainerComponent)(Actor *this, Player *);\n  void (__fastcall *swing)(Actor *this);\n  void (__fastcall *useItem)(Actor *this, ItemStackBase *, ItemUseMethod, bool);\n  bool (__fastcall *hasOutputSignal)(Actor *this, unsigned __int8);\n  int (__fastcall *getOutputSignal)(Actor *this);\n  void (__fastcall *getDebugText)(Actor *this, std::vector<std::string> *);\n  float (__fastcall *getMapDecorationRotation)(Actor *this);\n  float (__fastcall *getRiderYRotation)(Actor *this, const Actor *);\n  float (__fastcall *getYHeadRot)(Actor *this);\n  bool (__fastcall *isWorldBuilder)(Actor *this);\n  bool (__fastcall *isCreative)(Actor *this);\n  bool (__fastcall *isAdventure)(Actor *this);\n  bool (__fastcall *add)(Actor *this, ItemStack *);\n  bool (__fastcall *drop)(Actor *this, const ItemStack *, bool);\n  bool (__fastcall *getInteraction)(Actor *this, Player *, ActorInteraction *, const Vec3 *);\n  bool (__fastcall *canDestroyBlock)(Actor *this, const Block *);\n  void (__fastcall *setAuxValue)(Actor *this, int);\n  void (__fastcall *setSize)(Actor *this, float, float);\n  int (__fastcall *getLifeSpan)(Actor *this);\n  void (__fastcall *onOrphan)(Actor *this);\n  void (__fastcall *wobble)(Actor *this);\n  bool (__fastcall *wasHurt)(Actor *this);\n  void (__fastcall *startSpinAttack)(Actor *this);\n  void (__fastcall *stopSpinAttack)(Actor *this);\n  void (__fastcall *setDamageNearbyMobs)(Actor *this, bool);\n  bool (__fastcall *hasCritBox)(Actor *this);\n  bool (__fastcall *isCritHit)(Actor *this);\n  void (__fastcall *renderDebugServerState)(Actor *this, const Options *);\n  void (__fastcall *reloadLootTable)(Actor *this, const EquipmentTableDefinition *);\n  void (__fastcall *reloadLootTable)(Actor *this);\n  float (__fastcall *getDeletionDelayTimeSeconds)(Actor *this);\n  void (__fastcall *kill)(Actor *this);\n  void (__fastcall *die)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *shouldTick)(Actor *this);\n  std::shared_ptr<IActorMovementProxy> *(__fastcall *createMovementProxy)(Actor *this, std::shared_ptr<IActorMovementProxy> *result);\n  void (__fastcall *updateEntitySpecificMolangVariables)(Actor *this, RenderParams *);\n  bool (__fastcall *shouldTryMakeStepSound)(Actor *this);\n  float (__fastcall *getNextStep)(Actor *this, const float);\n  bool (__fastcall *canMakeStepSound)(Actor *this);\n  void (__fastcall *outOfWorld)(Actor *this);\n  bool (__fastcall *_hurt)(Actor *this, const ActorDamageSource *, int, bool, bool);\n  void (__fastcall *markHurt)(Actor *this);\n  void (__fastcall *readAdditionalSaveData)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *addAdditionalSaveData)(Actor *this, CompoundTag *);\n  void (__fastcall *_playStepSound)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *_playFlySound)(Actor *this, const BlockPos *, const Block *);\n  bool (__fastcall *_makeFlySound)(Actor *this);\n  void (__fastcall *checkInsideBlocks)(Actor *this, float);\n  void (__fastcall *pushOutOfBlocks)(Actor *this, const Vec3 *);\n  bool (__fastcall *updateWaterState)(Actor *this);\n  void (__fastcall *doWaterSplashEffect)(Actor *this);\n  void (__fastcall *spawnTrailBubbles)(Actor *this);\n  void (__fastcall *updateInsideBlock)(Actor *this);\n  LootTable *(__fastcall *getLootTable)(Actor *this);\n  LootTable *(__fastcall *getDefaultLootTable)(Actor *this);\n  void (__fastcall *_removeRider)(Actor *this, const ActorUniqueID *, bool, bool, bool);\n  void (__fastcall *_onSizeUpdated)(Actor *this);\n  void (__fastcall *_doAutoAttackOnTouch)(Actor *this, Actor *);\n  float (__fastcall *getThrowPower)(Throwable *this);\n  bool (__fastcall *stopUponGroundCollision)(Throwable *this);\n  float (__fastcall *getThrowUpAngleOffset)(Throwable *this);\n  float (__fastcall *getGravity)(Throwable *this);\n  ParticleType (__fastcall *getParticleType)(Throwable *this);\n  void (__fastcall *onHit)(Throwable *this, const HitResult *);\n};\n\n")])])]),a("h3",{attrs:{id:"thrownicebomb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrownicebomb"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThrownIceBomb")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ThrownIceBomb : Throwable\n{\n};\n\n")])])]),a("h3",{attrs:{id:"thrownicebomb-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrownicebomb-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThrownIceBomb_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ThrownIceBomb_vtbl\n{\n  bool (__fastcall *hasComponent)(Actor *this, const HashedString *);\n  void (__fastcall *reloadHardcoded)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadHardcodedClient)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *initializeComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *_serverInitItemStackIds)(Actor *this);\n  void (__fastcall *_doInitialMove)(Actor *this);\n  bool (__fastcall *checkAllSensitiveWords)(Actor *this);\n  bool (__fastcall *checkNameTag)(Actor *this);\n  void (__fastcall *~Actor)(Actor *this);\n  void (__fastcall *reset)(Actor *this);\n  int (__fastcall *getOnDeathExperience)(Actor *this);\n  ActorType (__fastcall *getOwnerEntityType)(Actor *this);\n  void (__fastcall *remove)(Actor *this);\n  void (__fastcall *setPos)(Actor *this, const Vec3 *);\n  const PredictedMovementValues *(__fastcall *getPredictedMovementValues)(Actor *this);\n  const Vec3 *(__fastcall *getPos)(Actor *this);\n  const Vec3 *(__fastcall *getPosOld)(Actor *this);\n  const Vec3 *(__fastcall *getPosExtrapolated)(Actor *this, const Vec3 *result, float);\n  Vec3 *(__fastcall *getAttachPos)(Actor *this, Vec3 *result, ActorLocation, float);\n  Vec3 *(__fastcall *getFiringPos)(Actor *this, Vec3 *result);\n  void (__fastcall *setRot)(Actor *this, const Vec2 *);\n  void (__fastcall *move)(Actor *this, IActorMovementProxy *, const Vec3 *);\n  void (__fastcall *move)(Actor *this, const Vec3 *);\n  Vec3 *(__fastcall *getInterpolatedRidingPosition)(Actor *this, Vec3 *result, float);\n  float (__fastcall *getInterpolatedBodyRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedHeadRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedBodyYaw)(Actor *this, float);\n  float (__fastcall *getYawSpeedInDegreesPerSecond)(Actor *this);\n  float (__fastcall *getInterpolatedWalkAnimSpeed)(Actor *this, float);\n  Vec3 *(__fastcall *getInterpolatedRidingOffset)(Actor *this, Vec3 *result, float);\n  void (__fastcall *checkBlockCollisions)(Actor *this);\n  void (__fastcall *checkBlockCollisions)(Actor *this, const AABB *, std::function<void __cdecl(BlockSource &,Block const &,BlockPos const &,Actor &)>);\n  bool (__fastcall *isFireImmune)(Actor *this);\n  bool (__fastcall *breaksFallingBlocks)(Actor *this);\n  void (__fastcall *blockedByShield)(Actor *this, const ActorDamageSource *, Actor *);\n  void (__fastcall *teleportTo)(Actor *this, const Vec3 *, bool, int, int, const ActorUniqueID *);\n  bool (__fastcall *tryTeleportTo)(Actor *this, const Vec3 *, bool, bool, int, int);\n  void (__fastcall *chorusFruitTeleport)(Actor *this, Vec3 *);\n  void (__fastcall *lerpTo)(Actor *this, const Vec3 *, const Vec2 *, int);\n  void (__fastcall *lerpMotion)(Actor *this, const Vec3 *);\n  std::unique_ptr<AddActorBasePacket> *(__fastcall *getAddPacket)(Actor *this, std::unique_ptr<AddActorBasePacket> *result);\n  void (__fastcall *normalTick)(Actor *this);\n  void (__fastcall *baseTick)(Actor *this);\n  void (__fastcall *rideTick)(Actor *this);\n  void (__fastcall *positionRider)(Actor *this, Actor *, float);\n  float (__fastcall *getRidingHeight)(Actor *this);\n  bool (__fastcall *startRiding)(Actor *this, Actor *);\n  void (__fastcall *addRider)(Actor *this, Actor *);\n  void (__fastcall *flagRiderToRemove)(Actor *this, Actor *);\n  std::string *(__fastcall *getExitTip)(Actor *this, std::string *result, const std::string *, InputMode);\n  bool (__fastcall *intersects)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *, float);\n  bool (__fastcall *isInWall)(Actor *this);\n  bool (__fastcall *isInvisible)(Actor *this);\n  bool (__fastcall *canShowNameTag)(Actor *this);\n  bool (__fastcall *canExistInPeaceful)(Actor *this);\n  void (__fastcall *setNameTagVisible)(Actor *this, bool);\n  const std::string *(__fastcall *getNameTag)(Actor *this);\n  unsigned __int64 (__fastcall *getNameTagAsHash)(Actor *this);\n  std::string *(__fastcall *getFormattedNameTag)(Actor *this, std::string *result);\n  void (__fastcall *filterFormattedNameTag)(Actor *this, const UIProfanityContext *);\n  void (__fastcall *setNameTag)(Actor *this, const std::string *);\n  bool (__fastcall *getAlwaysShowNameTag)(Actor *this);\n  void (__fastcall *setScoreTag)(Actor *this, const std::string *);\n  const std::string *(__fastcall *getScoreTag)(Actor *this);\n  bool (__fastcall *isInWater)(Actor *this);\n  bool (__fastcall *hasEnteredWater)(Actor *this);\n  bool (__fastcall *isImmersedInWater)(Actor *this);\n  bool (__fastcall *isInWaterOrRain)(Actor *this);\n  bool (__fastcall *isInLava)(Actor *this);\n  bool (__fastcall *isUnderLiquid)(Actor *this, MaterialType);\n  bool (__fastcall *isOverWater)(Actor *this);\n  void (__fastcall *makeStuckInBlock)(Actor *this, const Vec3 *);\n  float (__fastcall *getCameraOffset)(Actor *this);\n  float (__fastcall *getShadowHeightOffs)(Actor *this);\n  float (__fastcall *getShadowRadius)(Actor *this);\n  Vec3 *(__fastcall *getHeadLookVector)(Actor *this, Vec3 *result, float);\n  bool (__fastcall *canSeeInvisible)(Actor *this);\n  bool (__fastcall *canSee)(Actor *this, const Vec3 *);\n  bool (__fastcall *canSee)(Actor *this, const Actor *);\n  bool (__fastcall *isSkyLit)(Actor *this, float);\n  float (__fastcall *getBrightness)(Actor *this, float);\n  bool (__fastcall *interactPreventDefault)(Actor *this);\n  void (__fastcall *playerTouch)(Actor *this, Player *);\n  void (__fastcall *onAboveBubbleColumn)(Actor *this, const bool);\n  void (__fastcall *onInsideBubbleColumn)(Actor *this, const bool);\n  bool (__fastcall *isImmobile)(Actor *this);\n  bool (__fastcall *isSilent)(Actor *this);\n  bool (__fastcall *isPickable)(Actor *this);\n  bool (__fastcall *isFishable)(Actor *this);\n  bool (__fastcall *isSleeping)(Actor *this);\n  bool (__fastcall *isShootable)(Actor *this);\n  void (__fastcall *setSneaking)(Actor *this, bool);\n  bool (__fastcall *isBlocking)(Actor *this);\n  bool (__fastcall *isDamageBlocked)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *isAlive)(Actor *this);\n  bool (__fastcall *isOnFire)(Actor *this);\n  bool (__fastcall *isOnHotBlock)(Actor *this);\n  bool (__fastcall *isCreativeModeAllowed)(Actor *this);\n  bool (__fastcall *isSurfaceMob)(Actor *this);\n  bool (__fastcall *isTargetable)(Actor *this);\n  bool (__fastcall *isLocalPlayer)(Actor *this);\n  bool (__fastcall *isPlayer)(Actor *this);\n  bool (__fastcall *canAttack)(Actor *this, Actor *, bool);\n  void (__fastcall *setTarget)(Actor *this, Actor *);\n  Actor *(__fastcall *findAttackTarget)(Actor *this);\n  bool (__fastcall *isValidTarget)(Actor *this, Actor *);\n  bool (__fastcall *attack)(Actor *this, Actor *);\n  void (__fastcall *performRangedAttack)(Actor *this, Actor *, float);\n  void (__fastcall *adjustDamageAmount)(Actor *this, int *);\n  int (__fastcall *getEquipmentCount)(Actor *this);\n  void (__fastcall *setOwner)(Actor *this, const ActorUniqueID);\n  void (__fastcall *setSitting)(Actor *this, bool);\n  void (__fastcall *onTame)(Actor *this);\n  void (__fastcall *onFailedTame)(Actor *this);\n  int (__fastcall *getInventorySize)(Actor *this);\n  int (__fastcall *getEquipSlots)(Actor *this);\n  int (__fastcall *getChestSlots)(Actor *this);\n  void (__fastcall *setStanding)(Actor *this, bool);\n  bool (__fastcall *canPowerJump)(Actor *this);\n  void (__fastcall *setCanPowerJump)(Actor *this, bool);\n  bool (__fastcall *isJumping)(Actor *this);\n  bool (__fastcall *isEnchanted)(Actor *this);\n  void (__fastcall *rideJumped)(Actor *this);\n  void (__fastcall *rideLanded)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *shouldRender)(Actor *this);\n  bool (__fastcall *isInvulnerableTo)(Actor *this, const ActorDamageSource *);\n  ActorDamageCause (__fastcall *getBlockDamageCause)(Actor *this, const Block *);\n  void (__fastcall *actuallyHurt)(Actor *this, int, const ActorDamageSource *, bool);\n  void (__fastcall *animateHurt)(Actor *this);\n  bool (__fastcall *doFireHurt)(Actor *this, int);\n  void (__fastcall *onLightningHit)(Actor *this);\n  void (__fastcall *onBounceStarted)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *feed)(Actor *this, int);\n  void (__fastcall *handleEntityEvent)(Actor *this, ActorEvent, int);\n  float (__fastcall *getPickRadius)(Actor *this);\n  const HashedString *(__fastcall *getActorRendererId)(Actor *this);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const ItemStack *, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int);\n  void (__fastcall *despawn)(Actor *this);\n  void (__fastcall *killed)(Actor *this, Actor *);\n  void (__fastcall *awardKillScore)(Actor *this, Actor *, int);\n  void (__fastcall *setArmor)(Actor *this, ArmorSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getArmor)(Actor *this, ArmorSlot);\n  ArmorMaterialType (__fastcall *getArmorMaterialTypeInSlot)(Actor *this, ArmorSlot);\n  ArmorTextureType (__fastcall *getArmorMaterialTextureTypeInSlot)(Actor *this, ArmorSlot);\n  float (__fastcall *getArmorColorInSlot)(Actor *this, ArmorSlot, int);\n  const ItemStack *(__fastcall *getEquippedSlot)(Actor *this, EquipmentSlot);\n  void (__fastcall *setEquippedSlot)(Actor *this, EquipmentSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getCarriedItem)(Actor *this);\n  void (__fastcall *setCarriedItem)(Actor *this, const ItemStack *);\n  void (__fastcall *setOffhandSlot)(Actor *this, const ItemStack *);\n  const ItemStack *(__fastcall *getEquippedTotem)(Actor *this);\n  bool (__fastcall *consumeTotem)(Actor *this);\n  bool (__fastcall *save)(Actor *this, CompoundTag *);\n  void (__fastcall *saveWithoutId)(Actor *this, CompoundTag *);\n  bool (__fastcall *load)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *loadLinks)(Actor *this, const CompoundTag *, std::vector<ActorLink> *, DataLoadHelper *);\n  ActorType (__fastcall *getEntityTypeId)(Actor *this);\n  const HashedString *(__fastcall *queryEntityRenderer)(Actor *this);\n  ActorUniqueID *(__fastcall *getSourceUniqueID)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *setOnFire)(Actor *this, int);\n  AABB *(__fastcall *getHandleWaterAABB)(Actor *this, AABB *result);\n  void (__fastcall *handleInsidePortal)(Actor *this, const BlockPos *);\n  int (__fastcall *getPortalCooldown)(Actor *this);\n  int (__fastcall *getPortalWaitTime)(Actor *this);\n  AutomaticID<Dimension,int> *(__fastcall *getDimensionId)(Actor *this, AutomaticID<Dimension,int> *result);\n  bool (__fastcall *canChangeDimensions)(Actor *this);\n  void (__fastcall *changeDimension)(Actor *this, const ChangeDimensionPacket *);\n  void (__fastcall *changeDimension)(Actor *this, AutomaticID<Dimension,int>, bool);\n  ActorUniqueID *(__fastcall *getControllingPlayer)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *checkFallDamage)(Actor *this, float, bool);\n  void (__fastcall *causeFallDamage)(Actor *this, float);\n  void (__fastcall *handleFallDistanceOnServer)(Actor *this, float, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, int, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, const Block *, bool);\n  void (__fastcall *onSynchedDataUpdate)(Actor *this, int);\n  bool (__fastcall *canAddRider)(Actor *this, Actor *);\n  bool (__fastcall *canPickupItem)(Actor *this, const ItemStack *);\n  bool (__fastcall *canBePulledIntoVehicle)(Actor *this);\n  bool (__fastcall *inCaravan)(Actor *this);\n  bool (__fastcall *isLeashableType)(Actor *this);\n  void (__fastcall *tickLeash)(Actor *this);\n  void (__fastcall *sendMotionPacketIfNeeded)(Actor *this);\n  bool (__fastcall *canSynchronizeNewEntity)(Actor *this);\n  bool (__fastcall *stopRiding)(Actor *this, bool, bool, bool, bool);\n  void (__fastcall *startSwimming)(Actor *this);\n  void (__fastcall *stopSwimming)(Actor *this);\n  void (__fastcall *buildDebugInfo)(Actor *this, std::string *);\n  CommandPermissionLevel (__fastcall *getCommandPermissionLevel)(Actor *this);\n  AttributeInstance *(__fastcall *getMutableAttribute)(Actor *this, const Attribute *);\n  const AttributeInstance *(__fastcall *getAttribute)(Actor *this, const Attribute *);\n  int (__fastcall *getDeathTime)(Actor *this);\n  void (__fastcall *heal)(Actor *this, int);\n  bool (__fastcall *isInvertedHealAndHarm)(Actor *this);\n  bool (__fastcall *canBeAffected)(Actor *this, const MobEffectInstance *);\n  bool (__fastcall *canBeAffected)(Actor *this, int);\n  bool (__fastcall *canBeAffectedByArrow)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectAdded)(Actor *this, MobEffectInstance *);\n  void (__fastcall *onEffectUpdated)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectRemoved)(Actor *this, MobEffectInstance *);\n  AnimationComponent *(__fastcall *getAnimationComponent)(Actor *this);\n  void (__fastcall *openContainerComponent)(Actor *this, Player *);\n  void (__fastcall *swing)(Actor *this);\n  void (__fastcall *useItem)(Actor *this, ItemStackBase *, ItemUseMethod, bool);\n  bool (__fastcall *hasOutputSignal)(Actor *this, unsigned __int8);\n  int (__fastcall *getOutputSignal)(Actor *this);\n  void (__fastcall *getDebugText)(Actor *this, std::vector<std::string> *);\n  float (__fastcall *getMapDecorationRotation)(Actor *this);\n  float (__fastcall *getRiderYRotation)(Actor *this, const Actor *);\n  float (__fastcall *getYHeadRot)(Actor *this);\n  bool (__fastcall *isWorldBuilder)(Actor *this);\n  bool (__fastcall *isCreative)(Actor *this);\n  bool (__fastcall *isAdventure)(Actor *this);\n  bool (__fastcall *add)(Actor *this, ItemStack *);\n  bool (__fastcall *drop)(Actor *this, const ItemStack *, bool);\n  bool (__fastcall *getInteraction)(Actor *this, Player *, ActorInteraction *, const Vec3 *);\n  bool (__fastcall *canDestroyBlock)(Actor *this, const Block *);\n  void (__fastcall *setAuxValue)(Actor *this, int);\n  void (__fastcall *setSize)(Actor *this, float, float);\n  int (__fastcall *getLifeSpan)(Actor *this);\n  void (__fastcall *onOrphan)(Actor *this);\n  void (__fastcall *wobble)(Actor *this);\n  bool (__fastcall *wasHurt)(Actor *this);\n  void (__fastcall *startSpinAttack)(Actor *this);\n  void (__fastcall *stopSpinAttack)(Actor *this);\n  void (__fastcall *setDamageNearbyMobs)(Actor *this, bool);\n  bool (__fastcall *hasCritBox)(Actor *this);\n  bool (__fastcall *isCritHit)(Actor *this);\n  void (__fastcall *renderDebugServerState)(Actor *this, const Options *);\n  void (__fastcall *reloadLootTable)(Actor *this, const EquipmentTableDefinition *);\n  void (__fastcall *reloadLootTable)(Actor *this);\n  float (__fastcall *getDeletionDelayTimeSeconds)(Actor *this);\n  void (__fastcall *kill)(Actor *this);\n  void (__fastcall *die)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *shouldTick)(Actor *this);\n  std::shared_ptr<IActorMovementProxy> *(__fastcall *createMovementProxy)(Actor *this, std::shared_ptr<IActorMovementProxy> *result);\n  void (__fastcall *updateEntitySpecificMolangVariables)(Actor *this, RenderParams *);\n  bool (__fastcall *shouldTryMakeStepSound)(Actor *this);\n  float (__fastcall *getNextStep)(Actor *this, const float);\n  bool (__fastcall *canMakeStepSound)(Actor *this);\n  void (__fastcall *outOfWorld)(Actor *this);\n  bool (__fastcall *_hurt)(Actor *this, const ActorDamageSource *, int, bool, bool);\n  void (__fastcall *markHurt)(Actor *this);\n  void (__fastcall *readAdditionalSaveData)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *addAdditionalSaveData)(Actor *this, CompoundTag *);\n  void (__fastcall *_playStepSound)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *_playFlySound)(Actor *this, const BlockPos *, const Block *);\n  bool (__fastcall *_makeFlySound)(Actor *this);\n  void (__fastcall *checkInsideBlocks)(Actor *this, float);\n  void (__fastcall *pushOutOfBlocks)(Actor *this, const Vec3 *);\n  bool (__fastcall *updateWaterState)(Actor *this);\n  void (__fastcall *doWaterSplashEffect)(Actor *this);\n  void (__fastcall *spawnTrailBubbles)(Actor *this);\n  void (__fastcall *updateInsideBlock)(Actor *this);\n  LootTable *(__fastcall *getLootTable)(Actor *this);\n  LootTable *(__fastcall *getDefaultLootTable)(Actor *this);\n  void (__fastcall *_removeRider)(Actor *this, const ActorUniqueID *, bool, bool, bool);\n  void (__fastcall *_onSizeUpdated)(Actor *this);\n  void (__fastcall *_doAutoAttackOnTouch)(Actor *this, Actor *);\n  float (__fastcall *getThrowPower)(Throwable *this);\n  bool (__fastcall *stopUponGroundCollision)(Throwable *this);\n  float (__fastcall *getThrowUpAngleOffset)(Throwable *this);\n  float (__fastcall *getGravity)(Throwable *this);\n  ParticleType (__fastcall *getParticleType)(Throwable *this);\n  void (__fastcall *onHit)(Throwable *this, const HitResult *);\n};\n\n")])])]),a("h3",{attrs:{id:"tradeingredientcontainercontroller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradeingredientcontainercontroller"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeIngredientContainerController")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TradeIngredientContainerController : ContainerController\n{\n  ItemStack mItem;\n};\n\n")])])]),a("h3",{attrs:{id:"tradeingredientcontainercontroller-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradeingredientcontainercontroller-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeIngredientContainerController_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TradeIngredientContainerController_vtbl\n{\n  void (__fastcall *~ContainerController)(ContainerController *this);\n  bool (__fastcall *canRemove)(ContainerController *this, int, int);\n  bool (__fastcall *isItemAllowed)(ContainerController *this, const ItemStackBase *);\n  bool (__fastcall *isItemFiltered)(ContainerController *this, const Recipes *, const ItemStackBase *);\n  int (__fastcall *getBackgroundStyle)(ContainerController *this, int, bool);\n  ItemSetType (__fastcall *_canSet)(ContainerController *this, int, const ItemStackBase *, ItemTransferAmount);\n  int (__fastcall *_getAvailableSetCount)(ContainerController *this, int, const ItemStackBase *);\n  bool (__fastcall *_canRemove)(ContainerController *this, int, int);\n  void (__fastcall *_onItemChanged)(ContainerController *this, int);\n};\n\n")])])]),a("h3",{attrs:{id:"tradecontainermanagercontroller-setupcallbacks-l2-lambda-6ead60eba553363bbbfc19e792c62b61"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradecontainermanagercontroller-setupcallbacks-l2-lambda-6ead60eba553363bbbfc19e792c62b61"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeContainerManagerController::_setupCallbacks::__l2::<lambda_6ead60eba553363bbbfc19e792c62b61>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TradeContainerManagerController::_setupCallbacks::__l2::<lambda_6ead60eba553363bbbfc19e792c62b61>\n{\n  TradeContainerManagerController *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"tradecontainermanagercontroller-setupcallbacks-l2-lambda-a0152511d2602a805c722ce7437a7a50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradecontainermanagercontroller-setupcallbacks-l2-lambda-a0152511d2602a805c722ce7437a7a50"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeContainerManagerController::_setupCallbacks::__l2::<lambda_a0152511d2602a805c722ce7437a7a50>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TradeContainerManagerController::_setupCallbacks::__l2::<lambda_a0152511d2602a805c722ce7437a7a50>\n{\n  TradeContainerManagerController *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"trade2containermanagercontroller-setupcallbacks-l2-lambda-0ba538fec63dfff7a8c31c230ccd8490"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trade2containermanagercontroller-setupcallbacks-l2-lambda-0ba538fec63dfff7a8c31c230ccd8490"}},[t._v("#")]),t._v(" "),a("code",[t._v("Trade2ContainerManagerController::_setupCallbacks::__l2::<lambda_0ba538fec63dfff7a8c31c230ccd8490>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj Trade2ContainerManagerController::_setupCallbacks::__l2::<lambda_0ba538fec63dfff7a8c31c230ccd8490>\n{\n  Trade2ContainerManagerController *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"trade2containermanagercontroller-setupcallbacks-l2-lambda-500a8ea3460df322e01d98c97ed7c9b2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trade2containermanagercontroller-setupcallbacks-l2-lambda-500a8ea3460df322e01d98c97ed7c9b2"}},[t._v("#")]),t._v(" "),a("code",[t._v("Trade2ContainerManagerController::_setupCallbacks::__l2::<lambda_500a8ea3460df322e01d98c97ed7c9b2>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj Trade2ContainerManagerController::_setupCallbacks::__l2::<lambda_500a8ea3460df322e01d98c97ed7c9b2>\n{\n  Trade2ContainerManagerController *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"torchblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#torchblock"}},[t._v("#")]),t._v(" "),a("code",[t._v("TorchBlock")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TorchBlock : BlockLegacy\n{\n};\n\n")])])]),a("h3",{attrs:{id:"torchblock-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#torchblock-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TorchBlock_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TorchBlock_vtbl\n{\n  void (__fastcall *~BlockLegacy)(BlockLegacy *this);\n  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  std::shared_ptr<BlockActor> *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr<BlockActor> *result, const BlockPos *, const Block *);\n  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);\n  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);\n  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);\n  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);\n  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *);\n  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);\n  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *, Actor *);\n  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);\n  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function<Block const & __cdecl(BlockPos const &)> *, const BlockPos *);\n  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);\n  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);\n  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);\n  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);\n  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);\n  bool (__fastcall *isStemBlock)(BlockLegacy *this);\n  bool (__fastcall *isContainerBlock)(BlockLegacy *this);\n  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);\n  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);\n  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);\n  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isWallBlock)(BlockLegacy *this);\n  bool (__fastcall *isStairBlock)(BlockLegacy *this);\n  bool (__fastcall *isSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoorBlock)(BlockLegacy *this);\n  bool (__fastcall *isRailBlock)(BlockLegacy *this);\n  bool (__fastcall *isButtonBlock)(BlockLegacy *this);\n  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);\n  bool (__fastcall *isSignalSource)(BlockLegacy *this);\n  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);\n  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);\n  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector<std::string> *);\n  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);\n  bool (__fastcall *canContainLiquid)(BlockLegacy *this);\n  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);\n  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);\n  float (__fastcall *getThickness)(BlockLegacy *this);\n  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);\n  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);\n  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);\n  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);\n  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);\n  bool (__fastcall *isBounceBlock)(BlockLegacy *this);\n  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);\n  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);\n  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);\n  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);\n  bool (__fastcall *mayPick)(BlockLegacy *this);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);\n  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);\n  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);\n  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);\n  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);\n  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);\n  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);\n  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);\n  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);\n  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);\n  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);\n  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);\n  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);\n  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);\n  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);\n  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);\n  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);\n  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);\n  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);\n  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);\n  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);\n  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);\n  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getIconYOffset)(BlockLegacy *this);\n  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);\n  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);\n  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getColor)(BlockLegacy *this, const Block *);\n  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);\n  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);\n  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);\n  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);\n  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);\n  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canSpawnOn)(BlockLegacy *this);\n  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);\n  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);\n  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);\n  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);\n  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  BlockLegacy *(__fastcall *init)(BlockLegacy *this);\n  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);\n  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);\n  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);\n  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);\n  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);\n  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);\n  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);\n  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);\n  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);\n  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);\n  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);\n  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);\n  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);\n  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);\n  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);\n  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);\n  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);\n  bool (__fastcall *isCropBlock)(BlockLegacy *this);\n  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n};\n\n")])])]),a("h3",{attrs:{id:"toolrecipes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toolrecipes"}},[t._v("#")]),t._v(" "),a("code",[t._v("ToolRecipes")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ToolRecipes\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tridentimpalerenchant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tridentimpalerenchant"}},[t._v("#")]),t._v(" "),a("code",[t._v("TridentImpalerEnchant")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TridentImpalerEnchant : Enchant\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tridentimpalerenchant-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tridentimpalerenchant-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TridentImpalerEnchant_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TridentImpalerEnchant_vtbl\n{\n  void (__fastcall *~Enchant)(Enchant *this);\n  bool (__fastcall *isCompatibleWith)(Enchant *this, Enchant::Type);\n  int (__fastcall *getMinCost)(Enchant *this, int);\n  int (__fastcall *getMaxCost)(Enchant *this, int);\n  int (__fastcall *getMinLevel)(Enchant *this);\n  int (__fastcall *getMaxLevel)(Enchant *this);\n  int (__fastcall *getDamageProtection)(Enchant *this, int, const ActorDamageSource *);\n  float (__fastcall *getDamageBonus)(Enchant *this, int, const Actor *);\n  void (__fastcall *doPostAttack)(Enchant *this, Actor *, Actor *, int);\n  void (__fastcall *doPostHurt)(Enchant *this, ItemInstance *, Actor *, Actor *, int);\n  bool (__fastcall *isMeleeDamageEnchant)(Enchant *this);\n  bool (__fastcall *isProtectionEnchant)(Enchant *this);\n  bool (__fastcall *isTreasureOnly)(Enchant *this);\n  bool (__fastcall *isDiscoverable)(Enchant *this);\n};\n\n")])])]),a("h3",{attrs:{id:"tridentriptideenchant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tridentriptideenchant"}},[t._v("#")]),t._v(" "),a("code",[t._v("TridentRiptideEnchant")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TridentRiptideEnchant : Enchant\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tridentriptideenchant-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tridentriptideenchant-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TridentRiptideEnchant_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TridentRiptideEnchant_vtbl\n{\n  void (__fastcall *~Enchant)(Enchant *this);\n  bool (__fastcall *isCompatibleWith)(Enchant *this, Enchant::Type);\n  int (__fastcall *getMinCost)(Enchant *this, int);\n  int (__fastcall *getMaxCost)(Enchant *this, int);\n  int (__fastcall *getMinLevel)(Enchant *this);\n  int (__fastcall *getMaxLevel)(Enchant *this);\n  int (__fastcall *getDamageProtection)(Enchant *this, int, const ActorDamageSource *);\n  float (__fastcall *getDamageBonus)(Enchant *this, int, const Actor *);\n  void (__fastcall *doPostAttack)(Enchant *this, Actor *, Actor *, int);\n  void (__fastcall *doPostHurt)(Enchant *this, ItemInstance *, Actor *, Actor *, int);\n  bool (__fastcall *isMeleeDamageEnchant)(Enchant *this);\n  bool (__fastcall *isProtectionEnchant)(Enchant *this);\n  bool (__fastcall *isTreasureOnly)(Enchant *this);\n  bool (__fastcall *isDiscoverable)(Enchant *this);\n};\n\n")])])]),a("h3",{attrs:{id:"tridentloyaltyenchant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tridentloyaltyenchant"}},[t._v("#")]),t._v(" "),a("code",[t._v("TridentLoyaltyEnchant")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TridentLoyaltyEnchant : Enchant\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tridentloyaltyenchant-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tridentloyaltyenchant-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TridentLoyaltyEnchant_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TridentLoyaltyEnchant_vtbl\n{\n  void (__fastcall *~Enchant)(Enchant *this);\n  bool (__fastcall *isCompatibleWith)(Enchant *this, Enchant::Type);\n  int (__fastcall *getMinCost)(Enchant *this, int);\n  int (__fastcall *getMaxCost)(Enchant *this, int);\n  int (__fastcall *getMinLevel)(Enchant *this);\n  int (__fastcall *getMaxLevel)(Enchant *this);\n  int (__fastcall *getDamageProtection)(Enchant *this, int, const ActorDamageSource *);\n  float (__fastcall *getDamageBonus)(Enchant *this, int, const Actor *);\n  void (__fastcall *doPostAttack)(Enchant *this, Actor *, Actor *, int);\n  void (__fastcall *doPostHurt)(Enchant *this, ItemInstance *, Actor *, Actor *, int);\n  bool (__fastcall *isMeleeDamageEnchant)(Enchant *this);\n  bool (__fastcall *isProtectionEnchant)(Enchant *this);\n  bool (__fastcall *isTreasureOnly)(Enchant *this);\n  bool (__fastcall *isDiscoverable)(Enchant *this);\n};\n\n")])])]),a("h3",{attrs:{id:"tridentchannelingenchant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tridentchannelingenchant"}},[t._v("#")]),t._v(" "),a("code",[t._v("TridentChannelingEnchant")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TridentChannelingEnchant : Enchant\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tridentchannelingenchant-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tridentchannelingenchant-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TridentChannelingEnchant_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TridentChannelingEnchant_vtbl\n{\n  void (__fastcall *~Enchant)(Enchant *this);\n  bool (__fastcall *isCompatibleWith)(Enchant *this, Enchant::Type);\n  int (__fastcall *getMinCost)(Enchant *this, int);\n  int (__fastcall *getMaxCost)(Enchant *this, int);\n  int (__fastcall *getMinLevel)(Enchant *this);\n  int (__fastcall *getMaxLevel)(Enchant *this);\n  int (__fastcall *getDamageProtection)(Enchant *this, int, const ActorDamageSource *);\n  float (__fastcall *getDamageBonus)(Enchant *this, int, const Actor *);\n  void (__fastcall *doPostAttack)(Enchant *this, Actor *, Actor *, int);\n  void (__fastcall *doPostHurt)(Enchant *this, ItemInstance *, Actor *, Actor *, int);\n  bool (__fastcall *isMeleeDamageEnchant)(Enchant *this);\n  bool (__fastcall *isProtectionEnchant)(Enchant *this);\n  bool (__fastcall *isTreasureOnly)(Enchant *this);\n  bool (__fastcall *isDiscoverable)(Enchant *this);\n};\n\n")])])]),a("h3",{attrs:{id:"tntblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tntblock"}},[t._v("#")]),t._v(" "),a("code",[t._v("TntBlock")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TntBlock : BlockLegacy\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tntblock-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tntblock-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TntBlock_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TntBlock_vtbl\n{\n  void (__fastcall *~BlockLegacy)(BlockLegacy *this);\n  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  std::shared_ptr<BlockActor> *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr<BlockActor> *result, const BlockPos *, const Block *);\n  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);\n  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);\n  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);\n  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);\n  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *);\n  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);\n  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *, Actor *);\n  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);\n  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function<Block const & __cdecl(BlockPos const &)> *, const BlockPos *);\n  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);\n  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);\n  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);\n  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);\n  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);\n  bool (__fastcall *isStemBlock)(BlockLegacy *this);\n  bool (__fastcall *isContainerBlock)(BlockLegacy *this);\n  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);\n  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);\n  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);\n  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isWallBlock)(BlockLegacy *this);\n  bool (__fastcall *isStairBlock)(BlockLegacy *this);\n  bool (__fastcall *isSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoorBlock)(BlockLegacy *this);\n  bool (__fastcall *isRailBlock)(BlockLegacy *this);\n  bool (__fastcall *isButtonBlock)(BlockLegacy *this);\n  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);\n  bool (__fastcall *isSignalSource)(BlockLegacy *this);\n  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);\n  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);\n  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector<std::string> *);\n  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);\n  bool (__fastcall *canContainLiquid)(BlockLegacy *this);\n  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);\n  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);\n  float (__fastcall *getThickness)(BlockLegacy *this);\n  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);\n  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);\n  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);\n  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);\n  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);\n  bool (__fastcall *isBounceBlock)(BlockLegacy *this);\n  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);\n  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);\n  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);\n  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);\n  bool (__fastcall *mayPick)(BlockLegacy *this);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);\n  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);\n  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);\n  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);\n  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);\n  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);\n  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);\n  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);\n  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);\n  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);\n  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);\n  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);\n  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);\n  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);\n  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);\n  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);\n  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);\n  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);\n  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);\n  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);\n  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);\n  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);\n  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getIconYOffset)(BlockLegacy *this);\n  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);\n  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);\n  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getColor)(BlockLegacy *this, const Block *);\n  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);\n  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);\n  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);\n  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);\n  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);\n  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canSpawnOn)(BlockLegacy *this);\n  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);\n  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);\n  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);\n  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);\n  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  BlockLegacy *(__fastcall *init)(BlockLegacy *this);\n  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);\n  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);\n  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);\n  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);\n  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);\n  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);\n  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);\n  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);\n  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);\n  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);\n  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);\n  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);\n  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);\n  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);\n  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);\n  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);\n  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);\n  bool (__fastcall *isCropBlock)(BlockLegacy *this);\n  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n};\n\n")])])]),a("h3",{attrs:{id:"topsnowblockitem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#topsnowblockitem"}},[t._v("#")]),t._v(" "),a("code",[t._v("TopSnowBlockItem")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TopSnowBlockItem : BlockItem\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tagscomponent-idtype-biometagsetidtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tagscomponent-idtype-biometagsetidtype"}},[t._v("#")]),t._v(" "),a("code",[t._v("TagsComponent<IDType<BiomeTagSetIDType> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TagsComponent<IDType<BiomeTagSetIDType> > : IEntityComponent\n{\n  IDType<BiomeTagSetIDType> mTagSetID;\n};\n\n")])])]),a("h3",{attrs:{id:"transportercomponent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transportercomponent"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransporterComponent")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TransporterComponent : BaseCircuitComponent\n{\n  int mNextStrength;\n};\n\n")])])]),a("h3",{attrs:{id:"transportercomponent-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transportercomponent-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransporterComponent_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TransporterComponent_vtbl\n{\n  void (__fastcall *~BaseCircuitComponent)(BaseCircuitComponent *this);\n  int (__fastcall *getStrength)(BaseCircuitComponent *this);\n  int (__fastcall *getDirection)(BaseCircuitComponent *this);\n  void (__fastcall *setStrength)(BaseCircuitComponent *this, int);\n  void (__fastcall *setDirection)(BaseCircuitComponent *this, unsigned __int8);\n  bool (__fastcall *consumePowerAnyDirection)(BaseCircuitComponent *this);\n  bool (__fastcall *canConsumerPower)(BaseCircuitComponent *this);\n  bool (__fastcall *canStopPower)(BaseCircuitComponent *this);\n  void (__fastcall *setStopPower)(BaseCircuitComponent *this, bool);\n  unsigned __int64 (__fastcall *getBaseType)(BaseCircuitComponent *this);\n  unsigned __int64 (__fastcall *getInstanceType)(BaseCircuitComponent *this);\n  bool (__fastcall *removeSource)(BaseCircuitComponent *this, const BlockPos *, const BaseCircuitComponent *);\n  bool (__fastcall *addSource)(BaseCircuitComponent *this, CircuitSceneGraph *, const CircuitTrackingInfo *, int *, bool *);\n  bool (__fastcall *allowConnection)(BaseCircuitComponent *this, CircuitSceneGraph *, const CircuitTrackingInfo *, bool *);\n  void (__fastcall *checkLock)(BaseCircuitComponent *this, CircuitSystem *, const BlockPos *);\n  bool (__fastcall *evaluate)(BaseCircuitComponent *this, CircuitSystem *, const BlockPos *);\n  void (__fastcall *cacheValues)(BaseCircuitComponent *this, CircuitSystem *, const BlockPos *);\n  void (__fastcall *updateDependencies)(BaseCircuitComponent *this, CircuitSceneGraph *, const BlockPos *);\n  bool (__fastcall *allowIndirect)(BaseCircuitComponent *this);\n  bool (__fastcall *isHalfPulse)(BaseCircuitComponent *this);\n  bool (__fastcall *hasSource)(BaseCircuitComponent *this, BaseCircuitComponent *);\n  bool (__fastcall *hasChildrenSource)(BaseCircuitComponent *this);\n  bool (__fastcall *isSecondaryPowered)(BaseCircuitComponent *this);\n};\n\n")])])]),a("h3",{attrs:{id:"terrainburstreactioncomponent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#terrainburstreactioncomponent"}},[t._v("#")]),t._v(" "),a("code",[t._v("TerrainBurstReactionComponent")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TerrainBurstReactionComponent : LabTableReactionComponent\n{\n  int mData;\n  Vec3 mDims;\n  Vec3 mDirRange;\n  int mCount;\n  bool mDirOneWay;\n};\n\n")])])]),a("h3",{attrs:{id:"terrainburstreactioncomponent-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#terrainburstreactioncomponent-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TerrainBurstReactionComponent_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TerrainBurstReactionComponent_vtbl\n{\n  void (__fastcall *~LabTableReactionComponent)(LabTableReactionComponent *this);\n  void (__fastcall *_onStart)(LabTableReactionComponent *this, LabTableReaction *, BlockSource *);\n  void (__fastcall *_onTick)(LabTableReactionComponent *this, LabTableReaction *, BlockSource *);\n  void (__fastcall *_onEnd)(LabTableReactionComponent *this, LabTableReaction *, BlockSource *);\n};\n\n")])])]),a("h3",{attrs:{id:"transformcomponentdescription"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformcomponentdescription"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformComponentDescription")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TransformComponentDescription : BlockComponentDescription\n{\n  TransformConditions mConditions;\n  std::string mResult;\n};\n\n")])])]),a("h3",{attrs:{id:"transformcomponentdescription-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformcomponentdescription-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformComponentDescription_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TransformComponentDescription_vtbl\n{\n  void (__fastcall *~BlockComponentDescription)(BlockComponentDescription *this);\n  const std::string *(__fastcall *getName)(BlockComponentDescription *this);\n  void (__fastcall *initializeComponent)(BlockComponentDescription *this, EntityContext *);\n  void (__fastcall *buildSchema)(BlockComponentDescription *this, std::shared_ptr<JsonUtil::JsonSchemaObjectNode<JsonUtil::EmptyClass,BlockComponentGroupDescription> > *, const BlockComponentFactory *);\n  bool (__fastcall *isNetworkComponent)(BlockComponentDescription *this);\n  std::unique_ptr<CompoundTag> *(__fastcall *buildNetworkTag)(BlockComponentDescription *this, std::unique_ptr<CompoundTag> *result);\n  void (__fastcall *initializeFromNetwork)(BlockComponentDescription *this, const CompoundTag *);\n};\n\n")])])]),a("h3",{attrs:{id:"tallgrass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tallgrass"}},[t._v("#")]),t._v(" "),a("code",[t._v("TallGrass")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TallGrass : BushBlock\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tallgrass-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tallgrass-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TallGrass_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TallGrass_vtbl\n{\n  void (__fastcall *~BlockLegacy)(BlockLegacy *this);\n  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  std::shared_ptr<BlockActor> *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr<BlockActor> *result, const BlockPos *, const Block *);\n  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);\n  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);\n  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);\n  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);\n  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *);\n  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);\n  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *, Actor *);\n  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);\n  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function<Block const & __cdecl(BlockPos const &)> *, const BlockPos *);\n  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);\n  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);\n  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);\n  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);\n  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);\n  bool (__fastcall *isStemBlock)(BlockLegacy *this);\n  bool (__fastcall *isContainerBlock)(BlockLegacy *this);\n  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);\n  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);\n  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);\n  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isWallBlock)(BlockLegacy *this);\n  bool (__fastcall *isStairBlock)(BlockLegacy *this);\n  bool (__fastcall *isSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoorBlock)(BlockLegacy *this);\n  bool (__fastcall *isRailBlock)(BlockLegacy *this);\n  bool (__fastcall *isButtonBlock)(BlockLegacy *this);\n  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);\n  bool (__fastcall *isSignalSource)(BlockLegacy *this);\n  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);\n  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);\n  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector<std::string> *);\n  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);\n  bool (__fastcall *canContainLiquid)(BlockLegacy *this);\n  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);\n  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);\n  float (__fastcall *getThickness)(BlockLegacy *this);\n  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);\n  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);\n  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);\n  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);\n  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);\n  bool (__fastcall *isBounceBlock)(BlockLegacy *this);\n  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);\n  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);\n  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);\n  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);\n  bool (__fastcall *mayPick)(BlockLegacy *this);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);\n  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);\n  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);\n  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);\n  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);\n  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);\n  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);\n  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);\n  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);\n  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);\n  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);\n  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);\n  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);\n  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);\n  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);\n  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);\n  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);\n  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);\n  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);\n  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);\n  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);\n  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);\n  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getIconYOffset)(BlockLegacy *this);\n  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);\n  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);\n  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getColor)(BlockLegacy *this, const Block *);\n  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);\n  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);\n  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);\n  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);\n  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);\n  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canSpawnOn)(BlockLegacy *this);\n  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);\n  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);\n  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);\n  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);\n  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  BlockLegacy *(__fastcall *init)(BlockLegacy *this);\n  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);\n  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);\n  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);\n  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);\n  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);\n  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);\n  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);\n  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);\n  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);\n  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);\n  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);\n  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);\n  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);\n  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);\n  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);\n  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);\n  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);\n  bool (__fastcall *isCropBlock)(BlockLegacy *this);\n  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *checkAlive)(BushBlock *this, BlockSource *, const BlockPos *);\n};\n\n")])])]),a("h3",{attrs:{id:"trapdoorblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trapdoorblock"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrapDoorBlock")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TrapDoorBlock : BlockLegacy\n{\n};\n\n")])])]),a("h3",{attrs:{id:"trapdoorblock-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trapdoorblock-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrapDoorBlock_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TrapDoorBlock_vtbl\n{\n  void (__fastcall *~BlockLegacy)(BlockLegacy *this);\n  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  std::shared_ptr<BlockActor> *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr<BlockActor> *result, const BlockPos *, const Block *);\n  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);\n  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);\n  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);\n  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);\n  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *);\n  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);\n  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *, Actor *);\n  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);\n  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function<Block const & __cdecl(BlockPos const &)> *, const BlockPos *);\n  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);\n  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);\n  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);\n  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);\n  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);\n  bool (__fastcall *isStemBlock)(BlockLegacy *this);\n  bool (__fastcall *isContainerBlock)(BlockLegacy *this);\n  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);\n  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);\n  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);\n  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isWallBlock)(BlockLegacy *this);\n  bool (__fastcall *isStairBlock)(BlockLegacy *this);\n  bool (__fastcall *isSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoorBlock)(BlockLegacy *this);\n  bool (__fastcall *isRailBlock)(BlockLegacy *this);\n  bool (__fastcall *isButtonBlock)(BlockLegacy *this);\n  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);\n  bool (__fastcall *isSignalSource)(BlockLegacy *this);\n  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);\n  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);\n  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector<std::string> *);\n  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);\n  bool (__fastcall *canContainLiquid)(BlockLegacy *this);\n  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);\n  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);\n  float (__fastcall *getThickness)(BlockLegacy *this);\n  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);\n  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);\n  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);\n  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);\n  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);\n  bool (__fastcall *isBounceBlock)(BlockLegacy *this);\n  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);\n  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);\n  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);\n  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);\n  bool (__fastcall *mayPick)(BlockLegacy *this);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);\n  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);\n  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);\n  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);\n  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);\n  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);\n  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);\n  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);\n  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);\n  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);\n  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);\n  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);\n  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);\n  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);\n  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);\n  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);\n  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);\n  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);\n  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);\n  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);\n  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);\n  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);\n  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getIconYOffset)(BlockLegacy *this);\n  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);\n  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);\n  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getColor)(BlockLegacy *this, const Block *);\n  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);\n  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);\n  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);\n  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);\n  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);\n  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canSpawnOn)(BlockLegacy *this);\n  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);\n  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);\n  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);\n  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);\n  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  BlockLegacy *(__fastcall *init)(BlockLegacy *this);\n  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);\n  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);\n  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);\n  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);\n  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);\n  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);\n  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);\n  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);\n  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);\n  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);\n  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);\n  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);\n  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);\n  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);\n  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);\n  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);\n  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);\n  bool (__fastcall *isCropBlock)(BlockLegacy *this);\n  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n};\n\n")])])]),a("h3",{attrs:{id:"thinfenceblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thinfenceblock"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThinFenceBlock")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) ThinFenceBlock : BlockLegacy\n{\n  const bool mDropsResources;\n  const bool mCanBeUsedInCommands;\n};\n\n")])])]),a("h3",{attrs:{id:"thinfenceblock-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thinfenceblock-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThinFenceBlock_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ThinFenceBlock_vtbl\n{\n  void (__fastcall *~BlockLegacy)(BlockLegacy *this);\n  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  std::shared_ptr<BlockActor> *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr<BlockActor> *result, const BlockPos *, const Block *);\n  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);\n  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);\n  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);\n  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);\n  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *);\n  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);\n  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *, Actor *);\n  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);\n  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function<Block const & __cdecl(BlockPos const &)> *, const BlockPos *);\n  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);\n  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);\n  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);\n  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);\n  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);\n  bool (__fastcall *isStemBlock)(BlockLegacy *this);\n  bool (__fastcall *isContainerBlock)(BlockLegacy *this);\n  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);\n  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);\n  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);\n  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isWallBlock)(BlockLegacy *this);\n  bool (__fastcall *isStairBlock)(BlockLegacy *this);\n  bool (__fastcall *isSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoorBlock)(BlockLegacy *this);\n  bool (__fastcall *isRailBlock)(BlockLegacy *this);\n  bool (__fastcall *isButtonBlock)(BlockLegacy *this);\n  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);\n  bool (__fastcall *isSignalSource)(BlockLegacy *this);\n  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);\n  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);\n  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector<std::string> *);\n  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);\n  bool (__fastcall *canContainLiquid)(BlockLegacy *this);\n  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);\n  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);\n  float (__fastcall *getThickness)(BlockLegacy *this);\n  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);\n  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);\n  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);\n  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);\n  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);\n  bool (__fastcall *isBounceBlock)(BlockLegacy *this);\n  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);\n  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);\n  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);\n  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);\n  bool (__fastcall *mayPick)(BlockLegacy *this);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);\n  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);\n  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);\n  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);\n  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);\n  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);\n  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);\n  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);\n  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);\n  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);\n  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);\n  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);\n  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);\n  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);\n  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);\n  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);\n  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);\n  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);\n  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);\n  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);\n  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);\n  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);\n  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getIconYOffset)(BlockLegacy *this);\n  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);\n  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);\n  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getColor)(BlockLegacy *this, const Block *);\n  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);\n  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);\n  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);\n  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);\n  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);\n  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canSpawnOn)(BlockLegacy *this);\n  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);\n  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);\n  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);\n  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);\n  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  BlockLegacy *(__fastcall *init)(BlockLegacy *this);\n  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);\n  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);\n  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);\n  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);\n  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);\n  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);\n  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);\n  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);\n  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);\n  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);\n  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);\n  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);\n  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);\n  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);\n  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);\n  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);\n  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);\n  bool (__fastcall *isCropBlock)(BlockLegacy *this);\n  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n};\n\n")])])]),a("h3",{attrs:{id:"tripwirehookblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tripwirehookblock"}},[t._v("#")]),t._v(" "),a("code",[t._v("TripWireHookBlock")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TripWireHookBlock : BlockLegacy\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tripwirehookblock-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tripwirehookblock-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TripWireHookBlock_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TripWireHookBlock_vtbl\n{\n  void (__fastcall *~BlockLegacy)(BlockLegacy *this);\n  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  std::shared_ptr<BlockActor> *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr<BlockActor> *result, const BlockPos *, const Block *);\n  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);\n  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);\n  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);\n  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);\n  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *);\n  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);\n  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *, Actor *);\n  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);\n  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function<Block const & __cdecl(BlockPos const &)> *, const BlockPos *);\n  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);\n  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);\n  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);\n  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);\n  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);\n  bool (__fastcall *isStemBlock)(BlockLegacy *this);\n  bool (__fastcall *isContainerBlock)(BlockLegacy *this);\n  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);\n  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);\n  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);\n  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isWallBlock)(BlockLegacy *this);\n  bool (__fastcall *isStairBlock)(BlockLegacy *this);\n  bool (__fastcall *isSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoorBlock)(BlockLegacy *this);\n  bool (__fastcall *isRailBlock)(BlockLegacy *this);\n  bool (__fastcall *isButtonBlock)(BlockLegacy *this);\n  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);\n  bool (__fastcall *isSignalSource)(BlockLegacy *this);\n  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);\n  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);\n  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector<std::string> *);\n  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);\n  bool (__fastcall *canContainLiquid)(BlockLegacy *this);\n  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);\n  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);\n  float (__fastcall *getThickness)(BlockLegacy *this);\n  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);\n  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);\n  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);\n  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);\n  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);\n  bool (__fastcall *isBounceBlock)(BlockLegacy *this);\n  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);\n  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);\n  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);\n  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);\n  bool (__fastcall *mayPick)(BlockLegacy *this);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);\n  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);\n  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);\n  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);\n  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);\n  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);\n  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);\n  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);\n  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);\n  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);\n  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);\n  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);\n  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);\n  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);\n  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);\n  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);\n  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);\n  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);\n  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);\n  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);\n  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);\n  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);\n  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getIconYOffset)(BlockLegacy *this);\n  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);\n  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);\n  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getColor)(BlockLegacy *this, const Block *);\n  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);\n  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);\n  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);\n  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);\n  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);\n  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canSpawnOn)(BlockLegacy *this);\n  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);\n  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);\n  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);\n  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);\n  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  BlockLegacy *(__fastcall *init)(BlockLegacy *this);\n  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);\n  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);\n  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);\n  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);\n  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);\n  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);\n  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);\n  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);\n  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);\n  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);\n  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);\n  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);\n  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);\n  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);\n  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);\n  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);\n  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);\n  bool (__fastcall *isCropBlock)(BlockLegacy *this);\n  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n};\n\n")])])]),a("h3",{attrs:{id:"turtleeggblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#turtleeggblock"}},[t._v("#")]),t._v(" "),a("code",[t._v("TurtleEggBlock")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TurtleEggBlock : BlockLegacy\n{\n  float mShapeOffset;\n};\n\n")])])]),a("h3",{attrs:{id:"turtleeggblock-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#turtleeggblock-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TurtleEggBlock_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TurtleEggBlock_vtbl\n{\n  void (__fastcall *~BlockLegacy)(BlockLegacy *this);\n  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  std::shared_ptr<BlockActor> *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr<BlockActor> *result, const BlockPos *, const Block *);\n  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);\n  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);\n  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);\n  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);\n  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *);\n  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);\n  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *, Actor *);\n  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);\n  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function<Block const & __cdecl(BlockPos const &)> *, const BlockPos *);\n  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);\n  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);\n  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);\n  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);\n  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);\n  bool (__fastcall *isStemBlock)(BlockLegacy *this);\n  bool (__fastcall *isContainerBlock)(BlockLegacy *this);\n  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);\n  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);\n  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);\n  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isWallBlock)(BlockLegacy *this);\n  bool (__fastcall *isStairBlock)(BlockLegacy *this);\n  bool (__fastcall *isSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoorBlock)(BlockLegacy *this);\n  bool (__fastcall *isRailBlock)(BlockLegacy *this);\n  bool (__fastcall *isButtonBlock)(BlockLegacy *this);\n  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);\n  bool (__fastcall *isSignalSource)(BlockLegacy *this);\n  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);\n  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);\n  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector<std::string> *);\n  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);\n  bool (__fastcall *canContainLiquid)(BlockLegacy *this);\n  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);\n  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);\n  float (__fastcall *getThickness)(BlockLegacy *this);\n  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);\n  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);\n  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);\n  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);\n  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);\n  bool (__fastcall *isBounceBlock)(BlockLegacy *this);\n  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);\n  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);\n  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);\n  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);\n  bool (__fastcall *mayPick)(BlockLegacy *this);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);\n  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);\n  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);\n  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);\n  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);\n  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);\n  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);\n  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);\n  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);\n  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);\n  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);\n  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);\n  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);\n  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);\n  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);\n  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);\n  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);\n  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);\n  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);\n  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);\n  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);\n  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);\n  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getIconYOffset)(BlockLegacy *this);\n  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);\n  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);\n  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getColor)(BlockLegacy *this, const Block *);\n  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);\n  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);\n  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);\n  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);\n  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);\n  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canSpawnOn)(BlockLegacy *this);\n  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);\n  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);\n  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);\n  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);\n  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  BlockLegacy *(__fastcall *init)(BlockLegacy *this);\n  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);\n  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);\n  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);\n  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);\n  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);\n  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);\n  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);\n  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);\n  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);\n  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);\n  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);\n  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);\n  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);\n  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);\n  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);\n  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);\n  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);\n  bool (__fastcall *isCropBlock)(BlockLegacy *this);\n  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n};\n\n")])])]),a("h3",{attrs:{id:"targetblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#targetblock"}},[t._v("#")]),t._v(" "),a("code",[t._v("TargetBlock")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TargetBlock : BlockLegacy\n{\n};\n\n")])])]),a("h3",{attrs:{id:"targetblock-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#targetblock-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TargetBlock_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TargetBlock_vtbl\n{\n  void (__fastcall *~BlockLegacy)(BlockLegacy *this);\n  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  std::shared_ptr<BlockActor> *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr<BlockActor> *result, const BlockPos *, const Block *);\n  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);\n  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);\n  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);\n  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);\n  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *);\n  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);\n  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *, Actor *);\n  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);\n  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function<Block const & __cdecl(BlockPos const &)> *, const BlockPos *);\n  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);\n  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);\n  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);\n  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);\n  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);\n  bool (__fastcall *isStemBlock)(BlockLegacy *this);\n  bool (__fastcall *isContainerBlock)(BlockLegacy *this);\n  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);\n  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);\n  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);\n  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isWallBlock)(BlockLegacy *this);\n  bool (__fastcall *isStairBlock)(BlockLegacy *this);\n  bool (__fastcall *isSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoorBlock)(BlockLegacy *this);\n  bool (__fastcall *isRailBlock)(BlockLegacy *this);\n  bool (__fastcall *isButtonBlock)(BlockLegacy *this);\n  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);\n  bool (__fastcall *isSignalSource)(BlockLegacy *this);\n  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);\n  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);\n  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector<std::string> *);\n  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);\n  bool (__fastcall *canContainLiquid)(BlockLegacy *this);\n  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);\n  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);\n  float (__fastcall *getThickness)(BlockLegacy *this);\n  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);\n  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);\n  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);\n  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);\n  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);\n  bool (__fastcall *isBounceBlock)(BlockLegacy *this);\n  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);\n  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);\n  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);\n  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);\n  bool (__fastcall *mayPick)(BlockLegacy *this);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);\n  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);\n  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);\n  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);\n  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);\n  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);\n  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);\n  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);\n  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);\n  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);\n  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);\n  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);\n  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);\n  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);\n  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);\n  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);\n  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);\n  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);\n  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);\n  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);\n  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);\n  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);\n  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getIconYOffset)(BlockLegacy *this);\n  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);\n  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);\n  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getColor)(BlockLegacy *this, const Block *);\n  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);\n  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);\n  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);\n  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);\n  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);\n  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canSpawnOn)(BlockLegacy *this);\n  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);\n  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);\n  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);\n  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);\n  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  BlockLegacy *(__fastcall *init)(BlockLegacy *this);\n  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);\n  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);\n  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);\n  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);\n  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);\n  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);\n  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);\n  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);\n  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);\n  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);\n  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);\n  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);\n  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);\n  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);\n  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);\n  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);\n  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);\n  bool (__fastcall *isCropBlock)(BlockLegacy *this);\n  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n};\n\n")])])]),a("h3",{attrs:{id:"turtleeggblock-destroyegg-l19-lambda-269ba72276ec6875a2f570f4af2d700d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#turtleeggblock-destroyegg-l19-lambda-269ba72276ec6875a2f570f4af2d700d"}},[t._v("#")]),t._v(" "),a("code",[t._v("TurtleEggBlock::_destroyEgg::__l19::<lambda_269ba72276ec6875a2f570f4af2d700d>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TurtleEggBlock::_destroyEgg::__l19::<lambda_269ba72276ec6875a2f570f4af2d700d>\n{\n  Actor *entity;\n  const Block *block;\n  const BlockPos *pos;\n  BlockSource *region;\n};\n\n")])])]),a("h3",{attrs:{id:"tripwireblock-entityinside-l11-lambda-a7ce562379b7c702df77d878f0eca511"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tripwireblock-entityinside-l11-lambda-a7ce562379b7c702df77d878f0eca511"}},[t._v("#")]),t._v(" "),a("code",[t._v("TripWireBlock::entityInside::__l11::<lambda_a7ce562379b7c702df77d878f0eca511>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TripWireBlock::entityInside::__l11::<lambda_a7ce562379b7c702df77d878f0eca511>\n{\n  Actor *entity;\n  const TripWireBlock *const __this;\n  const BlockPos *pos;\n  BlockSource *region;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-treeparams"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-treeparams"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::TreeParams")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const struct __cppobj TreeHelper::TreeParams\n{\n  int mNumBaseClusters;\n  int mClusterRadius;\n  std::vector<BlockDescriptor> mValidBaseBlocks;\n  std::vector<BlockDescriptor> mBaseMayReplace;\n  std::vector<BlockDescriptor> mMayGrowOn;\n  std::vector<BlockDescriptor> mMayReplace;\n  std::vector<BlockDescriptor> mMayGrowThrough;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration\n{\n  ChanceInformation mDecorationChance;\n  BlockDescriptor mDecorationBlock;\n  int mNumSteps;\n  TreeHelper::AttachableDecoration::GrowthDirection mDirection;\n};\n\n")])])]),a("h3",{attrs:{id:"transactionalworldblocktarget"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transactionalworldblocktarget"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransactionalWorldBlockTarget")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TransactionalWorldBlockTarget : IBlockWorldGenAPI\n{\n  WorldChangeTransaction mTransaction;\n};\n\n")])])]),a("h3",{attrs:{id:"transactionalworldblocktarget-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transactionalworldblocktarget-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransactionalWorldBlockTarget_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TransactionalWorldBlockTarget_vtbl\n{\n  void (__fastcall *~IBlockWorldGenAPI)(IBlockWorldGenAPI *this);\n  const Block *(__fastcall *getBlock)(IBlockWorldGenAPI *this, const BlockPos *);\n  bool (__fastcall *hasBiomeTag)(IBlockWorldGenAPI *this, unsigned __int64, const BlockPos *);\n  bool (__fastcall *setBlock)(IBlockWorldGenAPI *this, const BlockPos *, const Block *, int);\n  bool (__fastcall *apply)(IBlockWorldGenAPI *this);\n  bool (__fastcall *placeStructure)(IBlockWorldGenAPI *this, const BlockPos *, StructureTemplate *, StructureSettings *);\n  bool (__fastcall *mayPlace)(IBlockWorldGenAPI *this, const BlockPos *, const Block *);\n  bool (__fastcall *canSurvive)(IBlockWorldGenAPI *this, const BlockPos *, const Block *);\n  __int16 (__fastcall *getMaxHeight)(IBlockWorldGenAPI *this);\n  __int16 (__fastcall *getMinHeight)(IBlockWorldGenAPI *this);\n  bool (__fastcall *shimPlaceForOldFeatures)(IBlockWorldGenAPI *this, const Feature *, const BlockPos *, Random *);\n  __int16 (__fastcall *getHeightmap)(IBlockWorldGenAPI *this, int, int);\n  bool (__fastcall *isLegacyLevel)(IBlockWorldGenAPI *this);\n};\n\n")])])]),a("h3",{attrs:{id:"templatestructurepiece"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#templatestructurepiece"}},[t._v("#")]),t._v(" "),a("code",[t._v("TemplateStructurePiece")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TemplateStructurePiece : StructurePiece\n{\n  LegacyStructureTemplate *mTemplate;\n  LegacyStructureSettings mSettings;\n  BlockPos mTemplatePosition;\n};\n\n")])])]),a("h3",{attrs:{id:"templatestructurepiece-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#templatestructurepiece-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TemplateStructurePiece_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TemplateStructurePiece_vtbl\n{\n  void (__fastcall *~StructurePiece)(StructurePiece *this);\n  void (__fastcall *moveBoundingBox)(StructurePiece *this, int, int, int);\n  PoolElementStructurePiece *(__fastcall *asPoolElement)(StructurePiece *this);\n  StructurePieceType (__fastcall *getType)(StructurePiece *this);\n  void (__fastcall *addChildren)(StructurePiece *this, StructurePiece *, std::vector<std::unique_ptr<StructurePiece>> *, Random *);\n  bool (__fastcall *postProcess)(StructurePiece *this, BlockSource *, Random *, const BoundingBox *);\n  void (__fastcall *postProcessMobsAt)(StructurePiece *this, BlockSource *, Random *, const BoundingBox *);\n  int (__fastcall *getWorldX)(StructurePiece *this, int, int);\n  int (__fastcall *getWorldZ)(StructurePiece *this, int, int);\n  void (__fastcall *placeBlock)(StructurePiece *this, BlockSource *, const Block *, int, int, int, const BoundingBox *);\n  void (__fastcall *generateBox)(StructurePiece *this, BlockSource *, const BoundingBox *, int, int, int, int, int, int, const Block *, const Block *, bool);\n  void (__fastcall *addHardcodedSpawnAreas)(StructurePiece *this, LevelChunk *);\n  void (__fastcall *_handleDataMarker)(TemplateStructurePiece *this, const std::string *, const BlockPos *, BlockSource *, Random *, const BoundingBox *);\n};\n\n")])])]),a("h3",{attrs:{id:"tickingareaview-tick-l24-lambda-e93ece0c982b1407c5f6ea0f18f0084f"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tickingareaview-tick-l24-lambda-e93ece0c982b1407c5f6ea0f18f0084f"}},[t._v("#")]),t._v(" "),a("code",[t._v("TickingAreaView::tick::__l24::<lambda_e93ece0c982b1407c5f6ea0f18f0084f>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TickingAreaView::tick::__l24::<lambda_e93ece0c982b1407c5f6ea0f18f0084f>\n{\n  const Pos *minBounds;\n  const bool *isCircleArea;\n  const GridArea<std::shared_ptr<LevelChunk> > *view;\n  TickingAreaView *const __this;\n  const Tick *currentTick;\n  BlockSource *region;\n  Level *level;\n};\n\n")])])]),a("h3",{attrs:{id:"tickingarea-ctor-l2-lambda-ecbdd7020b8c77fb7806c64c03108081"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tickingarea-ctor-l2-lambda-ecbdd7020b8c77fb7806c64c03108081"}},[t._v("#")]),t._v(" "),a("code",[t._v("TickingArea::{ctor}::__l2::<lambda_ecbdd7020b8c77fb7806c64c03108081>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TickingArea::{ctor}::__l2::<lambda_ecbdd7020b8c77fb7806c64c03108081>\n{\n  Dimension *dimension;\n};\n\n")])])]),a("h3",{attrs:{id:"tagxhr-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tagxhr-cookie"}},[t._v("#")]),t._v(" "),a("code",[t._v("tagXHR_COOKIE")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) tagXHR_COOKIE\n{\n  wchar_t *pwszUrl;\n  wchar_t *pwszName;\n  wchar_t *pwszValue;\n  wchar_t *pwszP3PPolicy;\n  _FILETIME ftExpires;\n  unsigned int dwFlags;\n};\n\n")])])]),a("h3",{attrs:{id:"taghelper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taghelper"}},[t._v("#")]),t._v(" "),a("code",[t._v("TagHelper")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TagHelper\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tagrpc-call-attributes-v3-w"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tagrpc-call-attributes-v3-w"}},[t._v("#")]),t._v(" "),a("code",[t._v("tagRPC_CALL_ATTRIBUTES_V3_W")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tagRPC_CALL_ATTRIBUTES_V3_W\n{\n  unsigned int Version;\n  unsigned int Flags;\n  unsigned int ServerPrincipalNameBufferLength;\n  unsigned __int16 *ServerPrincipalName;\n  unsigned int ClientPrincipalNameBufferLength;\n  unsigned __int16 *ClientPrincipalName;\n  unsigned int AuthenticationLevel;\n  unsigned int AuthenticationService;\n  int NullSession;\n  int KernelModeCaller;\n  unsigned int ProtocolSequence;\n  tagRpcCallClientLocality IsClientLocal;\n  void *ClientPID;\n  unsigned int CallStatus;\n  tagRpcCallType CallType;\n  _RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;\n  unsigned __int16 OpNum;\n  _GUID InterfaceUuid;\n  unsigned int ClientIdentifierBufferLength;\n  unsigned __int8 *ClientIdentifier;\n};\n\n")])])]),a("h3",{attrs:{id:"tagserverinformation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tagserverinformation"}},[t._v("#")]),t._v(" "),a("code",[t._v("tagServerInformation")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tagServerInformation\n{\n  unsigned int dwServerPid;\n  unsigned int dwServerTid;\n  unsigned __int64 ui64ServerAddress;\n};\n\n")])])]),a("h3",{attrs:{id:"tagrpc-call-attributes-v3-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tagrpc-call-attributes-v3-a"}},[t._v("#")]),t._v(" "),a("code",[t._v("tagRPC_CALL_ATTRIBUTES_V3_A")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tagRPC_CALL_ATTRIBUTES_V3_A\n{\n  unsigned int Version;\n  unsigned int Flags;\n  unsigned int ServerPrincipalNameBufferLength;\n  unsigned __int8 *ServerPrincipalName;\n  unsigned int ClientPrincipalNameBufferLength;\n  unsigned __int8 *ClientPrincipalName;\n  unsigned int AuthenticationLevel;\n  unsigned int AuthenticationService;\n  int NullSession;\n  int KernelModeCaller;\n  unsigned int ProtocolSequence;\n  unsigned int IsClientLocal;\n  void *ClientPID;\n  unsigned int CallStatus;\n  tagRpcCallType CallType;\n  _RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;\n  unsigned __int16 OpNum;\n  _GUID InterfaceUuid;\n  unsigned int ClientIdentifierBufferLength;\n  unsigned __int8 *ClientIdentifier;\n};\n\n")])])]),a("h3",{attrs:{id:"tpatchupdateinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tpatchupdateinfo"}},[t._v("#")]),t._v(" "),a("code",[t._v("tPatchUpdateInfo")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tPatchUpdateInfo\n{\n  std::string patchVer;\n  std::string patchUrl;\n  std::string patchMD5;\n  int patchSize;\n};\n\n")])])]),a("h3",{attrs:{id:"transferhandler-notifypythonupdatestate-l2-lambda-afd70fad5bd69b087231a1a613a8b71d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transferhandler-notifypythonupdatestate-l2-lambda-afd70fad5bd69b087231a1a613a8b71d"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransferHandler::notifyPythonUpdateState::__l2::<lambda_afd70fad5bd69b087231a1a613a8b71d>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TransferHandler::notifyPythonUpdateState::__l2::<lambda_afd70fad5bd69b087231a1a613a8b71d>\n{\n  TransferHandler *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"trace-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trace-t"}},[t._v("#")]),t._v(" "),a("code",[t._v("trace_t")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct trace_t\n{\n  unsigned __int64 size;\n  traceback_t *traceback;\n};\n\n")])])]),a("h3",{attrs:{id:"tiercomponentdescription-buildschema-l2-lambda-bcdfe114008b2394d9ad807c812ceba2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tiercomponentdescription-buildschema-l2-lambda-bcdfe114008b2394d9ad807c812ceba2"}},[t._v("#")]),t._v(" "),a("code",[t._v("TierComponentDescription::buildSchema::__l2::<lambda_bcdfe114008b2394d9ad807c812ceba2>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TierComponentDescription::buildSchema::__l2::<lambda_bcdfe114008b2394d9ad807c812ceba2>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tiercomponentdescription-buildschema-l2-lambda-1fb0a0a39752f2be29816afd76f0350d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tiercomponentdescription-buildschema-l2-lambda-1fb0a0a39752f2be29816afd76f0350d"}},[t._v("#")]),t._v(" "),a("code",[t._v("TierComponentDescription::buildSchema::__l2::<lambda_1fb0a0a39752f2be29816afd76f0350d>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TierComponentDescription::buildSchema::__l2::<lambda_1fb0a0a39752f2be29816afd76f0350d>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tiercomponentdescription-buildschema-l2-lambda-10780ac71d4569ba6b03abaf9d720665"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tiercomponentdescription-buildschema-l2-lambda-10780ac71d4569ba6b03abaf9d720665"}},[t._v("#")]),t._v(" "),a("code",[t._v("TierComponentDescription::buildSchema::__l2::<lambda_10780ac71d4569ba6b03abaf9d720665>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TierComponentDescription::buildSchema::__l2::<lambda_10780ac71d4569ba6b03abaf9d720665>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tiercomponentdescription-buildschema-l2-lambda-ee1ce6d16b39680e7effbc4cb509458e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tiercomponentdescription-buildschema-l2-lambda-ee1ce6d16b39680e7effbc4cb509458e"}},[t._v("#")]),t._v(" "),a("code",[t._v("TierComponentDescription::buildSchema::__l2::<lambda_ee1ce6d16b39680e7effbc4cb509458e>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TierComponentDescription::buildSchema::__l2::<lambda_ee1ce6d16b39680e7effbc4cb509458e>\n{\n  const BlockComponentFactory *factory;\n};\n\n")])])]),a("h3",{attrs:{id:"transformcomponentdescription-buildschema-l2-lambda-5568880fee4ed2a7481f54241155db51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformcomponentdescription-buildschema-l2-lambda-5568880fee4ed2a7481f54241155db51"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformComponentDescription::buildSchema::__l2::<lambda_5568880fee4ed2a7481f54241155db51>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TransformComponentDescription::buildSchema::__l2::<lambda_5568880fee4ed2a7481f54241155db51>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"transformcomponentdescription-buildschema-l2-lambda-05bff39358757891f8a72a27d6c6b4b5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformcomponentdescription-buildschema-l2-lambda-05bff39358757891f8a72a27d6c6b4b5"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformComponentDescription::buildSchema::__l2::<lambda_05bff39358757891f8a72a27d6c6b4b5>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TransformComponentDescription::buildSchema::__l2::<lambda_05bff39358757891f8a72a27d6c6b4b5>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"transformcomponentdescription-buildschema-l2-lambda-ec76577b05acff01e13b0423b61a640f"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformcomponentdescription-buildschema-l2-lambda-ec76577b05acff01e13b0423b61a640f"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformComponentDescription::buildSchema::__l2::<lambda_ec76577b05acff01e13b0423b61a640f>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TransformComponentDescription::buildSchema::__l2::<lambda_ec76577b05acff01e13b0423b61a640f>\n{\n  const BlockComponentFactory *factory;\n};\n\n")])])]),a("h3",{attrs:{id:"touchcamerajoystickcontrol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchcamerajoystickcontrol"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchCameraJoystickControl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TouchCameraJoystickControl : TouchControl\n{\n  std::function<bool __cdecl(void)> mCondition;\n  unsigned int mButtonId;\n  unsigned int mJumpButtonId;\n  ButtonState mButtonState;\n  mce::Color mPressedColor;\n  mce::Color mReleasedColor;\n  int mUx;\n  int mUv;\n  int mUvWidth;\n  int mUvHeight;\n  int mUx1;\n  int mUv1;\n  int mUvWidth1;\n  int mUvHeight1;\n  bool mPassThrough;\n  bool mPromiscuous;\n  int mTouchStateRequirement;\n  int mTicksSinceFirstPress;\n  bool mWaitingForSecondPress;\n  std::string mName;\n  int mTouchId;\n  float mSensitivityX;\n  float mSensitivityY;\n  float mRenderPosX;\n  float mRenderPosY;\n  float mBeginPosX;\n  float mBeginPosY;\n  float mLastPosX;\n  float mLastPosY;\n  int mJumping;\n  float mGlyphScale;\n};\n\n")])])]),a("h3",{attrs:{id:"touchcamerajoystickcontrol-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchcamerajoystickcontrol-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchCameraJoystickControl_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TouchCameraJoystickControl_vtbl\n{\n  void (__fastcall *~TouchControl)(TouchControl *this);\n  void (__fastcall *render)(TouchControl *this, InputRenderContext *);\n  void (__fastcall *tick)(TouchControl *this, InputEventQueue *, TouchPointResults *, int);\n  void (__fastcall *release)(TouchControl *this, InputEventQueue *);\n};\n\n")])])]),a("h3",{attrs:{id:"touchglyphbuttoncontrol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchglyphbuttoncontrol"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchGlyphButtonControl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TouchGlyphButtonControl : TouchControl\n{\n  std::function<bool __cdecl(void)> mCondition;\n  unsigned int mButtonId;\n  ButtonState mButtonState;\n  mce::Color mPressedColor;\n  mce::Color mReleasedColor;\n  int mUx;\n  int mUv;\n  int mUvWidth;\n  int mUvHeight;\n  bool mPassThrough;\n  bool mPromiscuous;\n  int mTouchStateRequirement;\n  int mTicksSinceFirstPress;\n  bool mWaitingForSecondPress;\n  std::string mName;\n  float mGlyphScale;\n};\n\n")])])]),a("h3",{attrs:{id:"touchglyphbuttoncontrol-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchglyphbuttoncontrol-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchGlyphButtonControl_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TouchGlyphButtonControl_vtbl\n{\n  void (__fastcall *~TouchControl)(TouchControl *this);\n  void (__fastcall *render)(TouchControl *this, InputRenderContext *);\n  void (__fastcall *tick)(TouchControl *this, InputEventQueue *, TouchPointResults *, int);\n  void (__fastcall *release)(TouchControl *this, InputEventQueue *);\n};\n\n")])])]),a("h3",{attrs:{id:"touchglyphradiobuttoncontrol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchglyphradiobuttoncontrol"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchGlyphRadioButtonControl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TouchGlyphRadioButtonControl : TouchControl\n{\n  std::function<bool __cdecl(void)> mCondition;\n  std::function<bool __cdecl(void)> mStateCondition;\n  unsigned int mButtonId;\n  ButtonState mButtonState;\n  mce::Color mPressedColor;\n  mce::Color mReleasedColor;\n  int mUx;\n  int mUv;\n  int mUvWidth;\n  int mUvHeight;\n  bool mPassThrough;\n  bool mPromiscuous;\n  int mTouchStateRequirement;\n  int mTicksSinceFirstPress;\n  bool mWaitingForSecondPress;\n  std::string mName;\n  float mGlyphScale;\n};\n\n")])])]),a("h3",{attrs:{id:"touchglyphradiobuttoncontrol-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchglyphradiobuttoncontrol-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchGlyphRadioButtonControl_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TouchGlyphRadioButtonControl_vtbl\n{\n  void (__fastcall *~TouchControl)(TouchControl *this);\n  void (__fastcall *render)(TouchControl *this, InputRenderContext *);\n  void (__fastcall *tick)(TouchControl *this, InputEventQueue *, TouchPointResults *, int);\n  void (__fastcall *release)(TouchControl *this, InputEventQueue *);\n};\n\n")])])]),a("h3",{attrs:{id:"touchjoystickcontrol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchjoystickcontrol"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchJoystickControl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TouchJoystickControl : TouchControl\n{\n  std::function<bool __cdecl(void)> mCondition;\n  unsigned int mButtonUpId;\n  unsigned int mButtonDownId;\n  unsigned int mButtonLeftId;\n  unsigned int mButtonRightId;\n  bool mButtonStateUp;\n  bool mButtonStateDown;\n  bool mButtonStateLeft;\n  bool mButtonStateRight;\n  ButtonState mButtonState;\n  mce::Color mPressedColor;\n  mce::Color mReleasedColor;\n  int mUx;\n  int mUv;\n  int mUvWidth;\n  int mUvHeight;\n  int mUx1;\n  int mUv1;\n  int mUvWidth1;\n  int mUvHeight1;\n  bool mPassThrough;\n  bool mPromiscuous;\n  int mTouchStateRequirement;\n  int mTicksSinceFirstPress;\n  bool mWaitingForSecondPress;\n  std::string mName;\n  int mTouchId;\n  bool mCaptured;\n  float mGlyphScale;\n};\n\n")])])]),a("h3",{attrs:{id:"touchjoystickcontrol-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchjoystickcontrol-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchJoystickControl_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TouchJoystickControl_vtbl\n{\n  void (__fastcall *~TouchControl)(TouchControl *this);\n  void (__fastcall *render)(TouchControl *this, InputRenderContext *);\n  void (__fastcall *tick)(TouchControl *this, InputEventQueue *, TouchPointResults *, int);\n  void (__fastcall *release)(TouchControl *this, InputEventQueue *);\n};\n\n")])])]),a("h3",{attrs:{id:"touchglyphbuttonexcontrol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchglyphbuttonexcontrol"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchGlyphButtonEXControl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TouchGlyphButtonEXControl : TouchControl\n{\n  std::function<bool __cdecl(void)> mCondition;\n  unsigned int mButtonId;\n  unsigned int mButtonId2;\n  ButtonState mButtonState;\n  mce::Color mPressedColor;\n  mce::Color mReleasedColor;\n  int mUx;\n  int mUv;\n  int mUvWidth;\n  int mUvHeight;\n  bool mPassThrough;\n  bool mPromiscuous;\n  int mTouchStateRequirement;\n  int mTicksSinceFirstPress;\n  bool mWaitingHold;\n  bool mHolding;\n  std::string mName;\n  std::string mName2;\n  float mGlyphScale;\n};\n\n")])])]),a("h3",{attrs:{id:"touchglyphbuttonexcontrol-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchglyphbuttonexcontrol-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchGlyphButtonEXControl_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TouchGlyphButtonEXControl_vtbl\n{\n  void (__fastcall *~TouchControl)(TouchControl *this);\n  void (__fastcall *render)(TouchControl *this, InputRenderContext *);\n  void (__fastcall *tick)(TouchControl *this, InputEventQueue *, TouchPointResults *, int);\n  void (__fastcall *release)(TouchControl *this, InputEventQueue *);\n};\n\n")])])]),a("h3",{attrs:{id:"theendlighttextureimagebuilder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#theendlighttextureimagebuilder"}},[t._v("#")]),t._v(" "),a("code",[t._v("TheEndLightTextureImageBuilder")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TheEndLightTextureImageBuilder : BaseLightTextureImageBuilder\n{\n};\n\n")])])]),a("h3",{attrs:{id:"theendlighttextureimagebuilder-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#theendlighttextureimagebuilder-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TheEndLightTextureImageBuilder_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TheEndLightTextureImageBuilder_vtbl\n{\n  void (__fastcall *~BaseLightTextureImageBuilder)(BaseLightTextureImageBuilder *this);\n  void (__fastcall *init)(BaseLightTextureImageBuilder *this, Dimension *);\n  bool (__fastcall *buildImage)(BaseLightTextureImageBuilder *this, const BaseLightData *, mce::Image *, unsigned int, float, float, bool);\n  void (__fastcall *getModifiedBlockBrightnessColor)(BaseLightTextureImageBuilder *this, const BlockPos *, const Block *, const Brightness *, BrightnessPair *);\n  std::unique_ptr<BaseLightData> *(__fastcall *createBaseLightTextureData)(BaseLightTextureImageBuilder *this, std::unique_ptr<BaseLightData> *result, IClientInstance *, const BaseLightData *);\n};\n\n")])])]),a("h3",{attrs:{id:"theenddimension"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#theenddimension"}},[t._v("#")]),t._v(" "),a("code",[t._v("TheEndDimension")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TheEndDimension : Dimension\n{\n  std::unique_ptr<EndDragonFight> mDragonFight;\n  bool mHasInitDragon;\n};\n\n")])])]),a("h3",{attrs:{id:"tradeablesystem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradeablesystem"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeableSystem")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TradeableSystem : ITickingSystem\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tradeablesystem-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradeablesystem-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeableSystem_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TradeableSystem_vtbl\n{\n  void (__fastcall *~ITickingSystem)(ITickingSystem *this);\n  void (__fastcall *tick)(ITickingSystem *this, EntityRegistry *);\n};\n\n")])])]),a("h3",{attrs:{id:"trailsystem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trailsystem"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrailSystem")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TrailSystem : ITickingSystem\n{\n};\n\n")])])]),a("h3",{attrs:{id:"trailsystem-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trailsystem-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrailSystem_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TrailSystem_vtbl\n{\n  void (__fastcall *~ITickingSystem)(ITickingSystem *this);\n  void (__fastcall *tick)(ITickingSystem *this, EntityRegistry *);\n};\n\n")])])]),a("h3",{attrs:{id:"transformationsystem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformationsystem"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformationSystem")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TransformationSystem : ITickingSystem\n{\n};\n\n")])])]),a("h3",{attrs:{id:"transformationsystem-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformationsystem-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformationSystem_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TransformationSystem_vtbl\n{\n  void (__fastcall *~ITickingSystem)(ITickingSystem *this);\n  void (__fastcall *tick)(ITickingSystem *this, EntityRegistry *);\n};\n\n")])])]),a("h3",{attrs:{id:"tempeptr-villager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tempeptr-villager"}},[t._v("#")]),t._v(" "),a("code",[t._v("TempEPtr<Villager>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TempEPtr<Villager> : _TickPtr\n{\n  Villager *tmp;\n  ActorUniqueID mEntityId;\n  Level *mLevel;\n  bool mHasLocked;\n};\n\n")])])]),a("h3",{attrs:{id:"tempeptr-villager-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tempeptr-villager-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TempEPtr<Villager>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TempEPtr<Villager>_vtbl\n{\n  void (__fastcall *invalidate)(_TickPtr *this);\n  void (__fastcall *~_TickPtr)(_TickPtr *this);\n};\n\n")])])]),a("h3",{attrs:{id:"tempeptr-irongolem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tempeptr-irongolem"}},[t._v("#")]),t._v(" "),a("code",[t._v("TempEPtr<IronGolem>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TempEPtr<IronGolem> : _TickPtr\n{\n  IronGolem *tmp;\n  ActorUniqueID mEntityId;\n  Level *mLevel;\n  bool mHasLocked;\n};\n\n")])])]),a("h3",{attrs:{id:"tempeptr-irongolem-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tempeptr-irongolem-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TempEPtr<IronGolem>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TempEPtr<IronGolem>_vtbl\n{\n  void (__fastcall *invalidate)(_TickPtr *this);\n  void (__fastcall *~_TickPtr)(_TickPtr *this);\n};\n\n")])])]),a("h3",{attrs:{id:"takeflowergoal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#takeflowergoal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TakeFlowerGoal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TakeFlowerGoal : Goal\n{\n  TempEPtr<IronGolem> mGolem;\n  int mPickupTick;\n  bool mTakeFlower;\n  Mob *mMob;\n};\n\n")])])]),a("h3",{attrs:{id:"takeflowergoal-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#takeflowergoal-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TakeFlowerGoal_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TakeFlowerGoal_vtbl\n{\n  void (__fastcall *~Goal)(Goal *this);\n  bool (__fastcall *canUse)(Goal *this);\n  bool (__fastcall *canContinueToUse)(Goal *this);\n  bool (__fastcall *canBeInterrupted)(Goal *this);\n  void (__fastcall *start)(Goal *this);\n  void (__fastcall *stop)(Goal *this);\n  void (__fastcall *tick)(Goal *this);\n  void (__fastcall *appendDebugInfo)(Goal *this, std::string *);\n  bool (__fastcall *isTargetGoal)(Goal *this);\n  void (__fastcall *onPlayerDimensionChanged)(Goal *this, Player *, AutomaticID<Dimension,int>);\n};\n\n")])])]),a("h3",{attrs:{id:"targetwhenpushedgoal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#targetwhenpushedgoal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TargetWhenPushedGoal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TargetWhenPushedGoal : Goal\n{\n  Mob *mSelf;\n  float mPercentChance;\n  const std::vector<MobDescriptor> mTargetTypes;\n};\n\n")])])]),a("h3",{attrs:{id:"targetwhenpushedgoal-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#targetwhenpushedgoal-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TargetWhenPushedGoal_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TargetWhenPushedGoal_vtbl\n{\n  void (__fastcall *~Goal)(Goal *this);\n  bool (__fastcall *canUse)(Goal *this);\n  bool (__fastcall *canContinueToUse)(Goal *this);\n  bool (__fastcall *canBeInterrupted)(Goal *this);\n  void (__fastcall *start)(Goal *this);\n  void (__fastcall *stop)(Goal *this);\n  void (__fastcall *tick)(Goal *this);\n  void (__fastcall *appendDebugInfo)(Goal *this, std::string *);\n  bool (__fastcall *isTargetGoal)(Goal *this);\n  void (__fastcall *onPlayerDimensionChanged)(Goal *this, Player *, AutomaticID<Dimension,int>);\n};\n\n")])])]),a("h3",{attrs:{id:"temptgoal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#temptgoal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TemptGoal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TemptGoal : Goal\n{\n  Mob *mMob;\n  float mSpeed;\n  TempEPtr<Player> mPlayer;\n  Vec3 mOldPlayerPosition;\n  Vec2 mOldPlayerRotation;\n  bool mCanGetScared;\n  int mCalmDown;\n  bool mIsRunning;\n  bool mOldAvoidWater;\n  bool mCanTemptWhileRidden;\n  int mPathfinderWaitTicks;\n  float mTemptDistance;\n  std::vector<ItemDescriptor> mItems;\n  bool mCanTemptVertically;\n  LevelSoundEvent mSoundEvent;\n  FloatRange mSoundIntervalRange;\n  Tick mNextSoundEventTick;\n};\n\n")])])]),a("h3",{attrs:{id:"temptgoal-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#temptgoal-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TemptGoal_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TemptGoal_vtbl\n{\n  void (__fastcall *~Goal)(Goal *this);\n  bool (__fastcall *canUse)(Goal *this);\n  bool (__fastcall *canContinueToUse)(Goal *this);\n  bool (__fastcall *canBeInterrupted)(Goal *this);\n  void (__fastcall *start)(Goal *this);\n  void (__fastcall *stop)(Goal *this);\n  void (__fastcall *tick)(Goal *this);\n  void (__fastcall *appendDebugInfo)(Goal *this, std::string *);\n  bool (__fastcall *isTargetGoal)(Goal *this);\n  void (__fastcall *onPlayerDimensionChanged)(Goal *this, Player *, AutomaticID<Dimension,int>);\n};\n\n")])])]),a("h3",{attrs:{id:"tradeinterestgoal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradeinterestgoal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeInterestGoal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TradeInterestGoal : Goal\n{\n  Mob *mMob;\n  TempEPtr<Player> mPlayer;\n  bool mIsRunning;\n  bool mIsOnlyTargetItemFound;\n  float mInterestDistance;\n  unsigned __int64 mCurrentIndex;\n  ItemStack mCarriedItem;\n  ItemStack mPlayerItem;\n  Tick mCarriedItemSwitchTimer;\n  Tick mRemoveItemTimer;\n  Tick mInterestTimer;\n  Tick mInterestCooldown;\n  const Tick mInterestTimeMax;\n  const Tick mInterestTimeMaxHalf;\n  const Tick mRemoveTimeMax;\n  const Tick mCarriedSwitchMax;\n  const Tick mInterestCooldownMax;\n};\n\n")])])]),a("h3",{attrs:{id:"tradeinterestgoal-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradeinterestgoal-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeInterestGoal_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TradeInterestGoal_vtbl\n{\n  void (__fastcall *~Goal)(Goal *this);\n  bool (__fastcall *canUse)(Goal *this);\n  bool (__fastcall *canContinueToUse)(Goal *this);\n  bool (__fastcall *canBeInterrupted)(Goal *this);\n  void (__fastcall *start)(Goal *this);\n  void (__fastcall *stop)(Goal *this);\n  void (__fastcall *tick)(Goal *this);\n  void (__fastcall *appendDebugInfo)(Goal *this, std::string *);\n  bool (__fastcall *isTargetGoal)(Goal *this);\n  void (__fastcall *onPlayerDimensionChanged)(Goal *this, Player *, AutomaticID<Dimension,int>);\n};\n\n")])])]),a("h3",{attrs:{id:"tradewithplayergoal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradewithplayergoal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeWithPlayerGoal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TradeWithPlayerGoal : Goal\n{\n  Mob *mMob;\n};\n\n")])])]),a("h3",{attrs:{id:"tradewithplayergoal-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tradewithplayergoal-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TradeWithPlayerGoal_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TradeWithPlayerGoal_vtbl\n{\n  void (__fastcall *~Goal)(Goal *this);\n  bool (__fastcall *canUse)(Goal *this);\n  bool (__fastcall *canContinueToUse)(Goal *this);\n  bool (__fastcall *canBeInterrupted)(Goal *this);\n  void (__fastcall *start)(Goal *this);\n  void (__fastcall *stop)(Goal *this);\n  void (__fastcall *tick)(Goal *this);\n  void (__fastcall *appendDebugInfo)(Goal *this, std::string *);\n  bool (__fastcall *isTargetGoal)(Goal *this);\n  void (__fastcall *onPlayerDimensionChanged)(Goal *this, Player *, AutomaticID<Dimension,int>);\n};\n\n")])])]),a("h3",{attrs:{id:"theendgenerator-threaddata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#theendgenerator-threaddata"}},[t._v("#")]),t._v(" "),a("code",[t._v("TheEndGenerator::ThreadData")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TheEndGenerator::ThreadData\n{\n  std::array<Block const *,32768> blockBuffer;\n};\n\n")])])]),a("h3",{attrs:{id:"theendgenerator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#theendgenerator"}},[t._v("#")]),t._v(" "),a("code",[t._v("TheEndGenerator")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TheEndGenerator : ChunkSource, WorldGenerator\n{\n  std::unique_ptr<PerlinNoise> mLPerlinNoise1;\n  std::unique_ptr<PerlinNoise> mLPerlinNoise2;\n  std::unique_ptr<PerlinNoise> mPerlinNoise1;\n  std::unique_ptr<SimplexNoise> mIslandNoise;\n  std::unique_ptr<PerlinSimplexNoise> mMaterialAdjNoise;\n  Bedrock::Threading::InstancedThreadLocal<TheEndGenerator::ThreadData,std::allocator<TheEndGenerator::ThreadData> > generatorHelpersPool;\n  EndCityFeature mEndCityFeature;\n  std::shared_mutex mTryGetHeightMutex;\n  std::unordered_map<BlockPos,int> mHeightCache;\n};\n\n")])])]),a("h3",{attrs:{id:"theendgenerator-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#theendgenerator-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TheEndGenerator_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TheEndGenerator_vtbl\n{\n  void (__fastcall *~ChunkSource)(ChunkSource *this);\n  void (__fastcall *shutdown)(ChunkSource *this);\n  bool (__fastcall *isShutdownDone)(ChunkSource *this);\n  std::shared_ptr<LevelChunk> *(__fastcall *getExistingChunk)(ChunkSource *this, std::shared_ptr<LevelChunk> *result, const ChunkPos *);\n  std::shared_ptr<LevelChunk> *(__fastcall *getRandomChunk)(ChunkSource *this, std::shared_ptr<LevelChunk> *result, Random *);\n  std::shared_ptr<LevelChunk> *(__fastcall *createNewChunk)(ChunkSource *this, std::shared_ptr<LevelChunk> *result, const ChunkPos *, ChunkSource::LoadMode);\n  std::shared_ptr<LevelChunk> *(__fastcall *getOrLoadChunk)(ChunkSource *this, std::shared_ptr<LevelChunk> *result, const ChunkPos *, ChunkSource::LoadMode);\n  bool (__fastcall *postProcess)(ChunkSource *this, ChunkViewSource *);\n  void (__fastcall *checkAndReplaceChunk)(ChunkSource *this, ChunkViewSource *, LevelChunk *);\n  void (__fastcall *loadChunk)(ChunkSource *this, LevelChunk *, bool);\n  void (__fastcall *postProcessMobsAt)(ChunkSource *this, BlockSource *, int, int, Random *);\n  bool (__fastcall *saveLiveChunk)(ChunkSource *this, LevelChunk *);\n  void (__fastcall *hintDiscardBatchBegin)(ChunkSource *this);\n  void (__fastcall *hintDiscardBatchEnd)(ChunkSource *this);\n  void (__fastcall *acquireDiscarded)(ChunkSource *this, std::unique_ptr<LevelChunk,LevelChunkFinalDeleter>);\n  void (__fastcall *compact)(ChunkSource *this);\n  void (__fastcall *flushPendingWrites)(ChunkSource *this);\n  bool (__fastcall *isWithinWorldLimit)(ChunkSource *this, const ChunkPos *);\n  const std::unordered_map<ChunkPos,std::weak_ptr<LevelChunk>> *(__fastcall *getChunkMap)(ChunkSource *this);\n  const std::unordered_map<ChunkPos,std::weak_ptr<LevelChunk>> *(__fastcall *getStorage)(ChunkSource *this);\n  void (__fastcall *clearDeletedEntities)(ChunkSource *this);\n  void (__fastcall *removeDimensionData)(ChunkSource *this, const std::unordered_set<AutomaticID<Dimension,int>> *);\n  bool (__fastcall *hasChunk)(ChunkSource *this, const ChunkPos *, AutomaticID<Dimension,int>);\n  bool (__fastcall *canCreateViews)(ChunkSource *this);\n};\n\n")])])]),a("h3",{attrs:{id:"twistingvinesclusterfeature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#twistingvinesclusterfeature"}},[t._v("#")]),t._v(" "),a("code",[t._v("TwistingVinesClusterFeature")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TwistingVinesClusterFeature : Feature\n{\n};\n\n")])])]),a("h3",{attrs:{id:"twistingvinesclusterfeature-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#twistingvinesclusterfeature-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TwistingVinesClusterFeature_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TwistingVinesClusterFeature_vtbl\n{\n  void (__fastcall *~IFeature)(IFeature *this);\n  std::optional<BlockPos> *(__fastcall *place)(IFeature *this, std::optional<BlockPos> *result, IBlockWorldGenAPI *, const BlockPos *, Random *, RenderParams *);\n  std::string *(__fastcall *getStructureName)(IFeature *this, std::string *result);\n  bool (__fastcall *parse)(IFeature *this, const rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> > *, IWorldRegistriesProvider *);\n  bool (__fastcall *place)(Feature *this, BlockSource *, const BlockPos *, Random *);\n};\n\n")])])]),a("h3",{attrs:{id:"trunkvariantbuilder-buildtrunkvariant-l2-lambda-6d9a4349d26e94dea794c1fdacfc3b13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trunkvariantbuilder-buildtrunkvariant-l2-lambda-6d9a4349d26e94dea794c1fdacfc3b13"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrunkVariantBuilder::buildTrunkVariant::__l2::<lambda_6d9a4349d26e94dea794c1fdacfc3b13>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TrunkVariantBuilder::buildTrunkVariant::__l2::<lambda_6d9a4349d26e94dea794c1fdacfc3b13>\n{\n  std::function<ITreeTrunkWrapper & __cdecl(FeatureLoading::ConcreteFeatureHolder<VanillaTreeFeature> *)> trunkAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"trunkvariantbuilder-buildtrunkvariant-l2-lambda-2891af02dc87b30718ec6f87b7028bd4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trunkvariantbuilder-buildtrunkvariant-l2-lambda-2891af02dc87b30718ec6f87b7028bd4"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrunkVariantBuilder::buildTrunkVariant::__l2::<lambda_2891af02dc87b30718ec6f87b7028bd4>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TrunkVariantBuilder::buildTrunkVariant::__l2::<lambda_2891af02dc87b30718ec6f87b7028bd4>\n{\n  std::function<ITreeTrunkWrapper & __cdecl(FeatureLoading::ConcreteFeatureHolder<VanillaTreeFeature> *)> trunkAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"trunkvariantbuilder-buildtrunkvariant-l2-lambda-298c2fc108d44315676cf647fb15a899"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trunkvariantbuilder-buildtrunkvariant-l2-lambda-298c2fc108d44315676cf647fb15a899"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrunkVariantBuilder::buildTrunkVariant::__l2::<lambda_298c2fc108d44315676cf647fb15a899>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TrunkVariantBuilder::buildTrunkVariant::__l2::<lambda_298c2fc108d44315676cf647fb15a899>\n{\n  std::function<ITreeTrunkWrapper & __cdecl(FeatureLoading::ConcreteFeatureHolder<VanillaTreeFeature> *)> trunkAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"trunkvariantbuilder-buildtrunkvariant-l2-lambda-4c94e9e62cef84b17089b42c799f1b62"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trunkvariantbuilder-buildtrunkvariant-l2-lambda-4c94e9e62cef84b17089b42c799f1b62"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrunkVariantBuilder::buildTrunkVariant::__l2::<lambda_4c94e9e62cef84b17089b42c799f1b62>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TrunkVariantBuilder::buildTrunkVariant::__l2::<lambda_4c94e9e62cef84b17089b42c799f1b62>\n{\n  std::function<ITreeTrunkWrapper & __cdecl(FeatureLoading::ConcreteFeatureHolder<VanillaTreeFeature> *)> trunkAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-treeparams-buildschema-l2-lambda-04126ab3841162f070846e248505fe78"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-treeparams-buildschema-l2-lambda-04126ab3841162f070846e248505fe78"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::TreeParams::buildSchema::__l2::<lambda_04126ab3841162f070846e248505fe78>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::TreeParams::buildSchema::__l2::<lambda_04126ab3841162f070846e248505fe78>\n{\n  std::function<TreeHelper::TreeParams & __cdecl(FeatureLoading::ConcreteFeatureHolder<VanillaTreeFeature> *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-treeparams-buildschema-l2-lambda-93c22a781df6dc6af71b4dd5e0b171f1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-treeparams-buildschema-l2-lambda-93c22a781df6dc6af71b4dd5e0b171f1"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::TreeParams::buildSchema::__l2::<lambda_93c22a781df6dc6af71b4dd5e0b171f1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::TreeParams::buildSchema::__l2::<lambda_93c22a781df6dc6af71b4dd5e0b171f1>\n{\n  std::function<TreeHelper::TreeParams & __cdecl(FeatureLoading::ConcreteFeatureHolder<VanillaTreeFeature> *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-treeparams-buildschema-l2-lambda-ffd665e99d41506084ffb05e0bc3a630"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-treeparams-buildschema-l2-lambda-ffd665e99d41506084ffb05e0bc3a630"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::TreeParams::buildSchema::__l2::<lambda_ffd665e99d41506084ffb05e0bc3a630>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::TreeParams::buildSchema::__l2::<lambda_ffd665e99d41506084ffb05e0bc3a630>\n{\n  std::function<TreeHelper::TreeParams & __cdecl(FeatureLoading::ConcreteFeatureHolder<VanillaTreeFeature> *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-treeparams-buildschema-l3-lambda-a7906fd49315030a86f3708933d5a526"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-treeparams-buildschema-l3-lambda-a7906fd49315030a86f3708933d5a526"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::TreeParams::buildSchema::__l3::<lambda_a7906fd49315030a86f3708933d5a526>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::TreeParams::buildSchema::__l3::<lambda_a7906fd49315030a86f3708933d5a526>\n{\n  std::function<TreeHelper::TreeParams & __cdecl(FeatureLoading::ConcreteFeatureHolder<VanillaTreeFeature> *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-treeparams-buildschema-l3-lambda-20a3db3713487e2e69fdcaad7b950e8e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-treeparams-buildschema-l3-lambda-20a3db3713487e2e69fdcaad7b950e8e"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::TreeParams::buildSchema::__l3::<lambda_20a3db3713487e2e69fdcaad7b950e8e>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::TreeParams::buildSchema::__l3::<lambda_20a3db3713487e2e69fdcaad7b950e8e>\n{\n  std::function<TreeHelper::TreeParams & __cdecl(FeatureLoading::ConcreteFeatureHolder<VanillaTreeFeature> *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-8db1885130e9761bfd1f5d45a532424c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-8db1885130e9761bfd1f5d45a532424c"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_8db1885130e9761bfd1f5d45a532424c>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_8db1885130e9761bfd1f5d45a532424c>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(SimpleTreeTrunk *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-6532a13bf9bbe1c02a4010743d3008b0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-6532a13bf9bbe1c02a4010743d3008b0"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_6532a13bf9bbe1c02a4010743d3008b0>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_6532a13bf9bbe1c02a4010743d3008b0>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(SimpleTreeTrunk *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-85bae5b79c8184c2116d8fc5da3d0e07"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-85bae5b79c8184c2116d8fc5da3d0e07"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_85bae5b79c8184c2116d8fc5da3d0e07>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_85bae5b79c8184c2116d8fc5da3d0e07>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(MegaTreeTrunk *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-ea5db8857e8fb58674ec19b155c943c9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-ea5db8857e8fb58674ec19b155c943c9"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_ea5db8857e8fb58674ec19b155c943c9>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_ea5db8857e8fb58674ec19b155c943c9>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(MegaTreeTrunk *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-8d488a2c84209dd0831ffb054e5850e6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-8d488a2c84209dd0831ffb054e5850e6"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_8d488a2c84209dd0831ffb054e5850e6>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_8d488a2c84209dd0831ffb054e5850e6>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(FallenTreeTrunk *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-6d2a08d73f83e3ab1661efe36a98ace1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-6d2a08d73f83e3ab1661efe36a98ace1"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_6d2a08d73f83e3ab1661efe36a98ace1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_6d2a08d73f83e3ab1661efe36a98ace1>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(FallenTreeTrunk *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-61a38999c743ca7361dc2e73d0aaff62"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-61a38999c743ca7361dc2e73d0aaff62"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_61a38999c743ca7361dc2e73d0aaff62>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_61a38999c743ca7361dc2e73d0aaff62>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(AcaciaTreeTrunk *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-7eb97c3261170c5e4b05f8dd225213fd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-7eb97c3261170c5e4b05f8dd225213fd"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_7eb97c3261170c5e4b05f8dd225213fd>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_7eb97c3261170c5e4b05f8dd225213fd>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(AcaciaTreeTrunk *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-08e01a5f67d647a919dd40f16a254eca"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-08e01a5f67d647a919dd40f16a254eca"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_08e01a5f67d647a919dd40f16a254eca>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_08e01a5f67d647a919dd40f16a254eca>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(SimpleTreeCanopy *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-33302b0860d3bfb4716cc13d3364c310"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-33302b0860d3bfb4716cc13d3364c310"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_33302b0860d3bfb4716cc13d3364c310>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_33302b0860d3bfb4716cc13d3364c310>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(SimpleTreeCanopy *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-db6354e9b07bcb09c3bb7e2f25399ac4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-db6354e9b07bcb09c3bb7e2f25399ac4"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_db6354e9b07bcb09c3bb7e2f25399ac4>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_db6354e9b07bcb09c3bb7e2f25399ac4>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(SimpleTreeCanopy *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-61e95202bfc74f0d4a7ca173ac48da7f"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-61e95202bfc74f0d4a7ca173ac48da7f"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_61e95202bfc74f0d4a7ca173ac48da7f>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_61e95202bfc74f0d4a7ca173ac48da7f>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(SimpleTreeCanopy *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-abae1b4ad9f5adc8002c7f845728efe6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-abae1b4ad9f5adc8002c7f845728efe6"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_abae1b4ad9f5adc8002c7f845728efe6>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_abae1b4ad9f5adc8002c7f845728efe6>\n{\n  std::function<TreeHelper::AttachableDecoration & __cdecl(SimpleTreeCanopy *)> paramAccessor;\n};\n\n")])])]),a("h3",{attrs:{id:"transformationmixerlayer-weightedbiomeattributes-rivertransformation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformationmixerlayer-weightedbiomeattributes-rivertransformation"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformationMixerLayer<WeightedBiomeAttributes<RiverTransformation> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TransformationMixerLayer<WeightedBiomeAttributes<RiverTransformation> > : MixerLayer<Biome *,Biome *,bool>\n{\n  Biome *mDefaultTransformation;\n};\n\n")])])]),a("h3",{attrs:{id:"transformationmixerlayer-weightedbiomeattributes-rivertransformation-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformationmixerlayer-weightedbiomeattributes-rivertransformation-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformationMixerLayer<WeightedBiomeAttributes<RiverTransformation> >_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TransformationMixerLayer<WeightedBiomeAttributes<RiverTransformation> >_vtbl\n{\n  void (__fastcall *~LayerBase)(LayerDetails::LayerBase *this);\n  void (__fastcall *init)(LayerDetails::LayerBase *this, __int64);\n  LayerDetails::TransferData<Biome *> *(__fastcall *_allocateAndFill)(Layer<Biome *> *this, LayerDetails::TransferData<Biome *> *result, unsigned __int64, int, int, unsigned int, unsigned int);\n  void (__fastcall *_fillArea)(MixerLayer<Biome *,Biome *,bool> *this, LayerDetails::WorkingData<Biome *,Biome *> *, int, int, int, int, int, LayerResult<bool>);\n  std::tuple<int,int,unsigned int,unsigned int> *(__fastcall *_getAreaRead)(MixerLayer<Biome *,Biome *,bool> *this, std::tuple<int,int,unsigned int,unsigned int> *result, int, int, unsigned int, unsigned int);\n};\n\n")])])]),a("h3",{attrs:{id:"touchtextbuttoncontrol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchtextbuttoncontrol"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchTextButtonControl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TouchTextButtonControl : TouchGlyphButtonControl\n{\n  std::function<glm::tvec2<float,0> __cdecl(void)> mPosition;\n  std::function<std::string __cdecl(void)> mLabel;\n  glm::tvec2<float,0> mCurrentPosition;\n  RectangleArea mCurrentRect;\n};\n\n")])])]),a("h3",{attrs:{id:"touchtextbuttoncontrol-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchtextbuttoncontrol-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchTextButtonControl_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TouchTextButtonControl_vtbl\n{\n  void (__fastcall *~TouchControl)(TouchControl *this);\n  void (__fastcall *render)(TouchControl *this, InputRenderContext *);\n  void (__fastcall *tick)(TouchControl *this, InputEventQueue *, TouchPointResults *, int);\n  void (__fastcall *release)(TouchControl *this, InputEventQueue *);\n};\n\n")])])]),a("h3",{attrs:{id:"touchtextbuttoncontrol-lambda-d981cd7e616c973c1d1b4f1442f5f224"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchtextbuttoncontrol-lambda-d981cd7e616c973c1d1b4f1442f5f224"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchTextButtonControl::<lambda_d981cd7e616c973c1d1b4f1442f5f224>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TouchTextButtonControl::<lambda_d981cd7e616c973c1d1b4f1442f5f224>\n{\n  TouchTextButtonControl *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"touchguipassthroughcontrol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchguipassthroughcontrol"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchGuiPassthroughControl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TouchGuiPassthroughControl : TouchControl\n{\n  ButtonState mButtonState;\n  const unsigned int mButtonId;\n};\n\n")])])]),a("h3",{attrs:{id:"touchguipassthroughcontrol-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchguipassthroughcontrol-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchGuiPassthroughControl_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TouchGuiPassthroughControl_vtbl\n{\n  void (__fastcall *~TouchControl)(TouchControl *this);\n  void (__fastcall *render)(TouchControl *this, InputRenderContext *);\n  void (__fastcall *tick)(TouchControl *this, InputEventQueue *, TouchPointResults *, int);\n  void (__fastcall *release)(TouchControl *this, InputEventQueue *);\n};\n\n")])])]),a("h3",{attrs:{id:"threaddatainterface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threaddatainterface"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThreadDataInterface")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ThreadDataInterface\n{\n  ThreadDataInterface_vtbl *__vftable /*VFT*/;\n};\n\n")])])]),a("h3",{attrs:{id:"threaddatainterface-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threaddatainterface-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThreadDataInterface_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ThreadDataInterface_vtbl\n{\n  void (__fastcall *~ThreadDataInterface)(ThreadDataInterface *this);\n  void *(__fastcall *PerThreadFactory)(ThreadDataInterface *this, void *);\n  void (__fastcall *PerThreadDestructor)(ThreadDataInterface *this, void *, void *);\n};\n\n")])])]),a("h3",{attrs:{id:"threadpool-raknet-filelisttransfer-threaddata-int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadpool-raknet-filelisttransfer-threaddata-int"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThreadPool<RakNet::FileListTransfer::ThreadData,int>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ThreadPool<RakNet::FileListTransfer::ThreadData,int>\n{\n  RakNet::SimpleMutex inputQueueMutex;\n  RakNet::SimpleMutex outputQueueMutex;\n  RakNet::SimpleMutex workingThreadCountMutex;\n  RakNet::SimpleMutex runThreadsMutex;\n  void *(__fastcall *perThreadDataFactory)();\n  void (__fastcall *perThreadDataDestructor)(void *);\n  DataStructures::Queue<int (__cdecl*)(RakNet::FileListTransfer::ThreadData,bool *,void *)> inputFunctionQueue;\n  DataStructures::Queue<RakNet::FileListTransfer::ThreadData> inputQueue;\n  DataStructures::Queue<int> outputQueue;\n  ThreadDataInterface *threadDataInterface;\n  void *tdiContext;\n  bool runThreads;\n  int numThreadsRunning;\n  int numThreadsWorking;\n  RakNet::SimpleMutex numThreadsRunningMutex;\n  RakNet::SignaledEvent quitAndIncomingDataEvents;\n};\n\n")])])]),a("h3",{attrs:{id:"timezone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timezone"}},[t._v("#")]),t._v(" "),a("code",[t._v("timezone")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct timezone\n{\n  int tz_minuteswest;\n  int tz_dsttime;\n};\n\n")])])]),a("h3",{attrs:{id:"timeb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timeb"}},[t._v("#")]),t._v(" "),a("code",[t._v("timeb")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(4)) timeb\n{\n  __int64 time;\n  unsigned __int16 millitm;\n  __int16 timezone;\n  __int16 dstflag;\n};\n\n")])])]),a("h3",{attrs:{id:"texteditfocuscontroller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#texteditfocuscontroller"}},[t._v("#")]),t._v(" "),a("code",[t._v("TextEditFocusController")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) TextEditFocusController\n{\n  std::function<void __cdecl(std::string const &,int,bool,bool,glm::tvec2<float,0> const &,bool)> mShowCallback;\n  std::function<void __cdecl(void)> mHideCallback;\n  std::function<void __cdecl(std::string const &)> mUpdateCallback;\n  bool mShowOnFocus;\n  bool mFocused;\n  bool mSelected;\n};\n\n")])])]),a("h3",{attrs:{id:"taskdetails-backgroundtaskdetails-taskresult-void-void"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskdetails-backgroundtaskdetails-taskresult-void-void"}},[t._v("#")]),t._v(" "),a("code",[t._v("TaskDetails::BackgroundTaskDetails<TaskResult,void,void>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TaskDetails::BackgroundTaskDetails<TaskResult,void,void> : Bedrock::Threading::IAsyncResult<void>\n{\n  std::function<TaskResult __cdecl(void)> mTask;\n};\n\n")])])]),a("h3",{attrs:{id:"taskdetails-backgroundtaskdetails-taskresult-void-void-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskdetails-backgroundtaskdetails-taskresult-void-void-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TaskDetails::BackgroundTaskDetails<TaskResult,void,void>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TaskDetails::BackgroundTaskDetails<TaskResult,void,void>_vtbl\n{\n  void (__fastcall *~IAsyncResult<void>)(Bedrock::Threading::IAsyncResult<void> *this);\n  Bedrock::Threading::AsyncStatus (__fastcall *getStatus)(Bedrock::Threading::IAsyncResult<void> *this);\n  std::error_code *(__fastcall *getError)(Bedrock::Threading::IAsyncResult<void> *this, std::error_code *result);\n  std::exception_ptr *(__fastcall *getException)(Bedrock::Threading::IAsyncResult<void> *this, std::exception_ptr *result);\n  void (__fastcall *cancel)(Bedrock::Threading::IAsyncResult<void> *this);\n  void (__fastcall *addOnComplete)(Bedrock::Threading::IAsyncResult<void> *this, std::function<void __cdecl(Bedrock::Threading::IAsyncResult<void> const &)>);\n};\n\n")])])]),a("h3",{attrs:{id:"taskdetails-backgroundtaskdetails-void-void-void"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskdetails-backgroundtaskdetails-void-void-void"}},[t._v("#")]),t._v(" "),a("code",[t._v("TaskDetails::BackgroundTaskDetails<void,void,void>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TaskDetails::BackgroundTaskDetails<void,void,void> : Bedrock::Threading::IAsyncResult<void>\n{\n  std::function<void __cdecl(void)> mTask;\n};\n\n")])])]),a("h3",{attrs:{id:"taskdetails-backgroundtaskdetails-void-void-void-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskdetails-backgroundtaskdetails-void-void-void-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TaskDetails::BackgroundTaskDetails<void,void,void>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TaskDetails::BackgroundTaskDetails<void,void,void>_vtbl\n{\n  void (__fastcall *~IAsyncResult<void>)(Bedrock::Threading::IAsyncResult<void> *this);\n  Bedrock::Threading::AsyncStatus (__fastcall *getStatus)(Bedrock::Threading::IAsyncResult<void> *this);\n  std::error_code *(__fastcall *getError)(Bedrock::Threading::IAsyncResult<void> *this, std::error_code *result);\n  std::exception_ptr *(__fastcall *getException)(Bedrock::Threading::IAsyncResult<void> *this, std::exception_ptr *result);\n  void (__fastcall *cancel)(Bedrock::Threading::IAsyncResult<void> *this);\n  void (__fastcall *addOnComplete)(Bedrock::Threading::IAsyncResult<void> *this, std::function<void __cdecl(Bedrock::Threading::IAsyncResult<void> const &)>);\n};\n\n")])])]),a("h3",{attrs:{id:"taskgroup-flush-l24-lambda-f858309b3640be0291f38b673f2e0168"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskgroup-flush-l24-lambda-f858309b3640be0291f38b673f2e0168"}},[t._v("#")]),t._v(" "),a("code",[t._v("TaskGroup::flush::__l24::<lambda_f858309b3640be0291f38b673f2e0168>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TaskGroup::flush::__l24::<lambda_f858309b3640be0291f38b673f2e0168>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"taskgroup-resume-l2-lambda-22aee7be42bb8fb01cff1768f3f0c0b9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskgroup-resume-l2-lambda-22aee7be42bb8fb01cff1768f3f0c0b9"}},[t._v("#")]),t._v(" "),a("code",[t._v("TaskGroup::resume::__l2::<lambda_22aee7be42bb8fb01cff1768f3f0c0b9>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TaskGroup::resume::__l2::<lambda_22aee7be42bb8fb01cff1768f3f0c0b9>\n{\n  TaskGroup *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"taskgroup-resume-l2-lambda-22aee7be42bb8fb01cff1768f3f0c0b9-l2-lambda-d91f59a878019cd825e76c11990156bd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskgroup-resume-l2-lambda-22aee7be42bb8fb01cff1768f3f0c0b9-l2-lambda-d91f59a878019cd825e76c11990156bd"}},[t._v("#")]),t._v(" "),a("code",[t._v("TaskGroup::resume::__l2::<lambda_22aee7be42bb8fb01cff1768f3f0c0b9>::()::__l2::<lambda_d91f59a878019cd825e76c11990156bd>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TaskGroup::resume::__l2::<lambda_22aee7be42bb8fb01cff1768f3f0c0b9>::()::__l2::<lambda_d91f59a878019cd825e76c11990156bd>\n{\n  TaskGroup *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-gasprangerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-gasprangerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_GaspRangeRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_GaspRangeRec_\n{\n  unsigned __int16 maxPPEM;\n  unsigned __int16 gaspFlag;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-post-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-post-25"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_Post_25_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_Post_25_\n{\n  unsigned __int16 num_glyphs;\n  char *offsets;\n};\n\n")])])]),a("h3",{attrs:{id:"ttc-headerrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ttc-headerrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TTC_HeaderRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TTC_HeaderRec_\n{\n  unsigned int tag;\n  int version;\n  int count;\n  unsigned int *offsets;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-tablerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-tablerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_TableRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_TableRec_\n{\n  unsigned int Tag;\n  unsigned int CheckSum;\n  unsigned int Offset;\n  unsigned int Length;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-header"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_Header_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(4)) TT_Header_\n{\n  int Table_Version;\n  int Font_Revision;\n  int CheckSum_Adjust;\n  int Magic_Number;\n  unsigned __int16 Flags;\n  unsigned __int16 Units_Per_EM;\n  unsigned int Created[2];\n  unsigned int Modified[2];\n  __int16 xMin;\n  __int16 yMin;\n  __int16 xMax;\n  __int16 yMax;\n  unsigned __int16 Mac_Style;\n  unsigned __int16 Lowest_Rec_PPEM;\n  __int16 Font_Direction;\n  __int16 Index_To_Loc_Format;\n  __int16 Glyph_Data_Format;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-horiheader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-horiheader"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_HoriHeader_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_HoriHeader_\n{\n  int Version;\n  __int16 Ascender;\n  __int16 Descender;\n  __int16 Line_Gap;\n  unsigned __int16 advance_Width_Max;\n  __int16 min_Left_Side_Bearing;\n  __int16 min_Right_Side_Bearing;\n  __int16 xMax_Extent;\n  __int16 caret_Slope_Rise;\n  __int16 caret_Slope_Run;\n  __int16 caret_Offset;\n  __int16 Reserved[4];\n  __int16 metric_Data_Format;\n  unsigned __int16 number_Of_HMetrics;\n  void *long_metrics;\n  void *short_metrics;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-maxprofile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-maxprofile"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_MaxProfile_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_MaxProfile_\n{\n  int version;\n  unsigned __int16 numGlyphs;\n  unsigned __int16 maxPoints;\n  unsigned __int16 maxContours;\n  unsigned __int16 maxCompositePoints;\n  unsigned __int16 maxCompositeContours;\n  unsigned __int16 maxZones;\n  unsigned __int16 maxTwilightPoints;\n  unsigned __int16 maxStorage;\n  unsigned __int16 maxFunctionDefs;\n  unsigned __int16 maxInstructionDefs;\n  unsigned __int16 maxStackElements;\n  unsigned __int16 maxSizeOfInstructions;\n  unsigned __int16 maxComponentElements;\n  unsigned __int16 maxComponentDepth;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-vertheader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-vertheader"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_VertHeader_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_VertHeader_\n{\n  int Version;\n  __int16 Ascender;\n  __int16 Descender;\n  __int16 Line_Gap;\n  unsigned __int16 advance_Height_Max;\n  __int16 min_Top_Side_Bearing;\n  __int16 min_Bottom_Side_Bearing;\n  __int16 yMax_Extent;\n  __int16 caret_Slope_Rise;\n  __int16 caret_Slope_Run;\n  __int16 caret_Offset;\n  __int16 Reserved[4];\n  __int16 metric_Data_Format;\n  unsigned __int16 number_Of_VMetrics;\n  void *long_metrics;\n  void *short_metrics;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-namerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-namerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_NameRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_NameRec_\n{\n  unsigned __int16 platformID;\n  unsigned __int16 encodingID;\n  unsigned __int16 languageID;\n  unsigned __int16 nameID;\n  unsigned __int16 stringLength;\n  unsigned int stringOffset;\n  unsigned __int8 *string;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-langtagrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-langtagrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_LangTagRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_LangTagRec_\n{\n  unsigned __int16 stringLength;\n  unsigned int stringOffset;\n  unsigned __int8 *string;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-nametablerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-nametablerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_NameTableRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_NameTableRec_\n{\n  unsigned __int16 format;\n  unsigned int numNameRecords;\n  unsigned int storageOffset;\n  TT_NameRec_ *names;\n  unsigned int numLangTagRecords;\n  TT_LangTagRec_ *langTags;\n  FT_StreamRec_ *stream;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-os2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-os2"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_OS2_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(4)) TT_OS2_\n{\n  unsigned __int16 version;\n  __int16 xAvgCharWidth;\n  unsigned __int16 usWeightClass;\n  unsigned __int16 usWidthClass;\n  unsigned __int16 fsType;\n  __int16 ySubscriptXSize;\n  __int16 ySubscriptYSize;\n  __int16 ySubscriptXOffset;\n  __int16 ySubscriptYOffset;\n  __int16 ySuperscriptXSize;\n  __int16 ySuperscriptYSize;\n  __int16 ySuperscriptXOffset;\n  __int16 ySuperscriptYOffset;\n  __int16 yStrikeoutSize;\n  __int16 yStrikeoutPosition;\n  __int16 sFamilyClass;\n  unsigned __int8 panose[10];\n  unsigned int ulUnicodeRange1;\n  unsigned int ulUnicodeRange2;\n  unsigned int ulUnicodeRange3;\n  unsigned int ulUnicodeRange4;\n  char achVendID[4];\n  unsigned __int16 fsSelection;\n  unsigned __int16 usFirstCharIndex;\n  unsigned __int16 usLastCharIndex;\n  __int16 sTypoAscender;\n  __int16 sTypoDescender;\n  __int16 sTypoLineGap;\n  unsigned __int16 usWinAscent;\n  unsigned __int16 usWinDescent;\n  unsigned int ulCodePageRange1;\n  unsigned int ulCodePageRange2;\n  __int16 sxHeight;\n  __int16 sCapHeight;\n  unsigned __int16 usDefaultChar;\n  unsigned __int16 usBreakChar;\n  unsigned __int16 usMaxContext;\n  unsigned __int16 usLowerOpticalPointSize;\n  unsigned __int16 usUpperOpticalPointSize;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-postscript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-postscript"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_Postscript_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_Postscript_\n{\n  int FormatType;\n  int italicAngle;\n  __int16 underlinePosition;\n  __int16 underlineThickness;\n  unsigned int isFixedPitch;\n  unsigned int minMemType42;\n  unsigned int maxMemType42;\n  unsigned int minMemType1;\n  unsigned int maxMemType1;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-facerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-facerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_FaceRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_FaceRec_\n{\n  FT_FaceRec_ root;\n  TTC_HeaderRec_ ttc_header;\n  unsigned int format_tag;\n  unsigned __int16 num_tables;\n  TT_TableRec_ *dir_tables;\n  TT_Header_ header;\n  TT_HoriHeader_ horizontal;\n  TT_MaxProfile_ max_profile;\n  unsigned __int8 vertical_info;\n  TT_VertHeader_ vertical;\n  unsigned __int16 num_names;\n  TT_NameTableRec_ name_table;\n  TT_OS2_ os2;\n  TT_Postscript_ postscript;\n  unsigned __int8 *cmap_table;\n  unsigned int cmap_size;\n  int (__fastcall *goto_table)(TT_FaceRec_ *, unsigned int, FT_StreamRec_ *, unsigned int *);\n  int (__fastcall *access_glyph_frame)(TT_LoaderRec_ *, unsigned int, unsigned int, unsigned int);\n  void (__fastcall *forget_glyph_frame)(TT_LoaderRec_ *);\n  int (__fastcall *read_glyph_header)(TT_LoaderRec_ *);\n  int (__fastcall *read_simple_glyph)(TT_LoaderRec_ *);\n  int (__fastcall *read_composite_glyph)(TT_LoaderRec_ *);\n  void *sfnt;\n  void *psnames;\n  void *mm;\n  void *var;\n  void *psaux;\n  TT_Gasp_ gasp;\n  TT_PCLT_ pclt;\n  unsigned int num_sbit_scales;\n  TT_SBit_ScaleRec_ *sbit_scales;\n  TT_Post_NamesRec_ postscript_names;\n  FT_Palette_Data_ palette_data;\n  unsigned __int16 palette_index;\n  FT_Color_ *palette;\n  unsigned __int8 have_foreground_color;\n  FT_Color_ foreground_color;\n  unsigned int font_program_size;\n  unsigned __int8 *font_program;\n  unsigned int cvt_program_size;\n  unsigned __int8 *cvt_program;\n  unsigned int cvt_size;\n  int *cvt;\n  int (__fastcall *interpreter)(void *);\n  FT_Generic_ extra;\n  const char *postscript_name;\n  unsigned int glyf_len;\n  unsigned int glyf_offset;\n  unsigned __int8 is_cff2;\n  unsigned __int8 doblend;\n  GX_BlendRec_ *blend;\n  unsigned int variation_support;\n  const char *var_postscript_prefix;\n  unsigned int var_postscript_prefix_len;\n  unsigned int horz_metrics_size;\n  unsigned int vert_metrics_size;\n  unsigned int num_locations;\n  unsigned __int8 *glyph_locations;\n  unsigned __int8 *hdmx_table;\n  unsigned int hdmx_table_size;\n  unsigned int hdmx_record_count;\n  unsigned int hdmx_record_size;\n  unsigned __int8 *hdmx_record_sizes;\n  unsigned __int8 *sbit_table;\n  unsigned int sbit_table_size;\n  TT_SbitTableType_ sbit_table_type;\n  unsigned int sbit_num_strikes;\n  unsigned int *sbit_strike_map;\n  unsigned __int8 *kern_table;\n  unsigned int kern_table_size;\n  unsigned int num_kern_tables;\n  unsigned int kern_avail_bits;\n  unsigned int kern_order_bits;\n  TT_BDFRec_ bdf;\n  unsigned int horz_metrics_offset;\n  unsigned int vert_metrics_offset;\n  unsigned int ebdt_start;\n  unsigned int ebdt_size;\n  void *cpal;\n  void *colr;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-size-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-size-metrics"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_Size_Metrics_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(2)) TT_Size_Metrics_\n{\n  int x_ratio;\n  int y_ratio;\n  unsigned __int16 ppem;\n  int ratio;\n  int scale;\n  int compensations[4];\n  unsigned __int8 valid;\n  unsigned __int8 rotated;\n  unsigned __int8 stretched;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-defrecord"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-defrecord"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_DefRecord_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_DefRecord_\n{\n  int range;\n  int start;\n  int end;\n  unsigned int opc;\n  unsigned __int8 active;\n  unsigned __int8 inline_delta;\n  unsigned int sph_fdef_flags;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-coderange"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-coderange"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_CodeRange_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) TT_CodeRange_\n{\n  unsigned __int8 *base;\n  int size;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-sizerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-sizerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_SizeRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_SizeRec_\n{\n  FT_SizeRec_ root;\n  FT_Size_Metrics_ *metrics;\n  FT_Size_Metrics_ hinted_metrics;\n  TT_Size_Metrics_ ttmetrics;\n  unsigned int strike_index;\n  int point_size;\n  unsigned int num_function_defs;\n  unsigned int max_function_defs;\n  TT_DefRecord_ *function_defs;\n  unsigned int num_instruction_defs;\n  unsigned int max_instruction_defs;\n  TT_DefRecord_ *instruction_defs;\n  unsigned int max_func;\n  unsigned int max_ins;\n  TT_CodeRange_ codeRangeTable[3];\n  TT_GraphicsState_ GS;\n  unsigned int cvt_size;\n  int *cvt;\n  unsigned __int16 storage_size;\n  int *storage;\n  TT_GlyphZoneRec_ twilight;\n  TT_ExecContextRec_ *context;\n  int bytecode_ready;\n  int cvt_ready;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-callrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-callrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_CallRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_CallRec_\n{\n  int Caller_Range;\n  int Caller_IP;\n  int Cur_Count;\n  TT_DefRecord_ *Def;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-execcontextrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-execcontextrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_ExecContextRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_ExecContextRec_\n{\n  TT_FaceRec_ *face;\n  TT_SizeRec_ *size;\n  FT_MemoryRec_ *memory;\n  int error;\n  int top;\n  int stackSize;\n  int *stack;\n  int args;\n  int new_top;\n  TT_GlyphZoneRec_ zp0;\n  TT_GlyphZoneRec_ zp1;\n  TT_GlyphZoneRec_ zp2;\n  TT_GlyphZoneRec_ pts;\n  TT_GlyphZoneRec_ twilight;\n  int pointSize;\n  FT_Size_Metrics_ metrics;\n  TT_Size_Metrics_ tt_metrics;\n  TT_GraphicsState_ GS;\n  int curRange;\n  unsigned __int8 *code;\n  int IP;\n  int codeSize;\n  unsigned __int8 opcode;\n  int length;\n  unsigned __int8 step_ins;\n  unsigned int cvtSize;\n  int *cvt;\n  unsigned int glyphSize;\n  unsigned __int8 *glyphIns;\n  unsigned int numFDefs;\n  unsigned int maxFDefs;\n  TT_DefRecord_ *FDefs;\n  unsigned int numIDefs;\n  unsigned int maxIDefs;\n  TT_DefRecord_ *IDefs;\n  unsigned int maxFunc;\n  unsigned int maxIns;\n  int callTop;\n  int callSize;\n  TT_CallRec_ *callStack;\n  unsigned __int16 maxPoints;\n  __int16 maxContours;\n  TT_CodeRange_ codeRangeTable[3];\n  unsigned __int16 storeSize;\n  int *storage;\n  int period;\n  int phase;\n  int threshold;\n  unsigned __int8 instruction_trap;\n  TT_GraphicsState_ default_GS;\n  unsigned __int8 is_composite;\n  unsigned __int8 pedantic_hinting;\n  int F_dot_P;\n  int (__fastcall *func_round)(TT_ExecContextRec_ *, int, int);\n  int (__fastcall *func_project)(TT_ExecContextRec_ *, int, int);\n  int (__fastcall *func_dualproj)(TT_ExecContextRec_ *, int, int);\n  int (__fastcall *func_freeProj)(TT_ExecContextRec_ *, int, int);\n  void (__fastcall *func_move)(TT_ExecContextRec_ *, TT_GlyphZoneRec_ *, unsigned __int16, int);\n  void (__fastcall *func_move_orig)(TT_ExecContextRec_ *, TT_GlyphZoneRec_ *, unsigned __int16, int);\n  int (__fastcall *func_cur_ppem)(TT_ExecContextRec_ *);\n  int (__fastcall *func_read_cvt)(TT_ExecContextRec_ *, unsigned int);\n  void (__fastcall *func_write_cvt)(TT_ExecContextRec_ *, unsigned int, int);\n  void (__fastcall *func_move_cvt)(TT_ExecContextRec_ *, unsigned int, int);\n  unsigned __int8 grayscale;\n  unsigned __int8 subpixel_hinting_lean;\n  unsigned __int8 vertical_lcd_lean;\n  unsigned __int8 backward_compatibility;\n  unsigned __int8 iupx_called;\n  unsigned __int8 iupy_called;\n  unsigned __int8 grayscale_cleartype;\n  unsigned int loopcall_counter;\n  unsigned int loopcall_counter_max;\n  unsigned int neg_jump_counter;\n  unsigned int neg_jump_counter_max;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-gasp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-gasp"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_Gasp_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_Gasp_\n{\n  unsigned __int16 version;\n  unsigned __int16 numRanges;\n  TT_GaspRangeRec_ *gaspRanges;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-pclt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-pclt"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_PCLT_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(4)) TT_PCLT_\n{\n  int Version;\n  unsigned int FontNumber;\n  unsigned __int16 Pitch;\n  unsigned __int16 xHeight;\n  unsigned __int16 Style;\n  unsigned __int16 TypeFamily;\n  unsigned __int16 CapHeight;\n  unsigned __int16 SymbolSet;\n  char TypeFace[16];\n  char CharacterComplement[8];\n  char FileName[6];\n  char StrokeWeight;\n  char WidthType;\n  unsigned __int8 SerifStyle;\n  unsigned __int8 Reserved;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-sbit-linemetricsrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-sbit-linemetricsrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_SBit_LineMetricsRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_SBit_LineMetricsRec_\n{\n  char ascender;\n  char descender;\n  unsigned __int8 max_width;\n  char caret_slope_numerator;\n  char caret_slope_denominator;\n  char caret_offset;\n  char min_origin_SB;\n  char min_advance_SB;\n  char max_before_BL;\n  char min_after_BL;\n  char pads[2];\n};\n\n")])])]),a("h3",{attrs:{id:"tt-sbit-scalerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-sbit-scalerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_SBit_ScaleRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_SBit_ScaleRec_\n{\n  TT_SBit_LineMetricsRec_ hori;\n  TT_SBit_LineMetricsRec_ vert;\n  unsigned __int8 x_ppem;\n  unsigned __int8 y_ppem;\n  unsigned __int8 x_ppem_substitute;\n  unsigned __int8 y_ppem_substitute;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-post-20rec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-post-20rec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_Post_20Rec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_Post_20Rec_\n{\n  unsigned __int16 num_glyphs;\n  unsigned __int16 num_names;\n  wchar_t *glyph_indices;\n  char **glyph_names;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-post-namesrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-post-namesrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_Post_NamesRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_Post_NamesRec_\n{\n  unsigned __int8 loaded;\n  union\n  {\n    TT_Post_20Rec_ format_20;\n    TT_Post_25_ format_25;\n  } names;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-bdfrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-bdfrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_BDFRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) TT_BDFRec_\n{\n  unsigned __int8 *table;\n  unsigned __int8 *table_end;\n  unsigned __int8 *strings;\n  unsigned int strings_size;\n  unsigned int num_strikes;\n  unsigned __int8 loaded;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-cmapinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-cmapinfo"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_CMapInfo_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_CMapInfo_\n{\n  unsigned int language;\n  int format;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-sbit-metricsrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-sbit-metricsrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_SBit_MetricsRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_SBit_MetricsRec_\n{\n  unsigned __int16 height;\n  unsigned __int16 width;\n  __int16 horiBearingX;\n  __int16 horiBearingY;\n  unsigned __int16 horiAdvance;\n  __int16 vertBearingX;\n  __int16 vertBearingY;\n  unsigned __int16 vertAdvance;\n};\n\n")])])]),a("h3",{attrs:{id:"tbbox-rec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tbbox-rec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TBBox_Rec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TBBox_Rec_\n{\n  FT_Vector_ last;\n  FT_BBox_ bbox;\n};\n\n")])])]),a("h3",{attrs:{id:"t1-hints-funcsrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t1-hints-funcsrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T1_Hints_FuncsRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const struct T1_Hints_FuncsRec_\n{\n  struct T1_HintsRec_ *hints;\n  void (__fastcall *open)(struct T1_HintsRec_ *);\n  int (__fastcall *close)(struct T1_HintsRec_ *, unsigned int);\n  void (__fastcall *stem)(struct T1_HintsRec_ *, unsigned int, int *);\n  void (__fastcall *stem3)(struct T1_HintsRec_ *, unsigned int, int *);\n  void (__fastcall *reset)(struct T1_HintsRec_ *, unsigned int);\n  int (__fastcall *apply)(struct T1_HintsRec_ *, FT_Outline_ *, PSH_GlobalsRec_ *, FT_Render_Mode_);\n};\n\n")])])]),a("h3",{attrs:{id:"t2-hints-funcsrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t2-hints-funcsrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T2_Hints_FuncsRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const struct T2_Hints_FuncsRec_\n{\n  struct T2_HintsRec_ *hints;\n  void (__fastcall *open)(struct T2_HintsRec_ *);\n  int (__fastcall *close)(struct T2_HintsRec_ *, unsigned int);\n  void (__fastcall *stems)(struct T2_HintsRec_ *, unsigned int, int, int *);\n  void (__fastcall *hintmask)(struct T2_HintsRec_ *, unsigned int, unsigned int, const unsigned __int8 *);\n  void (__fastcall *counter)(struct T2_HintsRec_ *, unsigned int, const unsigned __int8 *);\n  int (__fastcall *apply)(struct T2_HintsRec_ *, FT_Outline_ *, PSH_GlobalsRec_ *, FT_Render_Mode_);\n};\n\n")])])]),a("h3",{attrs:{id:"t1-cmapcustomrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t1-cmapcustomrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T1_CMapCustomRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T1_CMapCustomRec_\n{\n  FT_CMapRec_ cmap;\n  unsigned int first;\n  unsigned int count;\n  wchar_t *indices;\n};\n\n")])])]),a("h3",{attrs:{id:"t1-encodingrecrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t1-encodingrecrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T1_EncodingRecRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T1_EncodingRecRec_\n{\n  int num_chars;\n  int code_first;\n  int code_last;\n  wchar_t *char_index;\n  const char **char_name;\n};\n\n")])])]),a("h3",{attrs:{id:"t1-fontrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t1-fontrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T1_FontRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) T1_FontRec_\n{\n  PS_FontInfoRec_ font_info;\n  PS_FontExtraRec_ font_extra;\n  PS_PrivateRec_ private_dict;\n  char *font_name;\n  T1_EncodingType_ encoding_type;\n  T1_EncodingRecRec_ encoding;\n  unsigned __int8 *subrs_block;\n  unsigned __int8 *charstrings_block;\n  unsigned __int8 *glyph_names_block;\n  int num_subrs;\n  unsigned __int8 **subrs;\n  unsigned int *subrs_len;\n  FT_HashRec_ *subrs_hash;\n  int num_glyphs;\n  char **glyph_names;\n  unsigned __int8 **charstrings;\n  unsigned int *charstrings_len;\n  unsigned __int8 paint_type;\n  unsigned __int8 font_type;\n  FT_Matrix_ font_matrix;\n  FT_Vector_ font_offset;\n  FT_BBox_ font_bbox;\n  int font_id;\n  int stroke_width;\n};\n\n")])])]),a("h3",{attrs:{id:"t1-cmapstdrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t1-cmapstdrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T1_CMapStdRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T1_CMapStdRec_\n{\n  FT_CMapRec_ cmap;\n  const unsigned __int16 *code_to_sid;\n  const char *(__fastcall *sid_to_string)(unsigned int);\n  unsigned int num_glyphs;\n  const char *const *glyph_names;\n};\n\n")])])]),a("h3",{attrs:{id:"t1-facerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t1-facerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T1_FaceRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T1_FaceRec_\n{\n  FT_FaceRec_ root;\n  T1_FontRec_ type1;\n  const void *psnames;\n  const void *psaux;\n  const void *afm_data;\n  FT_CharMapRec_ charmaprecs[2];\n  FT_CharMapRec_ *charmaps[2];\n  PS_BlendRec_ *blend;\n  int ndv_idx;\n  int cdv_idx;\n  unsigned int len_buildchar;\n  int *buildchar;\n  const void *pshinter;\n};\n\n")])])]),a("h3",{attrs:{id:"tprofile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tprofile"}},[t._v("#")]),t._v(" "),a("code",[t._v("TProfile_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TProfile_\n{\n  int X;\n  TProfile_ *link;\n  int *offset;\n  unsigned __int16 flags;\n  int height;\n  int start;\n  int countL;\n  TProfile_ *next;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-cmaprec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-cmaprec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_CMapRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) TT_CMapRec_\n{\n  FT_CMapRec_ cmap;\n  unsigned __int8 *data;\n  int flags;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-cmap12rec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-cmap12rec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_CMap12Rec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) TT_CMap12Rec_\n{\n  TT_CMapRec_ cmap;\n  unsigned __int8 valid;\n  unsigned int cur_charcode;\n  unsigned int cur_gindex;\n  unsigned int cur_group;\n  unsigned int num_groups;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-cmap14rec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-cmap14rec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_CMap14Rec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_CMap14Rec_\n{\n  TT_CMapRec_ cmap;\n  unsigned int num_selectors;\n  unsigned int max_results;\n  unsigned int *results;\n  FT_MemoryRec_ *memory;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-validatorrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-validatorrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_ValidatorRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(16)) TT_ValidatorRec_\n{\n  FT_ValidatorRec_ validator;\n  unsigned int num_glyphs;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-cmap13rec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-cmap13rec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_CMap13Rec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) TT_CMap13Rec_\n{\n  TT_CMapRec_ cmap;\n  unsigned __int8 valid;\n  unsigned int cur_charcode;\n  unsigned int cur_gindex;\n  unsigned int cur_group;\n  unsigned int num_groups;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-cmap4rec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-cmap4rec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_CMap4Rec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TT_CMap4Rec_\n{\n  TT_CMapRec_ cmap;\n  unsigned int cur_charcode;\n  unsigned int cur_gindex;\n  unsigned int num_ranges;\n  unsigned int cur_range;\n  unsigned int cur_start;\n  unsigned int cur_end;\n  int cur_delta;\n  unsigned __int8 *cur_values;\n};\n\n")])])]),a("h3",{attrs:{id:"tcell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcell"}},[t._v("#")]),t._v(" "),a("code",[t._v("TCell_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TCell_\n{\n  int x;\n  int cover;\n  int area;\n  TCell_ *next;\n};\n\n")])])]),a("h3",{attrs:{id:"tt-driverrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tt-driverrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("TT_DriverRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) TT_DriverRec_\n{\n  FT_DriverRec_ root;\n  TT_GlyphZoneRec_ zone;\n  unsigned int interpreter_version;\n};\n\n")])])]),a("h3",{attrs:{id:"t1-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t1-loader"}},[t._v("#")]),t._v(" "),a("code",[t._v("T1_Loader_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T1_Loader_\n{\n  T1_ParserRec_ parser;\n  int num_chars;\n  PS_TableRec_ encoding_table;\n  int num_glyphs;\n  PS_TableRec_ glyph_names;\n  PS_TableRec_ charstrings;\n  PS_TableRec_ swap_table;\n  int num_subrs;\n  PS_TableRec_ subrs;\n  FT_HashRec_ *subrs_hash;\n  unsigned __int8 fontdata;\n  unsigned int keywords_encountered;\n};\n\n")])])]),a("h3",{attrs:{id:"t1-sizerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t1-sizerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T1_SizeRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T1_SizeRec_\n{\n  FT_SizeRec_ root;\n};\n\n")])])]),a("h3",{attrs:{id:"t1-glyphslotrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t1-glyphslotrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T1_GlyphSlotRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) T1_GlyphSlotRec_\n{\n  FT_GlyphSlotRec_ root;\n  unsigned __int8 hint;\n  unsigned __int8 scaled;\n  int x_scale;\n  int y_scale;\n  int max_points;\n  int max_contours;\n};\n\n")])])]),a("h3",{attrs:{id:"t42-driverrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t42-driverrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T42_DriverRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T42_DriverRec_\n{\n  FT_DriverRec_ root;\n  FT_Driver_ClassRec_ *ttclazz;\n};\n\n")])])]),a("h3",{attrs:{id:"t42-glyphslotrec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t42-glyphslotrec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T42_GlyphSlotRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T42_GlyphSlotRec_\n{\n  FT_GlyphSlotRec_ root;\n  FT_GlyphSlotRec_ *ttslot;\n};\n\n")])])]),a("h3",{attrs:{id:"t42-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t42-loader"}},[t._v("#")]),t._v(" "),a("code",[t._v("T42_Loader_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T42_Loader_\n{\n  T42_ParserRec_ parser;\n  int num_chars;\n  PS_TableRec_ encoding_table;\n  int num_glyphs;\n  PS_TableRec_ glyph_names;\n  PS_TableRec_ charstrings;\n  PS_TableRec_ swap_table;\n};\n\n")])])]),a("h3",{attrs:{id:"t42-facerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t42-facerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T42_FaceRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T42_FaceRec_\n{\n  FT_FaceRec_ root;\n  T1_FontRec_ type1;\n  const void *psnames;\n  const void *psaux;\n  unsigned __int8 *ttf_data;\n  int ttf_size;\n  FT_FaceRec_ *ttf_face;\n  FT_CharMapRec_ charmaprecs[2];\n  FT_CharMapRec_ *charmaps[2];\n  PS_UnicodesRec_ unicode_map;\n};\n\n")])])]),a("h3",{attrs:{id:"t42-sizerec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t42-sizerec"}},[t._v("#")]),t._v(" "),a("code",[t._v("T42_SizeRec_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct T42_SizeRec_\n{\n  FT_SizeRec_ root;\n  FT_SizeRec_ *ttsize;\n};\n\n")])])]),a("h3",{attrs:{id:"threadinfo-profilegroupinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadinfo-profilegroupinfo"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThreadInfo::ProfileGroupInfo")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ThreadInfo::ProfileGroupInfo\n{\n  int mStackDepth;\n};\n\n")])])]),a("h3",{attrs:{id:"threadinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadinfo"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThreadInfo")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ThreadInfo\n{\n  std::vector<ThreadInfo::ProfileGroupInfo> mProfileGroups;\n};\n\n")])])]),a("h3",{attrs:{id:"teedataobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#teedataobject"}},[t._v("#")]),t._v(" "),a("code",[t._v("teedataobject")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct teedataobject\n{\n  __int64 ob_refcnt;\n  _typeobject *ob_type;\n  _object *it;\n  int numread;\n  _object *nextlink;\n  _object *values[57];\n};\n\n")])])]),a("h3",{attrs:{id:"takewhileobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#takewhileobject"}},[t._v("#")]),t._v(" "),a("code",[t._v("takewhileobject")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __declspec(align(8)) takewhileobject\n{\n  __int64 ob_refcnt;\n  _typeobject *ob_type;\n  _object *func;\n  _object *it;\n  int stop;\n};\n\n")])])]),a("h3",{attrs:{id:"teeobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#teeobject"}},[t._v("#")]),t._v(" "),a("code",[t._v("teeobject")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct teeobject\n{\n  __int64 ob_refcnt;\n  _typeobject *ob_type;\n  teedataobject *dataobj;\n  int index;\n  _object *weakreflist;\n};\n\n")])])]),a("h3",{attrs:{id:"tcp-keepalive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-keepalive"}},[t._v("#")]),t._v(" "),a("code",[t._v("tcp_keepalive")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tcp_keepalive\n{\n  unsigned int onoff;\n  unsigned int keepalivetime;\n  unsigned int keepaliveinterval;\n};\n\n")])])]),a("h3",{attrs:{id:"tupleiterobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tupleiterobject"}},[t._v("#")]),t._v(" "),a("code",[t._v("tupleiterobject")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tupleiterobject\n{\n  __int64 ob_refcnt;\n  _typeobject *ob_type;\n  int it_index;\n  PyTupleObject *it_seq;\n};\n\n")])])]),a("h3",{attrs:{id:"tok-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tok-state"}},[t._v("#")]),t._v(" "),a("code",[t._v("tok_state")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tok_state\n{\n  char *buf;\n  char *cur;\n  char *inp;\n  char *end;\n  char *start;\n  int done;\n  _iobuf *fp;\n  int tabsize;\n  int indent;\n  int indstack[100];\n  int atbol;\n  int pendin;\n  char *prompt;\n  char *nextprompt;\n  int lineno;\n  int level;\n  const char *filename;\n  int altwarning;\n  int alterror;\n  int alttabsize;\n  int altindstack[100];\n  int decoding_state;\n  int decoding_erred;\n  int read_coding_spec;\n  char *encoding;\n  int cont_line;\n  const char *line_start;\n  _object *decoding_readline;\n  _object *decoding_buffer;\n  const char *enc;\n  const char *str;\n  const char *input;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-short-void"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-short-void"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned short,void>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned short,void>\n{\n  const unsigned __int16 first;\n  tinystl::unordered_hash_node<unsigned short,void> *next;\n  tinystl::unordered_hash_node<unsigned short,void> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-short-void-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-short-void-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned short,void> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned short,void> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned short,void> **first;\n  tinystl::unordered_hash_node<unsigned short,void> **last;\n  tinystl::unordered_hash_node<unsigned short,void> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-set-unsigned-short-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-set-unsigned-short-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_set<unsigned short,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_set<unsigned short,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned short,void> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-unsigned-int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-unsigned-int"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,unsigned int>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,unsigned int>\n{\n  const unsigned __int64 first;\n  unsigned int second;\n  tinystl::unordered_hash_node<unsigned __int64,unsigned int> *next;\n  tinystl::unordered_hash_node<unsigned __int64,unsigned int> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-short-void-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-short-void-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned short,void> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned short,void> const >\n{\n  tinystl::unordered_hash_node<unsigned short,void> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-short-void-const-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-short-void-const-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned short,void> const >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned short,void> const >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned short,void> const > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-unsigned-int-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-unsigned-int-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,unsigned int> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,unsigned int> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,unsigned int> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-placeholder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-placeholder"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::placeholder")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::placeholder\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-short-void-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-short-void-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned short,void> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned short,void> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-unsigned-int-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-unsigned-int-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,unsigned int> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,unsigned int> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-bgfx-nonlocalallocator-free-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-bgfx-nonlocalallocator-free-0"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<bgfx::NonLocalAllocator::Free,0>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<bgfx::NonLocalAllocator::Free,0>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-id3d12resource-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-id3d12resource-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<ID3D12Resource *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<ID3D12Resource *,bgfx::TinyStlAllocator>\n{\n  ID3D12Resource **first;\n  ID3D12Resource **last;\n  ID3D12Resource **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-vector-id3d12resource-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-vector-id3d12resource-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::vector<ID3D12Resource *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::vector<ID3D12Resource *,bgfx::TinyStlAllocator>\n{\n  tinystl::buffer<ID3D12Resource *,bgfx::TinyStlAllocator> m_buffer;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-unsigned-short"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-unsigned-short"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,unsigned short>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,unsigned short>\n{\n  const unsigned __int64 first;\n  unsigned __int16 second;\n  tinystl::unordered_hash_node<unsigned __int64,unsigned short> *next;\n  tinystl::unordered_hash_node<unsigned __int64,unsigned short> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-unsigned-short-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-unsigned-short-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,unsigned short> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,unsigned short> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned __int64,unsigned short> **first;\n  tinystl::unordered_hash_node<unsigned __int64,unsigned short> **last;\n  tinystl::unordered_hash_node<unsigned __int64,unsigned short> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-map-unsigned-int64-unsigned-short-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-map-unsigned-int64-unsigned-short-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_map<unsigned __int64,unsigned short,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_map<unsigned __int64,unsigned short,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,unsigned short> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *>\n{\n  const unsigned __int64 first;\n  ID3D12PipelineState *second;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> *next;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> **first;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> **last;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-map-unsigned-int64-id3d12pipelinestate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-map-unsigned-int64-id3d12pipelinestate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_map<unsigned __int64,ID3D12PipelineState *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_map<unsigned __int64,ID3D12PipelineState *,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-id3d12resource-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-id3d12resource-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<ID3D12Resource *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<ID3D12Resource *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-unsigned-short-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-unsigned-short-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,unsigned short> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,unsigned short> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,unsigned short> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-unsigned-short-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-unsigned-short-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,unsigned short> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,unsigned short> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-unsigned-int-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-unsigned-int-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<unsigned int,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<unsigned int,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-bgfx-dxbcsignature-element-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-bgfx-dxbcsignature-element-0"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<bgfx::DxbcSignature::Element,0>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<bgfx::DxbcSignature::Element,0>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-unsigned-short"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-unsigned-short"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,unsigned short>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<unsigned __int64,unsigned short>\n{\n  unsigned __int64 first;\n  unsigned __int16 second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int-unsigned-int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int-unsigned-int"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned int,unsigned int>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned int,unsigned int>\n{\n  const unsigned int first;\n  unsigned int second;\n  tinystl::unordered_hash_node<unsigned int,unsigned int> *next;\n  tinystl::unordered_hash_node<unsigned int,unsigned int> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-int-unsigned-int-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-int-unsigned-int-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned int,unsigned int> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned int,unsigned int> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned int,unsigned int> **first;\n  tinystl::unordered_hash_node<unsigned int,unsigned int> **last;\n  tinystl::unordered_hash_node<unsigned int,unsigned int> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-map-unsigned-int-unsigned-int-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-map-unsigned-int-unsigned-int-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_map<unsigned int,unsigned int,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_map<unsigned int,unsigned int,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned int,unsigned int> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int-unsigned-int-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int-unsigned-int-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned int,unsigned int> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned int,unsigned int> const >\n{\n  const tinystl::unordered_hash_node<unsigned int,unsigned int> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int-unsigned-int-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int-unsigned-int-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned int,unsigned int> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned int,unsigned int> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *>\n{\n  const unsigned __int64 first;\n  ID3D11BlendState *second;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> *next;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> **first;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> **last;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-map-unsigned-int64-id3d11blendstate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-map-unsigned-int64-id3d11blendstate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_map<unsigned __int64,ID3D11BlendState *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_map<unsigned __int64,ID3D11BlendState *,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *>\n{\n  const unsigned __int64 first;\n  ID3D11DepthStencilState *second;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> *next;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> **first;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> **last;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-map-unsigned-int64-id3d11depthstencilstate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-map-unsigned-int64-id3d11depthstencilstate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_map<unsigned __int64,ID3D11DepthStencilState *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_map<unsigned __int64,ID3D11DepthStencilState *,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *>\n{\n  const unsigned __int64 first;\n  ID3D11InputLayout *second;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> *next;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> **first;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> **last;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-map-unsigned-int64-id3d11inputlayout-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-map-unsigned-int64-id3d11inputlayout-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_map<unsigned __int64,ID3D11InputLayout *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_map<unsigned __int64,ID3D11InputLayout *,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *>\n{\n  const unsigned __int64 first;\n  ID3D11RasterizerState *second;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> *next;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> **first;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> **last;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-map-unsigned-int64-id3d11rasterizerstate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-map-unsigned-int64-id3d11rasterizerstate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_map<unsigned __int64,ID3D11RasterizerState *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_map<unsigned __int64,ID3D11RasterizerState *,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *>\n{\n  const unsigned __int64 first;\n  ID3D11SamplerState *second;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> *next;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> **first;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> **last;\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-map-unsigned-int64-id3d11samplerstate-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-map-unsigned-int64-id3d11samplerstate-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_map<unsigned __int64,ID3D11SamplerState *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_map<unsigned __int64,ID3D11SamplerState *,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-id3d11blendstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-id3d11blendstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,ID3D11BlendState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,ID3D11BlendState *>\n{\n  unsigned __int64 first;\n  ID3D11BlendState *second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-id3d11depthstencilstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-id3d11depthstencilstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,ID3D11DepthStencilState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,ID3D11DepthStencilState *>\n{\n  unsigned __int64 first;\n  ID3D11DepthStencilState *second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-id3d11inputlayout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-id3d11inputlayout"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,ID3D11InputLayout *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,ID3D11InputLayout *>\n{\n  unsigned __int64 first;\n  ID3D11InputLayout *second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-id3d11rasterizerstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-id3d11rasterizerstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,ID3D11RasterizerState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,ID3D11RasterizerState *>\n{\n  unsigned __int64 first;\n  ID3D11RasterizerState *second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-unsigned-char-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-unsigned-char-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<unsigned char,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<unsigned char,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11rasterizerstate-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11RasterizerState *> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11depthstencilstate-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11DepthStencilState *> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d11inputlayout-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,ID3D11InputLayout *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11blendstate-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11BlendState *> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-id3d11samplerstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-id3d11samplerstate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,ID3D11SamplerState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,ID3D11SamplerState *>\n{\n  unsigned __int64 first;\n  ID3D11SamplerState *second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d11samplerstate-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D11SamplerState *> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-id3d12pipelinestate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-id3d12pipelinestate"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,ID3D12PipelineState *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,ID3D12PipelineState *>\n{\n  unsigned __int64 first;\n  ID3D12PipelineState *second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-id3d12pipelinestate-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,ID3D12PipelineState *> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *>\n{\n  const unsigned __int64 first;\n  IDirect3DVertexDeclaration9 *second;\n  tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> *next;\n  tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-buffer-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> *,bgfx::TinyStlAllocator>\n{\n  tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> **first;\n  tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> **last;\n  tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> **capacity;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-map-unsigned-int64-idirect3dvertexdeclaration9-bgfx-tinystlallocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-map-unsigned-int64-idirect3dvertexdeclaration9-bgfx-tinystlallocator"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_map<unsigned __int64,IDirect3DVertexDeclaration9 *,bgfx::TinyStlAllocator>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_map<unsigned __int64,IDirect3DVertexDeclaration9 *,bgfx::TinyStlAllocator>\n{\n  unsigned __int64 m_size;\n  tinystl::buffer<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> *,bgfx::TinyStlAllocator> m_buckets;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-idirect3dvertexdeclaration9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-idirect3dvertexdeclaration9"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,IDirect3DVertexDeclaration9 *>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,IDirect3DVertexDeclaration9 *>\n{\n  unsigned __int64 first;\n  IDirect3DVertexDeclaration9 *second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-idirect3dvertexdeclaration9-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,IDirect3DVertexDeclaration9 *> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline>\n{\n  const unsigned __int64 first;\n  bgfx::vk::VkPipeline second;\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> *next;\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout>\n{\n  const unsigned __int64 first;\n  bgfx::vk::VkDescriptorSetLayout second;\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> *next;\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass>\n{\n  const unsigned __int64 first;\n  bgfx::vk::VkRenderPass second;\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> *next;\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vksampler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vksampler"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkSampler>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkSampler>\n{\n  const unsigned __int64 first;\n  bgfx::vk::VkSampler second;\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkSampler> *next;\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkSampler> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-bgfx-vk-vkrenderpass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-bgfx-vk-vkrenderpass"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,bgfx::vk::VkRenderPass>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,bgfx::vk::VkRenderPass>\n{\n  unsigned __int64 first;\n  bgfx::vk::VkRenderPass second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vksampler-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vksampler-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkSampler> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkSampler> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkSampler> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-bgfx-vk-vkdescriptorsetlayout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-bgfx-vk-vkdescriptorsetlayout"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,bgfx::vk::VkDescriptorSetLayout>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,bgfx::vk::VkDescriptorSetLayout>\n{\n  unsigned __int64 first;\n  bgfx::vk::VkDescriptorSetLayout second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkdescriptorsetlayout-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkDescriptorSetLayout> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-unsigned-int64-bgfx-vk-vkpipeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-unsigned-int64-bgfx-vk-vkpipeline"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<unsigned __int64,bgfx::vk::VkPipeline>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pair<unsigned __int64,bgfx::vk::VkPipeline>\n{\n  unsigned __int64 first;\n  bgfx::vk::VkPipeline second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vksampler-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vksampler-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkSampler> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkSampler> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkrenderpass-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkRenderPass> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> const >\n{\n  const tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> >\n{\n  tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline-bool"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> >,bool>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> >,bool>\n{\n  tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> > first;\n  bool second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-unsigned-int64-bgfx-vk-vkpipeline-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<unsigned __int64,bgfx::vk::VkPipeline> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-node-tinystl-stringt-bgfx-tinystlallocator-unsigned-int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-node-tinystl-stringt-bgfx-tinystlallocator-unsigned-int"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_node<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_node<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int>\n{\n  const tinystl::stringT<bgfx::TinyStlAllocator> first;\n  unsigned int second;\n  tinystl::unordered_hash_node<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int> *next;\n  tinystl::unordered_hash_node<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int> *prev;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pair-tinystl-stringt-bgfx-tinystlallocator-unsigned-int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pair-tinystl-stringt-bgfx-tinystlallocator-unsigned-int"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pair<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) tinystl::pair<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int>\n{\n  tinystl::stringT<bgfx::TinyStlAllocator> first;\n  unsigned int second;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-pod-traits-tinystl-unordered-hash-node-tinystl-stringt-bgfx-tinystlallocator-unsigned-int-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-pod-traits-tinystl-unordered-hash-node-tinystl-stringt-bgfx-tinystlallocator-unsigned-int-1"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::pod_traits<tinystl::unordered_hash_node<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int> *,1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::pod_traits<tinystl::unordered_hash_node<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int> *,1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-tinystl-stringt-bgfx-tinystlallocator-unsigned-int-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-unordered-hash-iterator-tinystl-unordered-hash-node-tinystl-stringt-bgfx-tinystlallocator-unsigned-int-const"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int> const >")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::unordered_hash_iterator<tinystl::unordered_hash_node<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int> const >\n{\n  const tinystl::unordered_hash_node<tinystl::stringT<bgfx::TinyStlAllocator>,unsigned int> *node;\n};\n\n")])])]),a("h3",{attrs:{id:"trialmanager-settrialabtest-l2-lambda-c30bbd6b5b06c9cde920159e96e64d3e-l2-lambda-eff4589c59d336c8838d8d2f4d341069"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trialmanager-settrialabtest-l2-lambda-c30bbd6b5b06c9cde920159e96e64d3e-l2-lambda-eff4589c59d336c8838d8d2f4d341069"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrialManager::setTrialABTest::__l2::<lambda_c30bbd6b5b06c9cde920159e96e64d3e>::()::__l2::<lambda_eff4589c59d336c8838d8d2f4d341069>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TrialManager::setTrialABTest::__l2::<lambda_c30bbd6b5b06c9cde920159e96e64d3e>::()::__l2::<lambda_eff4589c59d336c8838d8d2f4d341069>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"truetypefont-getsheet-l2-lambda-353d794a8b96987352e47142585db63e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#truetypefont-getsheet-l2-lambda-353d794a8b96987352e47142585db63e"}},[t._v("#")]),t._v(" "),a("code",[t._v("TrueTypeFont::getSheet::__l2::<lambda_353d794a8b96987352e47142585db63e>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TrueTypeFont::getSheet::__l2::<lambda_353d794a8b96987352e47142585db63e>\n{\n  TrueTypeFont *const __this;\n};\n\n")])])]),a("h3",{attrs:{id:"templateexportscreencontroller-picktemplateimage-l2-lambda-95e956f9c0e719a6eb64ab92ca969fed-l6-lambda-fac14e20a7e48827b06b0675210910ed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#templateexportscreencontroller-picktemplateimage-l2-lambda-95e956f9c0e719a6eb64ab92ca969fed-l6-lambda-fac14e20a7e48827b06b0675210910ed"}},[t._v("#")]),t._v(" "),a("code",[t._v("TemplateExportScreenController::_pickTemplateImage::__l2::<lambda_95e956f9c0e719a6eb64ab92ca969fed>::()::__l6::<lambda_fac14e20a7e48827b06b0675210910ed>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TemplateExportScreenController::_pickTemplateImage::__l2::<lambda_95e956f9c0e719a6eb64ab92ca969fed>::()::__l6::<lambda_fac14e20a7e48827b06b0675210910ed>\n{\n  const Core::PathBuffer<std::string > *fileExtension;\n};\n\n")])])]),a("h3",{attrs:{id:"ttseventmanager-clearallttsevents-l2-lambda-166fbc57a43bf4c72b542d3926f6b284"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ttseventmanager-clearallttsevents-l2-lambda-166fbc57a43bf4c72b542d3926f6b284"}},[t._v("#")]),t._v(" "),a("code",[t._v("TTSEventManager::clearAllTTSEvents::__l2::<lambda_166fbc57a43bf4c72b542d3926f6b284>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TTSEventManager::clearAllTTSEvents::__l2::<lambda_166fbc57a43bf4c72b542d3926f6b284>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"texturesethelpers-texturesetdefinitionparser-postvalidation-l2-lambda-ccfc458045cdb218bb681a058ac9c64c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#texturesethelpers-texturesetdefinitionparser-postvalidation-l2-lambda-ccfc458045cdb218bb681a058ac9c64c"}},[t._v("#")]),t._v(" "),a("code",[t._v("TextureSetHelpers::TextureSetDefinitionParser::_postValidation::__l2::<lambda_ccfc458045cdb218bb681a058ac9c64c>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TextureSetHelpers::TextureSetDefinitionParser::_postValidation::__l2::<lambda_ccfc458045cdb218bb681a058ac9c64c>\n{\n  std::unordered_set<std::string> *specifiedLayers;\n};\n\n")])])]),a("h3",{attrs:{id:"transformationcomponent-maintainolddata-l2-lambda-0ebed9bb243823bd2c6449afa59ff071"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformationcomponent-maintainolddata-l2-lambda-0ebed9bb243823bd2c6449afa59ff071"}},[t._v("#")]),t._v(" "),a("code",[t._v("TransformationComponent::maintainOldData::__l2::<lambda_0ebed9bb243823bd2c6449afa59ff071>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TransformationComponent::maintainOldData::__l2::<lambda_0ebed9bb243823bd2c6449afa59ff071>\n{\n  SynchedActorData *originalData;\n  SynchedActorData *transformedData;\n};\n\n")])])]),a("h3",{attrs:{id:"treatmentpacksource-load-l5-lambda-b6e7809886387660f36c54eb091a8cb1-l6-lambda-c49aa7eff27558e257190c445686bc48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treatmentpacksource-load-l5-lambda-b6e7809886387660f36c54eb091a8cb1-l6-lambda-c49aa7eff27558e257190c445686bc48"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreatmentPackSource::load::__l5::<lambda_b6e7809886387660f36c54eb091a8cb1>::()::__l6::<lambda_c49aa7eff27558e257190c445686bc48>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreatmentPackSource::load::__l5::<lambda_b6e7809886387660f36c54eb091a8cb1>::()::__l6::<lambda_c49aa7eff27558e257190c445686bc48>\n{\n  std::unique_ptr<Pack> *pack;\n};\n\n")])])]),a("h3",{attrs:{id:"titlerawcommand-sendtitlepackettextobject-l5-lambda-48454f3bf36a4e2de18c670fda8587c6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titlerawcommand-sendtitlepackettextobject-l5-lambda-48454f3bf36a4e2de18c670fda8587c6"}},[t._v("#")]),t._v(" "),a("code",[t._v("TitleRawCommand::_sendTitlePacketTextObject::__l5::<lambda_48454f3bf36a4e2de18c670fda8587c6>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TitleRawCommand::_sendTitlePacketTextObject::__l5::<lambda_48454f3bf36a4e2de18c670fda8587c6>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tellrawcommand-execute-l14-lambda-90cef47ec8b6c76c849ede2c103fd1bf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tellrawcommand-execute-l14-lambda-90cef47ec8b6c76c849ede2c103fd1bf"}},[t._v("#")]),t._v(" "),a("code",[t._v("TellRawCommand::execute::__l14::<lambda_90cef47ec8b6c76c849ede2c103fd1bf>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TellRawCommand::execute::__l14::<lambda_90cef47ec8b6c76c849ede2c103fd1bf>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"titlerawcommand-execute-l2-lambda-5b9cafa6ff6d46b3d004c39e0990394f"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titlerawcommand-execute-l2-lambda-5b9cafa6ff6d46b3d004c39e0990394f"}},[t._v("#")]),t._v(" "),a("code",[t._v("TitleRawCommand::execute::__l2::<lambda_5b9cafa6ff6d46b3d004c39e0990394f>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TitleRawCommand::execute::__l2::<lambda_5b9cafa6ff6d46b3d004c39e0990394f>\n{\n  const TitleRawCommand *const __this;\n  const CommandOrigin *origin;\n  CommandSelectorResults<Player> *targets;\n};\n\n")])])]),a("h3",{attrs:{id:"tagcommand-listtags-l2-lambda-c84dc9b6a1b3669bc322e4aa9ab60776"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tagcommand-listtags-l2-lambda-c84dc9b6a1b3669bc322e4aa9ab60776"}},[t._v("#")]),t._v(" "),a("code",[t._v("TagCommand::_listTags::__l2::<lambda_c84dc9b6a1b3669bc322e4aa9ab60776>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TagCommand::_listTags::__l2::<lambda_c84dc9b6a1b3669bc322e4aa9ab60776>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"textobjectparser-parseselectortextobject-l2-lambda-5827802121b532aadf729a581dac69a9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#textobjectparser-parseselectortextobject-l2-lambda-5827802121b532aadf729a581dac69a9"}},[t._v("#")]),t._v(" "),a("code",[t._v("TextObjectParser::_parseSelectorTextObject::__l2::<lambda_5827802121b532aadf729a581dac69a9>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TextObjectParser::_parseSelectorTextObject::__l2::<lambda_5827802121b532aadf729a581dac69a9>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tropicalfish-updateentityspecificmolangvariables-l2-lambda-153bf7c72ef5d891dfc82eaf261a9098-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tropicalfish-updateentityspecificmolangvariables-l2-lambda-153bf7c72ef5d891dfc82eaf261a9098-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_153bf7c72ef5d891dfc82eaf261a9098>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_153bf7c72ef5d891dfc82eaf261a9098>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tropicalfish-updateentityspecificmolangvariables-l2-lambda-4d52faecc4bfe184f922644e28fd1416-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tropicalfish-updateentityspecificmolangvariables-l2-lambda-4d52faecc4bfe184f922644e28fd1416-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_4d52faecc4bfe184f922644e28fd1416>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_4d52faecc4bfe184f922644e28fd1416>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tropicalfish-updateentityspecificmolangvariables-l2-lambda-2676d2d87e2d93db1c35d755ebed2598-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tropicalfish-updateentityspecificmolangvariables-l2-lambda-2676d2d87e2d93db1c35d755ebed2598-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_2676d2d87e2d93db1c35d755ebed2598>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_2676d2d87e2d93db1c35d755ebed2598>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tropicalfish-updateentityspecificmolangvariables-l2-lambda-153bf7c72ef5d891dfc82eaf261a9098"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tropicalfish-updateentityspecificmolangvariables-l2-lambda-153bf7c72ef5d891dfc82eaf261a9098"}},[t._v("#")]),t._v(" "),a("code",[t._v("TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_153bf7c72ef5d891dfc82eaf261a9098>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_153bf7c72ef5d891dfc82eaf261a9098>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tropicalfish-updateentityspecificmolangvariables-l2-lambda-2676d2d87e2d93db1c35d755ebed2598"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tropicalfish-updateentityspecificmolangvariables-l2-lambda-2676d2d87e2d93db1c35d755ebed2598"}},[t._v("#")]),t._v(" "),a("code",[t._v("TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_2676d2d87e2d93db1c35d755ebed2598>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_2676d2d87e2d93db1c35d755ebed2598>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tropicalfish-updateentityspecificmolangvariables-l2-lambda-4d52faecc4bfe184f922644e28fd1416"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tropicalfish-updateentityspecificmolangvariables-l2-lambda-4d52faecc4bfe184f922644e28fd1416"}},[t._v("#")]),t._v(" "),a("code",[t._v("TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_4d52faecc4bfe184f922644e28fd1416>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TropicalFish::updateEntitySpecificMolangVariables::__l2::<lambda_4d52faecc4bfe184f922644e28fd1416>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tripodcamera-updateentityspecificmolangvariables-l2-lambda-b93ca8c09ad5ed9c2d4ef65764501a75-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tripodcamera-updateentityspecificmolangvariables-l2-lambda-b93ca8c09ad5ed9c2d4ef65764501a75-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TripodCamera::updateEntitySpecificMolangVariables::__l2::<lambda_b93ca8c09ad5ed9c2d4ef65764501a75>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TripodCamera::updateEntitySpecificMolangVariables::__l2::<lambda_b93ca8c09ad5ed9c2d4ef65764501a75>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tripodcamera-updateentityspecificmolangvariables-l2-lambda-b93ca8c09ad5ed9c2d4ef65764501a75"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tripodcamera-updateentityspecificmolangvariables-l2-lambda-b93ca8c09ad5ed9c2d4ef65764501a75"}},[t._v("#")]),t._v(" "),a("code",[t._v("TripodCamera::updateEntitySpecificMolangVariables::__l2::<lambda_b93ca8c09ad5ed9c2d4ef65764501a75>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TripodCamera::updateEntitySpecificMolangVariables::__l2::<lambda_b93ca8c09ad5ed9c2d4ef65764501a75>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tickingareasmanager-processadds-l4-lambda-63152a68d4422458414da9e103d40c16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tickingareasmanager-processadds-l4-lambda-63152a68d4422458414da9e103d40c16"}},[t._v("#")]),t._v(" "),a("code",[t._v("TickingAreasManager::_processAdds::__l4::<lambda_63152a68d4422458414da9e103d40c16>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TickingAreasManager::_processAdds::__l4::<lambda_63152a68d4422458414da9e103d40c16>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tickingareasmanager-processadds-l7-lambda-e901f167a717222a1fd8ef2ad4565724"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tickingareasmanager-processadds-l7-lambda-e901f167a717222a1fd8ef2ad4565724"}},[t._v("#")]),t._v(" "),a("code",[t._v("TickingAreasManager::_processAdds::__l7::<lambda_e901f167a717222a1fd8ef2ad4565724>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TickingAreasManager::_processAdds::__l7::<lambda_e901f167a717222a1fd8ef2ad4565724>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"tickingareasmanager-requeueentityarea-l2-lambda-09aa79e11f608c65fa6ce4e15589cb72"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tickingareasmanager-requeueentityarea-l2-lambda-09aa79e11f608c65fa6ce4e15589cb72"}},[t._v("#")]),t._v(" "),a("code",[t._v("TickingAreasManager::_requeueEntityArea::__l2::<lambda_09aa79e11f608c65fa6ce4e15589cb72>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TickingAreasManager::_requeueEntityArea::__l2::<lambda_09aa79e11f608c65fa6ce4e15589cb72>\n{\n  const ActorUniqueID *entityId;\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-f533ab86d1884dfcc519909eacc041e1-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-f533ab86d1884dfcc519909eacc041e1-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_f533ab86d1884dfcc519909eacc041e1>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_f533ab86d1884dfcc519909eacc041e1>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-f533ab86d1884dfcc519909eacc041e1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-f533ab86d1884dfcc519909eacc041e1"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_f533ab86d1884dfcc519909eacc041e1>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_f533ab86d1884dfcc519909eacc041e1>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-316bfc304bdbebc8fca92470bfb64ac8-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-316bfc304bdbebc8fca92470bfb64ac8-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_316bfc304bdbebc8fca92470bfb64ac8>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_316bfc304bdbebc8fca92470bfb64ac8>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-316bfc304bdbebc8fca92470bfb64ac8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-316bfc304bdbebc8fca92470bfb64ac8"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_316bfc304bdbebc8fca92470bfb64ac8>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_316bfc304bdbebc8fca92470bfb64ac8>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-c210cc24a08cbb4b0a1f4a27569b8da3-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-c210cc24a08cbb4b0a1f4a27569b8da3-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_c210cc24a08cbb4b0a1f4a27569b8da3>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_c210cc24a08cbb4b0a1f4a27569b8da3>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-c210cc24a08cbb4b0a1f4a27569b8da3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-c210cc24a08cbb4b0a1f4a27569b8da3"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_c210cc24a08cbb4b0a1f4a27569b8da3>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_c210cc24a08cbb4b0a1f4a27569b8da3>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-0cdc4f7a090cfec7fa19fe15fd63dac7-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-0cdc4f7a090cfec7fa19fe15fd63dac7-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_0cdc4f7a090cfec7fa19fe15fd63dac7>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_0cdc4f7a090cfec7fa19fe15fd63dac7>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-0cdc4f7a090cfec7fa19fe15fd63dac7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-0cdc4f7a090cfec7fa19fe15fd63dac7"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_0cdc4f7a090cfec7fa19fe15fd63dac7>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_0cdc4f7a090cfec7fa19fe15fd63dac7>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-06388885ee2d8055895fa3b9a937a087-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-06388885ee2d8055895fa3b9a937a087-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_06388885ee2d8055895fa3b9a937a087>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_06388885ee2d8055895fa3b9a937a087>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-06388885ee2d8055895fa3b9a937a087"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-06388885ee2d8055895fa3b9a937a087"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_06388885ee2d8055895fa3b9a937a087>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_06388885ee2d8055895fa3b9a937a087>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-d3254b4d25ff1821a3cd24c1d807c792-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-d3254b4d25ff1821a3cd24c1d807c792-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_d3254b4d25ff1821a3cd24c1d807c792>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_d3254b4d25ff1821a3cd24c1d807c792>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-d3254b4d25ff1821a3cd24c1d807c792"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-d3254b4d25ff1821a3cd24c1d807c792"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_d3254b4d25ff1821a3cd24c1d807c792>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_d3254b4d25ff1821a3cd24c1d807c792>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-244d7cc81ad86e682410034be2e19209-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-244d7cc81ad86e682410034be2e19209-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_244d7cc81ad86e682410034be2e19209>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_244d7cc81ad86e682410034be2e19209>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-attachabledecoration-buildschema-l2-lambda-244d7cc81ad86e682410034be2e19209"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-attachabledecoration-buildschema-l2-lambda-244d7cc81ad86e682410034be2e19209"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_244d7cc81ad86e682410034be2e19209>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::AttachableDecoration::buildSchema::__l2::<lambda_244d7cc81ad86e682410034be2e19209>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-treeparams-buildschema-l2-lambda-8fc19ea07e2c80707579cacdb274625e-l2-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-treeparams-buildschema-l2-lambda-8fc19ea07e2c80707579cacdb274625e-l2-literal"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::TreeParams::buildSchema::__l2::<lambda_8fc19ea07e2c80707579cacdb274625e>::()::__l2::Literal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::TreeParams::buildSchema::__l2::<lambda_8fc19ea07e2c80707579cacdb274625e>::()::__l2::Literal\n{\n};\n\n")])])]),a("h3",{attrs:{id:"treehelper-treeparams-buildschema-l2-lambda-8fc19ea07e2c80707579cacdb274625e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treehelper-treeparams-buildschema-l2-lambda-8fc19ea07e2c80707579cacdb274625e"}},[t._v("#")]),t._v(" "),a("code",[t._v("TreeHelper::TreeParams::buildSchema::__l2::<lambda_8fc19ea07e2c80707579cacdb274625e>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TreeHelper::TreeParams::buildSchema::__l2::<lambda_8fc19ea07e2c80707579cacdb274625e>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"touchmapper-tick-l4-lambda-dee5fc28587d2581bc2aae741d21bd8b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#touchmapper-tick-l4-lambda-dee5fc28587d2581bc2aae741d21bd8b"}},[t._v("#")]),t._v(" "),a("code",[t._v("TouchMapper::tick::__l4::<lambda_dee5fc28587d2581bc2aae741d21bd8b>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj TouchMapper::tick::__l4::<lambda_dee5fc28587d2581bc2aae741d21bd8b>\n{\n  int p;\n};\n\n")])])]),a("h3",{attrs:{id:"tencoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tencoding"}},[t._v("#")]),t._v(" "),a("code",[t._v("TEncoding_")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct TEncoding_\n{\n  int platform_id;\n  int encoding_id;\n  FT_Encoding_ encoding;\n};\n\n")])])]),a("h3",{attrs:{id:"tinystl-list-bgfx-nonlocalallocator-free-bgfx-tinystlallocator-sort-l2-lambda-2ab4b9f78ebe988ca785909f38c65d48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinystl-list-bgfx-nonlocalallocator-free-bgfx-tinystlallocator-sort-l2-lambda-2ab4b9f78ebe988ca785909f38c65d48"}},[t._v("#")]),t._v(" "),a("code",[t._v("tinystl::list<bgfx::NonLocalAllocator::Free,bgfx::TinyStlAllocator>::sort::__l2::<lambda_2ab4b9f78ebe988ca785909f38c65d48>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj tinystl::list<bgfx::NonLocalAllocator::Free,bgfx::TinyStlAllocator>::sort::__l2::<lambda_2ab4b9f78ebe988ca785909f38c65d48>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"togglecomponent-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#togglecomponent-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ToggleComponent_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ToggleComponent_vtbl\n{\n  void (__fastcall *~UIComponent)(UIComponent *this);\n  void (__fastcall *OnScreenPop)(UIComponent *this);\n  std::unique_ptr<UIComponent> *(__fastcall *clone)(UIComponent *this, std::unique_ptr<UIComponent> *result, UIControl *);\n  ComponentReceiveActionType (__fastcall *receive)(UIComponent *this, const ScreenEvent *);\n  ComponentReceiveActionType (__fastcall *receive)(UIComponent *this, VisualTree *, ScreenInputContext *, UIAnimationController *, const ScreenEvent *);\n  void (__fastcall *onNotifyChildAdded)(UIComponent *this);\n  void (__fastcall *onNotifyChildRemoved)(UIComponent *this);\n  void (__fastcall *onRemoved)(UIComponent *this);\n  void (__fastcall *onAdded)(UIComponent *this);\n  void (__fastcall *onVisibilityChanged)(UIComponent *this, bool);\n  void (__fastcall *onEnabledChanged)(UIComponent *this, bool);\n  bool (__fastcall *isRenderableComponent)(UIComponent *this);\n  bool (__fastcall *onLayoutChange)(UIComponent *this);\n  void (__fastcall *reset)(UIComponent *this);\n  void (__fastcall *reload)(UIComponent *this, const UIComponent *);\n  const std::string *(__fastcall *getTextToSpeechComponentValue)(UIComponent *this);\n};\n\n")])])]),a("h3",{attrs:{id:"tripodcamera-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tripodcamera-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TripodCamera_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TripodCamera_vtbl\n{\n  bool (__fastcall *hasComponent)(Actor *this, const HashedString *);\n  void (__fastcall *reloadHardcoded)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadHardcodedClient)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *initializeComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *_serverInitItemStackIds)(Actor *this);\n  void (__fastcall *_doInitialMove)(Actor *this);\n  bool (__fastcall *checkAllSensitiveWords)(Actor *this);\n  bool (__fastcall *checkNameTag)(Actor *this);\n  void (__fastcall *~Actor)(Actor *this);\n  void (__fastcall *reset)(Actor *this);\n  int (__fastcall *getOnDeathExperience)(Actor *this);\n  ActorType (__fastcall *getOwnerEntityType)(Actor *this);\n  void (__fastcall *remove)(Actor *this);\n  void (__fastcall *setPos)(Actor *this, const Vec3 *);\n  const PredictedMovementValues *(__fastcall *getPredictedMovementValues)(Actor *this);\n  const Vec3 *(__fastcall *getPos)(Actor *this);\n  const Vec3 *(__fastcall *getPosOld)(Actor *this);\n  const Vec3 *(__fastcall *getPosExtrapolated)(Actor *this, const Vec3 *result, float);\n  Vec3 *(__fastcall *getAttachPos)(Actor *this, Vec3 *result, ActorLocation, float);\n  Vec3 *(__fastcall *getFiringPos)(Actor *this, Vec3 *result);\n  void (__fastcall *setRot)(Actor *this, const Vec2 *);\n  void (__fastcall *move)(Actor *this, IActorMovementProxy *, const Vec3 *);\n  void (__fastcall *move)(Actor *this, const Vec3 *);\n  Vec3 *(__fastcall *getInterpolatedRidingPosition)(Actor *this, Vec3 *result, float);\n  float (__fastcall *getInterpolatedBodyRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedHeadRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedBodyYaw)(Actor *this, float);\n  float (__fastcall *getYawSpeedInDegreesPerSecond)(Actor *this);\n  float (__fastcall *getInterpolatedWalkAnimSpeed)(Actor *this, float);\n  Vec3 *(__fastcall *getInterpolatedRidingOffset)(Actor *this, Vec3 *result, float);\n  void (__fastcall *checkBlockCollisions)(Actor *this);\n  void (__fastcall *checkBlockCollisions)(Actor *this, const AABB *, std::function<void __cdecl(BlockSource &,Block const &,BlockPos const &,Actor &)>);\n  bool (__fastcall *isFireImmune)(Actor *this);\n  bool (__fastcall *breaksFallingBlocks)(Actor *this);\n  void (__fastcall *blockedByShield)(Actor *this, const ActorDamageSource *, Actor *);\n  void (__fastcall *teleportTo)(Actor *this, const Vec3 *, bool, int, int, const ActorUniqueID *);\n  bool (__fastcall *tryTeleportTo)(Actor *this, const Vec3 *, bool, bool, int, int);\n  void (__fastcall *chorusFruitTeleport)(Actor *this, Vec3 *);\n  void (__fastcall *lerpTo)(Actor *this, const Vec3 *, const Vec2 *, int);\n  void (__fastcall *lerpMotion)(Actor *this, const Vec3 *);\n  std::unique_ptr<AddActorBasePacket> *(__fastcall *getAddPacket)(Actor *this, std::unique_ptr<AddActorBasePacket> *result);\n  void (__fastcall *normalTick)(Actor *this);\n  void (__fastcall *baseTick)(Actor *this);\n  void (__fastcall *rideTick)(Actor *this);\n  void (__fastcall *positionRider)(Actor *this, Actor *, float);\n  float (__fastcall *getRidingHeight)(Actor *this);\n  bool (__fastcall *startRiding)(Actor *this, Actor *);\n  void (__fastcall *addRider)(Actor *this, Actor *);\n  void (__fastcall *flagRiderToRemove)(Actor *this, Actor *);\n  std::string *(__fastcall *getExitTip)(Actor *this, std::string *result, const std::string *, InputMode);\n  bool (__fastcall *intersects)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *, float);\n  bool (__fastcall *isInWall)(Actor *this);\n  bool (__fastcall *isInvisible)(Actor *this);\n  bool (__fastcall *canShowNameTag)(Actor *this);\n  bool (__fastcall *canExistInPeaceful)(Actor *this);\n  void (__fastcall *setNameTagVisible)(Actor *this, bool);\n  const std::string *(__fastcall *getNameTag)(Actor *this);\n  unsigned __int64 (__fastcall *getNameTagAsHash)(Actor *this);\n  std::string *(__fastcall *getFormattedNameTag)(Actor *this, std::string *result);\n  void (__fastcall *filterFormattedNameTag)(Actor *this, const UIProfanityContext *);\n  void (__fastcall *setNameTag)(Actor *this, const std::string *);\n  bool (__fastcall *getAlwaysShowNameTag)(Actor *this);\n  void (__fastcall *setScoreTag)(Actor *this, const std::string *);\n  const std::string *(__fastcall *getScoreTag)(Actor *this);\n  bool (__fastcall *isInWater)(Actor *this);\n  bool (__fastcall *hasEnteredWater)(Actor *this);\n  bool (__fastcall *isImmersedInWater)(Actor *this);\n  bool (__fastcall *isInWaterOrRain)(Actor *this);\n  bool (__fastcall *isInLava)(Actor *this);\n  bool (__fastcall *isUnderLiquid)(Actor *this, MaterialType);\n  bool (__fastcall *isOverWater)(Actor *this);\n  void (__fastcall *makeStuckInBlock)(Actor *this, const Vec3 *);\n  float (__fastcall *getCameraOffset)(Actor *this);\n  float (__fastcall *getShadowHeightOffs)(Actor *this);\n  float (__fastcall *getShadowRadius)(Actor *this);\n  Vec3 *(__fastcall *getHeadLookVector)(Actor *this, Vec3 *result, float);\n  bool (__fastcall *canSeeInvisible)(Actor *this);\n  bool (__fastcall *canSee)(Actor *this, const Vec3 *);\n  bool (__fastcall *canSee)(Actor *this, const Actor *);\n  bool (__fastcall *isSkyLit)(Actor *this, float);\n  float (__fastcall *getBrightness)(Actor *this, float);\n  bool (__fastcall *interactPreventDefault)(Actor *this);\n  void (__fastcall *playerTouch)(Actor *this, Player *);\n  void (__fastcall *onAboveBubbleColumn)(Actor *this, const bool);\n  void (__fastcall *onInsideBubbleColumn)(Actor *this, const bool);\n  bool (__fastcall *isImmobile)(Actor *this);\n  bool (__fastcall *isSilent)(Actor *this);\n  bool (__fastcall *isPickable)(Actor *this);\n  bool (__fastcall *isFishable)(Actor *this);\n  bool (__fastcall *isSleeping)(Actor *this);\n  bool (__fastcall *isShootable)(Actor *this);\n  void (__fastcall *setSneaking)(Actor *this, bool);\n  bool (__fastcall *isBlocking)(Actor *this);\n  bool (__fastcall *isDamageBlocked)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *isAlive)(Actor *this);\n  bool (__fastcall *isOnFire)(Actor *this);\n  bool (__fastcall *isOnHotBlock)(Actor *this);\n  bool (__fastcall *isCreativeModeAllowed)(Actor *this);\n  bool (__fastcall *isSurfaceMob)(Actor *this);\n  bool (__fastcall *isTargetable)(Actor *this);\n  bool (__fastcall *isLocalPlayer)(Actor *this);\n  bool (__fastcall *isPlayer)(Actor *this);\n  bool (__fastcall *canAttack)(Actor *this, Actor *, bool);\n  void (__fastcall *setTarget)(Actor *this, Actor *);\n  Actor *(__fastcall *findAttackTarget)(Actor *this);\n  bool (__fastcall *isValidTarget)(Actor *this, Actor *);\n  bool (__fastcall *attack)(Actor *this, Actor *);\n  void (__fastcall *performRangedAttack)(Actor *this, Actor *, float);\n  void (__fastcall *adjustDamageAmount)(Actor *this, int *);\n  int (__fastcall *getEquipmentCount)(Actor *this);\n  void (__fastcall *setOwner)(Actor *this, const ActorUniqueID);\n  void (__fastcall *setSitting)(Actor *this, bool);\n  void (__fastcall *onTame)(Actor *this);\n  void (__fastcall *onFailedTame)(Actor *this);\n  int (__fastcall *getInventorySize)(Actor *this);\n  int (__fastcall *getEquipSlots)(Actor *this);\n  int (__fastcall *getChestSlots)(Actor *this);\n  void (__fastcall *setStanding)(Actor *this, bool);\n  bool (__fastcall *canPowerJump)(Actor *this);\n  void (__fastcall *setCanPowerJump)(Actor *this, bool);\n  bool (__fastcall *isJumping)(Actor *this);\n  bool (__fastcall *isEnchanted)(Actor *this);\n  void (__fastcall *rideJumped)(Actor *this);\n  void (__fastcall *rideLanded)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *shouldRender)(Actor *this);\n  bool (__fastcall *isInvulnerableTo)(Actor *this, const ActorDamageSource *);\n  ActorDamageCause (__fastcall *getBlockDamageCause)(Actor *this, const Block *);\n  void (__fastcall *actuallyHurt)(Actor *this, int, const ActorDamageSource *, bool);\n  void (__fastcall *animateHurt)(Actor *this);\n  bool (__fastcall *doFireHurt)(Actor *this, int);\n  void (__fastcall *onLightningHit)(Actor *this);\n  void (__fastcall *onBounceStarted)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *feed)(Actor *this, int);\n  void (__fastcall *handleEntityEvent)(Actor *this, ActorEvent, int);\n  float (__fastcall *getPickRadius)(Actor *this);\n  const HashedString *(__fastcall *getActorRendererId)(Actor *this);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const ItemStack *, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int);\n  void (__fastcall *despawn)(Actor *this);\n  void (__fastcall *killed)(Actor *this, Actor *);\n  void (__fastcall *awardKillScore)(Actor *this, Actor *, int);\n  void (__fastcall *setArmor)(Actor *this, ArmorSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getArmor)(Actor *this, ArmorSlot);\n  ArmorMaterialType (__fastcall *getArmorMaterialTypeInSlot)(Actor *this, ArmorSlot);\n  ArmorTextureType (__fastcall *getArmorMaterialTextureTypeInSlot)(Actor *this, ArmorSlot);\n  float (__fastcall *getArmorColorInSlot)(Actor *this, ArmorSlot, int);\n  const ItemStack *(__fastcall *getEquippedSlot)(Actor *this, EquipmentSlot);\n  void (__fastcall *setEquippedSlot)(Actor *this, EquipmentSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getCarriedItem)(Actor *this);\n  void (__fastcall *setCarriedItem)(Actor *this, const ItemStack *);\n  void (__fastcall *setOffhandSlot)(Actor *this, const ItemStack *);\n  const ItemStack *(__fastcall *getEquippedTotem)(Actor *this);\n  bool (__fastcall *consumeTotem)(Actor *this);\n  bool (__fastcall *save)(Actor *this, CompoundTag *);\n  void (__fastcall *saveWithoutId)(Actor *this, CompoundTag *);\n  bool (__fastcall *load)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *loadLinks)(Actor *this, const CompoundTag *, std::vector<ActorLink> *, DataLoadHelper *);\n  ActorType (__fastcall *getEntityTypeId)(Actor *this);\n  const HashedString *(__fastcall *queryEntityRenderer)(Actor *this);\n  ActorUniqueID *(__fastcall *getSourceUniqueID)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *setOnFire)(Actor *this, int);\n  AABB *(__fastcall *getHandleWaterAABB)(Actor *this, AABB *result);\n  void (__fastcall *handleInsidePortal)(Actor *this, const BlockPos *);\n  int (__fastcall *getPortalCooldown)(Actor *this);\n  int (__fastcall *getPortalWaitTime)(Actor *this);\n  AutomaticID<Dimension,int> *(__fastcall *getDimensionId)(Actor *this, AutomaticID<Dimension,int> *result);\n  bool (__fastcall *canChangeDimensions)(Actor *this);\n  void (__fastcall *changeDimension)(Actor *this, const ChangeDimensionPacket *);\n  void (__fastcall *changeDimension)(Actor *this, AutomaticID<Dimension,int>, bool);\n  ActorUniqueID *(__fastcall *getControllingPlayer)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *checkFallDamage)(Actor *this, float, bool);\n  void (__fastcall *causeFallDamage)(Actor *this, float);\n  void (__fastcall *handleFallDistanceOnServer)(Actor *this, float, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, int, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, const Block *, bool);\n  void (__fastcall *onSynchedDataUpdate)(Actor *this, int);\n  bool (__fastcall *canAddRider)(Actor *this, Actor *);\n  bool (__fastcall *canPickupItem)(Actor *this, const ItemStack *);\n  bool (__fastcall *canBePulledIntoVehicle)(Actor *this);\n  bool (__fastcall *inCaravan)(Actor *this);\n  bool (__fastcall *isLeashableType)(Actor *this);\n  void (__fastcall *tickLeash)(Actor *this);\n  void (__fastcall *sendMotionPacketIfNeeded)(Actor *this);\n  bool (__fastcall *canSynchronizeNewEntity)(Actor *this);\n  bool (__fastcall *stopRiding)(Actor *this, bool, bool, bool, bool);\n  void (__fastcall *startSwimming)(Actor *this);\n  void (__fastcall *stopSwimming)(Actor *this);\n  void (__fastcall *buildDebugInfo)(Actor *this, std::string *);\n  CommandPermissionLevel (__fastcall *getCommandPermissionLevel)(Actor *this);\n  AttributeInstance *(__fastcall *getMutableAttribute)(Actor *this, const Attribute *);\n  const AttributeInstance *(__fastcall *getAttribute)(Actor *this, const Attribute *);\n  int (__fastcall *getDeathTime)(Actor *this);\n  void (__fastcall *heal)(Actor *this, int);\n  bool (__fastcall *isInvertedHealAndHarm)(Actor *this);\n  bool (__fastcall *canBeAffected)(Actor *this, const MobEffectInstance *);\n  bool (__fastcall *canBeAffected)(Actor *this, int);\n  bool (__fastcall *canBeAffectedByArrow)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectAdded)(Actor *this, MobEffectInstance *);\n  void (__fastcall *onEffectUpdated)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectRemoved)(Actor *this, MobEffectInstance *);\n  AnimationComponent *(__fastcall *getAnimationComponent)(Actor *this);\n  void (__fastcall *openContainerComponent)(Actor *this, Player *);\n  void (__fastcall *swing)(Actor *this);\n  void (__fastcall *useItem)(Actor *this, ItemStackBase *, ItemUseMethod, bool);\n  bool (__fastcall *hasOutputSignal)(Actor *this, unsigned __int8);\n  int (__fastcall *getOutputSignal)(Actor *this);\n  void (__fastcall *getDebugText)(Actor *this, std::vector<std::string> *);\n  float (__fastcall *getMapDecorationRotation)(Actor *this);\n  float (__fastcall *getRiderYRotation)(Actor *this, const Actor *);\n  float (__fastcall *getYHeadRot)(Actor *this);\n  bool (__fastcall *isWorldBuilder)(Actor *this);\n  bool (__fastcall *isCreative)(Actor *this);\n  bool (__fastcall *isAdventure)(Actor *this);\n  bool (__fastcall *add)(Actor *this, ItemStack *);\n  bool (__fastcall *drop)(Actor *this, const ItemStack *, bool);\n  bool (__fastcall *getInteraction)(Actor *this, Player *, ActorInteraction *, const Vec3 *);\n  bool (__fastcall *canDestroyBlock)(Actor *this, const Block *);\n  void (__fastcall *setAuxValue)(Actor *this, int);\n  void (__fastcall *setSize)(Actor *this, float, float);\n  int (__fastcall *getLifeSpan)(Actor *this);\n  void (__fastcall *onOrphan)(Actor *this);\n  void (__fastcall *wobble)(Actor *this);\n  bool (__fastcall *wasHurt)(Actor *this);\n  void (__fastcall *startSpinAttack)(Actor *this);\n  void (__fastcall *stopSpinAttack)(Actor *this);\n  void (__fastcall *setDamageNearbyMobs)(Actor *this, bool);\n  bool (__fastcall *hasCritBox)(Actor *this);\n  bool (__fastcall *isCritHit)(Actor *this);\n  void (__fastcall *renderDebugServerState)(Actor *this, const Options *);\n  void (__fastcall *reloadLootTable)(Actor *this, const EquipmentTableDefinition *);\n  void (__fastcall *reloadLootTable)(Actor *this);\n  float (__fastcall *getDeletionDelayTimeSeconds)(Actor *this);\n  void (__fastcall *kill)(Actor *this);\n  void (__fastcall *die)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *shouldTick)(Actor *this);\n  std::shared_ptr<IActorMovementProxy> *(__fastcall *createMovementProxy)(Actor *this, std::shared_ptr<IActorMovementProxy> *result);\n  void (__fastcall *updateEntitySpecificMolangVariables)(Actor *this, RenderParams *);\n  bool (__fastcall *shouldTryMakeStepSound)(Actor *this);\n  float (__fastcall *getNextStep)(Actor *this, const float);\n  bool (__fastcall *canMakeStepSound)(Actor *this);\n  void (__fastcall *outOfWorld)(Actor *this);\n  bool (__fastcall *_hurt)(Actor *this, const ActorDamageSource *, int, bool, bool);\n  void (__fastcall *markHurt)(Actor *this);\n  void (__fastcall *readAdditionalSaveData)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *addAdditionalSaveData)(Actor *this, CompoundTag *);\n  void (__fastcall *_playStepSound)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *_playFlySound)(Actor *this, const BlockPos *, const Block *);\n  bool (__fastcall *_makeFlySound)(Actor *this);\n  void (__fastcall *checkInsideBlocks)(Actor *this, float);\n  void (__fastcall *pushOutOfBlocks)(Actor *this, const Vec3 *);\n  bool (__fastcall *updateWaterState)(Actor *this);\n  void (__fastcall *doWaterSplashEffect)(Actor *this);\n  void (__fastcall *spawnTrailBubbles)(Actor *this);\n  void (__fastcall *updateInsideBlock)(Actor *this);\n  LootTable *(__fastcall *getLootTable)(Actor *this);\n  LootTable *(__fastcall *getDefaultLootTable)(Actor *this);\n  void (__fastcall *_removeRider)(Actor *this, const ActorUniqueID *, bool, bool, bool);\n  void (__fastcall *_onSizeUpdated)(Actor *this);\n  void (__fastcall *_doAutoAttackOnTouch)(Actor *this, Actor *);\n  void (__fastcall *knockback)(Mob *this, Actor *, int, float, float, float, float, float);\n  void (__fastcall *resolveDeathLoot)(Mob *this, int, const ActorDamageSource *);\n  void (__fastcall *spawnAnim)(Mob *this);\n  void (__fastcall *setSleeping)(Mob *this, bool);\n  void (__fastcall *setSprinting)(Mob *this, bool);\n  void (__fastcall *playAmbientSound)(Mob *this);\n  LevelSoundEvent (__fastcall *getAmbientSound)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicks)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicksRange)(Mob *this);\n  const TextureUVCoordinateSet *(__fastcall *getItemInHandIcon)(Mob *this, const ItemStack *, int);\n  float (__fastcall *getSpeed)(Mob *this);\n  void (__fastcall *setSpeed)(Mob *this, float);\n  float (__fastcall *getJumpPower)(Mob *this);\n  bool (__fastcall *hurtEffects)(Mob *this, const ActorDamageSource *, int, bool, bool);\n  int (__fastcall *getMeleeWeaponDamageBonus)(Mob *this, Mob *);\n  int (__fastcall *getMeleeKnockbackBonus)(Mob *this);\n  void (__fastcall *travel)(Mob *this, IMobMovementProxy *, float, float, float);\n  void (__fastcall *travel)(Mob *this, float, float, float);\n  void (__fastcall *applyFinalFriction)(Mob *this, float, bool);\n  void (__fastcall *updateWalkAnim)(Mob *this);\n  void (__fastcall *aiStep)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *aiStep)(Mob *this);\n  void (__fastcall *pushActors)(Mob *this);\n  void (__fastcall *lookAt)(Mob *this, Actor *, float, float);\n  bool (__fastcall *isLookingAtAnEntity)(Mob *this);\n  bool (__fastcall *checkSpawnRules)(Mob *this, bool);\n  bool (__fastcall *checkSpawnObstruction)(Mob *this);\n  float (__fastcall *getAttackAnim)(Mob *this, float);\n  int (__fastcall *getItemUseDuration)(Mob *this);\n  float (__fastcall *getItemUseStartupProgress)(Mob *this);\n  float (__fastcall *getItemUseIntervalProgress)(Mob *this);\n  int (__fastcall *getItemuseIntervalAxis)(Mob *this);\n  int (__fastcall *getTimeAlongSwing)(Mob *this);\n  void (__fastcall *ate)(Mob *this);\n  float (__fastcall *getMaxHeadXRot)(Mob *this);\n  Mob *(__fastcall *getLastHurtByMob)(Mob *this);\n  void (__fastcall *setLastHurtByMob)(Mob *this, Mob *);\n  Player *(__fastcall *getLastHurtByPlayer)(Mob *this);\n  void (__fastcall *setLastHurtByPlayer)(Mob *this, Player *);\n  Mob *(__fastcall *getLastHurtMob)(Mob *this);\n  void (__fastcall *setLastHurtMob)(Mob *this, Actor *);\n  bool (__fastcall *isAlliedTo)(Mob *this, Mob *);\n  bool (__fastcall *doHurtTarget)(Mob *this, Actor *);\n  bool (__fastcall *canBeControlledByRider)(Mob *this);\n  void (__fastcall *leaveCaravan)(Mob *this);\n  void (__fastcall *joinCaravan)(Mob *this, Mob *);\n  bool (__fastcall *hasCaravanTail)(Mob *this);\n  ActorUniqueID *(__fastcall *getCaravanHead)(Mob *this, ActorUniqueID *result);\n  int (__fastcall *getArmorValue)(Mob *this);\n  float (__fastcall *getArmorCoverPercentage)(Mob *this);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int, const std::bitset<4> *);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *hurtArmorSlot)(Mob *this, const ActorDamageSource *, int, ArmorSlot);\n  void (__fastcall *setDamagedArmor)(Mob *this, ArmorSlot, const ItemStack *);\n  void (__fastcall *sendArmorDamage)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *sendArmor)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *containerChanged)(Mob *this, int);\n  void (__fastcall *updateEquipment)(Mob *this);\n  int (__fastcall *clearEquipment)(Mob *this);\n  std::vector<ItemStack const *> *(__fastcall *getAllArmor)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<int> *(__fastcall *getAllArmorID)(Mob *this, std::vector<int> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllHand)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllEquipment)(Mob *this, std::vector<ItemStack const *> *result);\n  int (__fastcall *getArmorTypeHash)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *clearVanishEnchantedItemsOnDeath)(Mob *this);\n  void (__fastcall *sendInventory)(Mob *this, bool);\n  int (__fastcall *getDamageAfterMagicAbsorb)(Mob *this, const ActorDamageSource *, int);\n  bool (__fastcall *createAIGoals)(Mob *this);\n  void (__fastcall *onBorn)(Mob *this, Actor *, Actor *);\n  bool (__fastcall *setItemSlot)(Mob *this, EquipmentSlot, const ItemStack *);\n  void (__fastcall *setTransitioningSitting)(Mob *this, bool);\n  void (__fastcall *attackAnimation)(Mob *this, Actor *, float);\n  int (__fastcall *getAttackTime)(Mob *this);\n  float (__fastcall *_getWalkTargetValue)(Mob *this, const BlockPos *);\n  bool (__fastcall *canExistWhenDisallowMob)(Mob *this);\n  bool (__fastcall *useNewAi)(Mob *this);\n  void (__fastcall *ascendLadder)(Mob *this);\n  void (__fastcall *ascendScaffolding)(Mob *this);\n  void (__fastcall *descendScaffolding)(Mob *this);\n  void (__fastcall *dropContainer)(Mob *this);\n  std::unique_ptr<BodyControl> *(__fastcall *initBodyControl)(Mob *this, std::unique_ptr<BodyControl> *result);\n  void (__fastcall *jumpFromGround)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *jumpFromGround)(Mob *this);\n  void (__fastcall *updateAi)(Mob *this);\n  void (__fastcall *newServerAiStep)(Mob *this);\n  void (__fastcall *_serverAiMobStep)(Mob *this);\n  int (__fastcall *getDamageAfterEnchantReduction)(Mob *this, const ActorDamageSource *, int);\n  int (__fastcall *getDamageAfterArmorAbsorb)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *dropBags)(Mob *this);\n  void (__fastcall *tickDeath)(Mob *this);\n  void (__fastcall *updateGliding)(Mob *this);\n  bool (__fastcall *_allowAscendingScaffolding)(Mob *this);\n};\n\n")])])]),a("h3",{attrs:{id:"theenddimension-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#theenddimension-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TheEndDimension_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TheEndDimension_vtbl\n{\n  void (__fastcall *~BlockSourceListener)(BlockSourceListener *this);\n  void (__fastcall *onSourceCreated)(BlockSourceListener *this, BlockSource *);\n  void (__fastcall *onSourceDestroyed)(BlockSourceListener *this, BlockSource *);\n  void (__fastcall *onAreaChanged)(BlockSourceListener *this, BlockSource *, const BlockPos *, const BlockPos *);\n  void (__fastcall *onBlockChanged)(BlockSourceListener *this, BlockSource *, const BlockPos *, unsigned int, const Block *, const Block *, int, const ActorBlockSyncMessage *);\n  void (__fastcall *onBrightnessChanged)(BlockSourceListener *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onBlockEntityChanged)(BlockSourceListener *this, BlockSource *, BlockActor *);\n  void (__fastcall *onBlockEntityAboutToBeRemoved)(BlockSourceListener *this, BlockSource *, std::shared_ptr<BlockActor>);\n  void (__fastcall *onEntityChanged)(BlockSourceListener *this, BlockSource *, Actor *);\n  void (__fastcall *onBlockEvent)(BlockSourceListener *this, BlockSource *, int, int, int, int, int);\n  void (__fastcall *allChanged)(LevelListener *this);\n  Particle *(__fastcall *addParticle)(LevelListener *this, ParticleType, const Vec3 *, const Vec3 *, int, const CompoundTag *, bool);\n  void (__fastcall *sendServerLegacyParticle)(LevelListener *this, ParticleType, const Vec3 *, const Vec3 *, int);\n  void (__fastcall *addParticleEffect)(LevelListener *this, const HashedString *, const Actor *, const HashedString *, const Vec3 *, const MolangVariableMap *);\n  void (__fastcall *addParticleEffect)(LevelListener *this, const HashedString *, const Vec3 *, const MolangVariableMap *);\n  void (__fastcall *addTerrainParticleEffect)(LevelListener *this, const BlockPos *, const Block *, const Vec3 *, float, float, float);\n  void (__fastcall *addTerrainSlideEffect)(LevelListener *this, const BlockPos *, const Block *, const Vec3 *, float, float, float);\n  void (__fastcall *addBreakingItemParticleEffect)(LevelListener *this, const Vec3 *, ParticleType, const TextureUVCoordinateSet *, bool);\n  void (__fastcall *playMusic)(LevelListener *this, const std::string *, const Vec3 *, float, float);\n  void (__fastcall *playStreamingMusic)(LevelListener *this, const std::string *, int, int, int);\n  void (__fastcall *onEntityAdded)(LevelListener *this, Actor *);\n  void (__fastcall *onEntityRemoved)(LevelListener *this, Actor *);\n  void (__fastcall *onChunkLoaded)(LevelListener *this, ChunkSource *, LevelChunk *);\n  void (__fastcall *onChunkUnloaded)(LevelListener *this, LevelChunk *);\n  void (__fastcall *onLevelDestruction)(LevelListener *this, const std::string *);\n  void (__fastcall *levelEvent)(LevelListener *this, LevelEvent, const CompoundTag *);\n  void (__fastcall *levelEvent)(LevelListener *this, LevelEvent, const Vec3 *, int);\n  void (__fastcall *levelSoundEvent)(LevelListener *this, const std::string *, const Vec3 *, float, float);\n  void (__fastcall *levelSoundEvent)(LevelListener *this, LevelSoundEvent, const Vec3 *, int, const ActorDefinitionIdentifier *, bool, bool);\n  void (__fastcall *stopSoundEvent)(LevelListener *this, const std::string *);\n  void (__fastcall *stopAllSounds)(LevelListener *this);\n  void (__fastcall *takePicture)(LevelListener *this, cg::ImageBuffer *, Actor *, Actor *, ScreenshotOptions *);\n  void (__fastcall *playerListChanged)(LevelListener *this);\n  void (__fastcall *init)(Dimension *this);\n  void (__fastcall *tick)(Dimension *this);\n  void (__fastcall *tickRedstone)(Dimension *this);\n  std::tuple<std::unique_ptr<ChunkSource>,WorldGenerator *> *(__fastcall *createGenerator)(Dimension *this, std::tuple<std::unique_ptr<ChunkSource>,WorldGenerator *> *result);\n  void (__fastcall *upgradeLevelChunk)(Dimension *this, ChunkSource *, LevelChunk *);\n  void (__fastcall *fixWallChunk)(Dimension *this, ChunkSource *, LevelChunk *);\n  bool (__fastcall *isNaturalDimension)(Dimension *this);\n  bool (__fastcall *isValidSpawn)(Dimension *this, int, int);\n  mce::Color *(__fastcall *getBrightnessDependentFogColor)(Dimension *this, mce::Color *result, const mce::Color *, float);\n  float (__fastcall *getMaxFogEnd)(Dimension *this);\n  float (__fastcall *getMaxFogStart)(Dimension *this);\n  bool (__fastcall *isFoggyAt)(Dimension *this, int, int);\n  __int16 (__fastcall *getCloudHeight)(Dimension *this);\n  int (__fastcall *getDefaultBiome)(Dimension *this);\n  bool (__fastcall *mayRespawnViaBed)(Dimension *this);\n  bool (__fastcall *hasGround)(Dimension *this);\n  BlockPos *(__fastcall *getSpawnPos)(Dimension *this, BlockPos *result);\n  int (__fastcall *getSpawnYPosition)(Dimension *this);\n  bool (__fastcall *hasBedrockFog)(Dimension *this);\n  float (__fastcall *getClearColorScale)(Dimension *this);\n  bool (__fastcall *showSky)(Dimension *this);\n  bool (__fastcall *isDay)(Dimension *this);\n  float (__fastcall *getTimeOfDay)(Dimension *this, int, float);\n  float (__fastcall *getSunIntensity)(Dimension *this, float, const Vec3 *, float);\n  bool (__fastcall *forceCheckAllNeighChunkSavedStat)(Dimension *this);\n  Vec3 *(__fastcall *translatePosAcrossDimension)(Dimension *this, Vec3 *result, const Vec3 *, AutomaticID<Dimension,int>);\n  void (__fastcall *sendBroadcast)(Dimension *this, const Packet *, Player *);\n  bool (__fastcall *is2DPositionRelevantForPlayer)(Dimension *this, const BlockPos *, Player *);\n  bool (__fastcall *isEntityRelevantForPlayer)(Dimension *this, Player *, const Actor *);\n  BaseLightTextureImageBuilder *(__fastcall *getLightTextureImageBuilder)(Dimension *this);\n  const DimensionBrightnessRamp *(__fastcall *getBrightnessRamp)(Dimension *this);\n  void (__fastcall *startLeaveGame)(Dimension *this);\n  std::unique_ptr<ChunkBuildOrderPolicyBase> *(__fastcall *_createChunkBuildOrderPolicy)(Dimension *this, std::unique_ptr<ChunkBuildOrderPolicyBase> *result);\n  void (__fastcall *_upgradeOldLimboEntity)(Dimension *this, CompoundTag *, LimboEntitiesVersion);\n  std::unique_ptr<ChunkSource> *(__fastcall *_wrapStorageForVersionCompatibility)(Dimension *this, std::unique_ptr<ChunkSource> *result, std::unique_ptr<ChunkSource>, StorageVersion);\n};\n\n")])])]),a("h3",{attrs:{id:"tropicalfish-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tropicalfish-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("TropicalFish_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ TropicalFish_vtbl\n{\n  bool (__fastcall *hasComponent)(Actor *this, const HashedString *);\n  void (__fastcall *reloadHardcoded)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadHardcodedClient)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *initializeComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *_serverInitItemStackIds)(Actor *this);\n  void (__fastcall *_doInitialMove)(Actor *this);\n  bool (__fastcall *checkAllSensitiveWords)(Actor *this);\n  bool (__fastcall *checkNameTag)(Actor *this);\n  void (__fastcall *~Actor)(Actor *this);\n  void (__fastcall *reset)(Actor *this);\n  int (__fastcall *getOnDeathExperience)(Actor *this);\n  ActorType (__fastcall *getOwnerEntityType)(Actor *this);\n  void (__fastcall *remove)(Actor *this);\n  void (__fastcall *setPos)(Actor *this, const Vec3 *);\n  const PredictedMovementValues *(__fastcall *getPredictedMovementValues)(Actor *this);\n  const Vec3 *(__fastcall *getPos)(Actor *this);\n  const Vec3 *(__fastcall *getPosOld)(Actor *this);\n  const Vec3 *(__fastcall *getPosExtrapolated)(Actor *this, const Vec3 *result, float);\n  Vec3 *(__fastcall *getAttachPos)(Actor *this, Vec3 *result, ActorLocation, float);\n  Vec3 *(__fastcall *getFiringPos)(Actor *this, Vec3 *result);\n  void (__fastcall *setRot)(Actor *this, const Vec2 *);\n  void (__fastcall *move)(Actor *this, IActorMovementProxy *, const Vec3 *);\n  void (__fastcall *move)(Actor *this, const Vec3 *);\n  Vec3 *(__fastcall *getInterpolatedRidingPosition)(Actor *this, Vec3 *result, float);\n  float (__fastcall *getInterpolatedBodyRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedHeadRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedBodyYaw)(Actor *this, float);\n  float (__fastcall *getYawSpeedInDegreesPerSecond)(Actor *this);\n  float (__fastcall *getInterpolatedWalkAnimSpeed)(Actor *this, float);\n  Vec3 *(__fastcall *getInterpolatedRidingOffset)(Actor *this, Vec3 *result, float);\n  void (__fastcall *checkBlockCollisions)(Actor *this);\n  void (__fastcall *checkBlockCollisions)(Actor *this, const AABB *, std::function<void __cdecl(BlockSource &,Block const &,BlockPos const &,Actor &)>);\n  bool (__fastcall *isFireImmune)(Actor *this);\n  bool (__fastcall *breaksFallingBlocks)(Actor *this);\n  void (__fastcall *blockedByShield)(Actor *this, const ActorDamageSource *, Actor *);\n  void (__fastcall *teleportTo)(Actor *this, const Vec3 *, bool, int, int, const ActorUniqueID *);\n  bool (__fastcall *tryTeleportTo)(Actor *this, const Vec3 *, bool, bool, int, int);\n  void (__fastcall *chorusFruitTeleport)(Actor *this, Vec3 *);\n  void (__fastcall *lerpTo)(Actor *this, const Vec3 *, const Vec2 *, int);\n  void (__fastcall *lerpMotion)(Actor *this, const Vec3 *);\n  std::unique_ptr<AddActorBasePacket> *(__fastcall *getAddPacket)(Actor *this, std::unique_ptr<AddActorBasePacket> *result);\n  void (__fastcall *normalTick)(Actor *this);\n  void (__fastcall *baseTick)(Actor *this);\n  void (__fastcall *rideTick)(Actor *this);\n  void (__fastcall *positionRider)(Actor *this, Actor *, float);\n  float (__fastcall *getRidingHeight)(Actor *this);\n  bool (__fastcall *startRiding)(Actor *this, Actor *);\n  void (__fastcall *addRider)(Actor *this, Actor *);\n  void (__fastcall *flagRiderToRemove)(Actor *this, Actor *);\n  std::string *(__fastcall *getExitTip)(Actor *this, std::string *result, const std::string *, InputMode);\n  bool (__fastcall *intersects)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *, float);\n  bool (__fastcall *isInWall)(Actor *this);\n  bool (__fastcall *isInvisible)(Actor *this);\n  bool (__fastcall *canShowNameTag)(Actor *this);\n  bool (__fastcall *canExistInPeaceful)(Actor *this);\n  void (__fastcall *setNameTagVisible)(Actor *this, bool);\n  const std::string *(__fastcall *getNameTag)(Actor *this);\n  unsigned __int64 (__fastcall *getNameTagAsHash)(Actor *this);\n  std::string *(__fastcall *getFormattedNameTag)(Actor *this, std::string *result);\n  void (__fastcall *filterFormattedNameTag)(Actor *this, const UIProfanityContext *);\n  void (__fastcall *setNameTag)(Actor *this, const std::string *);\n  bool (__fastcall *getAlwaysShowNameTag)(Actor *this);\n  void (__fastcall *setScoreTag)(Actor *this, const std::string *);\n  const std::string *(__fastcall *getScoreTag)(Actor *this);\n  bool (__fastcall *isInWater)(Actor *this);\n  bool (__fastcall *hasEnteredWater)(Actor *this);\n  bool (__fastcall *isImmersedInWater)(Actor *this);\n  bool (__fastcall *isInWaterOrRain)(Actor *this);\n  bool (__fastcall *isInLava)(Actor *this);\n  bool (__fastcall *isUnderLiquid)(Actor *this, MaterialType);\n  bool (__fastcall *isOverWater)(Actor *this);\n  void (__fastcall *makeStuckInBlock)(Actor *this, const Vec3 *);\n  float (__fastcall *getCameraOffset)(Actor *this);\n  float (__fastcall *getShadowHeightOffs)(Actor *this);\n  float (__fastcall *getShadowRadius)(Actor *this);\n  Vec3 *(__fastcall *getHeadLookVector)(Actor *this, Vec3 *result, float);\n  bool (__fastcall *canSeeInvisible)(Actor *this);\n  bool (__fastcall *canSee)(Actor *this, const Vec3 *);\n  bool (__fastcall *canSee)(Actor *this, const Actor *);\n  bool (__fastcall *isSkyLit)(Actor *this, float);\n  float (__fastcall *getBrightness)(Actor *this, float);\n  bool (__fastcall *interactPreventDefault)(Actor *this);\n  void (__fastcall *playerTouch)(Actor *this, Player *);\n  void (__fastcall *onAboveBubbleColumn)(Actor *this, const bool);\n  void (__fastcall *onInsideBubbleColumn)(Actor *this, const bool);\n  bool (__fastcall *isImmobile)(Actor *this);\n  bool (__fastcall *isSilent)(Actor *this);\n  bool (__fastcall *isPickable)(Actor *this);\n  bool (__fastcall *isFishable)(Actor *this);\n  bool (__fastcall *isSleeping)(Actor *this);\n  bool (__fastcall *isShootable)(Actor *this);\n  void (__fastcall *setSneaking)(Actor *this, bool);\n  bool (__fastcall *isBlocking)(Actor *this);\n  bool (__fastcall *isDamageBlocked)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *isAlive)(Actor *this);\n  bool (__fastcall *isOnFire)(Actor *this);\n  bool (__fastcall *isOnHotBlock)(Actor *this);\n  bool (__fastcall *isCreativeModeAllowed)(Actor *this);\n  bool (__fastcall *isSurfaceMob)(Actor *this);\n  bool (__fastcall *isTargetable)(Actor *this);\n  bool (__fastcall *isLocalPlayer)(Actor *this);\n  bool (__fastcall *isPlayer)(Actor *this);\n  bool (__fastcall *canAttack)(Actor *this, Actor *, bool);\n  void (__fastcall *setTarget)(Actor *this, Actor *);\n  Actor *(__fastcall *findAttackTarget)(Actor *this);\n  bool (__fastcall *isValidTarget)(Actor *this, Actor *);\n  bool (__fastcall *attack)(Actor *this, Actor *);\n  void (__fastcall *performRangedAttack)(Actor *this, Actor *, float);\n  void (__fastcall *adjustDamageAmount)(Actor *this, int *);\n  int (__fastcall *getEquipmentCount)(Actor *this);\n  void (__fastcall *setOwner)(Actor *this, const ActorUniqueID);\n  void (__fastcall *setSitting)(Actor *this, bool);\n  void (__fastcall *onTame)(Actor *this);\n  void (__fastcall *onFailedTame)(Actor *this);\n  int (__fastcall *getInventorySize)(Actor *this);\n  int (__fastcall *getEquipSlots)(Actor *this);\n  int (__fastcall *getChestSlots)(Actor *this);\n  void (__fastcall *setStanding)(Actor *this, bool);\n  bool (__fastcall *canPowerJump)(Actor *this);\n  void (__fastcall *setCanPowerJump)(Actor *this, bool);\n  bool (__fastcall *isJumping)(Actor *this);\n  bool (__fastcall *isEnchanted)(Actor *this);\n  void (__fastcall *rideJumped)(Actor *this);\n  void (__fastcall *rideLanded)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *shouldRender)(Actor *this);\n  bool (__fastcall *isInvulnerableTo)(Actor *this, const ActorDamageSource *);\n  ActorDamageCause (__fastcall *getBlockDamageCause)(Actor *this, const Block *);\n  void (__fastcall *actuallyHurt)(Actor *this, int, const ActorDamageSource *, bool);\n  void (__fastcall *animateHurt)(Actor *this);\n  bool (__fastcall *doFireHurt)(Actor *this, int);\n  void (__fastcall *onLightningHit)(Actor *this);\n  void (__fastcall *onBounceStarted)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *feed)(Actor *this, int);\n  void (__fastcall *handleEntityEvent)(Actor *this, ActorEvent, int);\n  float (__fastcall *getPickRadius)(Actor *this);\n  const HashedString *(__fastcall *getActorRendererId)(Actor *this);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const ItemStack *, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int);\n  void (__fastcall *despawn)(Actor *this);\n  void (__fastcall *killed)(Actor *this, Actor *);\n  void (__fastcall *awardKillScore)(Actor *this, Actor *, int);\n  void (__fastcall *setArmor)(Actor *this, ArmorSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getArmor)(Actor *this, ArmorSlot);\n  ArmorMaterialType (__fastcall *getArmorMaterialTypeInSlot)(Actor *this, ArmorSlot);\n  ArmorTextureType (__fastcall *getArmorMaterialTextureTypeInSlot)(Actor *this, ArmorSlot);\n  float (__fastcall *getArmorColorInSlot)(Actor *this, ArmorSlot, int);\n  const ItemStack *(__fastcall *getEquippedSlot)(Actor *this, EquipmentSlot);\n  void (__fastcall *setEquippedSlot)(Actor *this, EquipmentSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getCarriedItem)(Actor *this);\n  void (__fastcall *setCarriedItem)(Actor *this, const ItemStack *);\n  void (__fastcall *setOffhandSlot)(Actor *this, const ItemStack *);\n  const ItemStack *(__fastcall *getEquippedTotem)(Actor *this);\n  bool (__fastcall *consumeTotem)(Actor *this);\n  bool (__fastcall *save)(Actor *this, CompoundTag *);\n  void (__fastcall *saveWithoutId)(Actor *this, CompoundTag *);\n  bool (__fastcall *load)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *loadLinks)(Actor *this, const CompoundTag *, std::vector<ActorLink> *, DataLoadHelper *);\n  ActorType (__fastcall *getEntityTypeId)(Actor *this);\n  const HashedString *(__fastcall *queryEntityRenderer)(Actor *this);\n  ActorUniqueID *(__fastcall *getSourceUniqueID)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *setOnFire)(Actor *this, int);\n  AABB *(__fastcall *getHandleWaterAABB)(Actor *this, AABB *result);\n  void (__fastcall *handleInsidePortal)(Actor *this, const BlockPos *);\n  int (__fastcall *getPortalCooldown)(Actor *this);\n  int (__fastcall *getPortalWaitTime)(Actor *this);\n  AutomaticID<Dimension,int> *(__fastcall *getDimensionId)(Actor *this, AutomaticID<Dimension,int> *result);\n  bool (__fastcall *canChangeDimensions)(Actor *this);\n  void (__fastcall *changeDimension)(Actor *this, const ChangeDimensionPacket *);\n  void (__fastcall *changeDimension)(Actor *this, AutomaticID<Dimension,int>, bool);\n  ActorUniqueID *(__fastcall *getControllingPlayer)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *checkFallDamage)(Actor *this, float, bool);\n  void (__fastcall *causeFallDamage)(Actor *this, float);\n  void (__fastcall *handleFallDistanceOnServer)(Actor *this, float, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, int, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, const Block *, bool);\n  void (__fastcall *onSynchedDataUpdate)(Actor *this, int);\n  bool (__fastcall *canAddRider)(Actor *this, Actor *);\n  bool (__fastcall *canPickupItem)(Actor *this, const ItemStack *);\n  bool (__fastcall *canBePulledIntoVehicle)(Actor *this);\n  bool (__fastcall *inCaravan)(Actor *this);\n  bool (__fastcall *isLeashableType)(Actor *this);\n  void (__fastcall *tickLeash)(Actor *this);\n  void (__fastcall *sendMotionPacketIfNeeded)(Actor *this);\n  bool (__fastcall *canSynchronizeNewEntity)(Actor *this);\n  bool (__fastcall *stopRiding)(Actor *this, bool, bool, bool, bool);\n  void (__fastcall *startSwimming)(Actor *this);\n  void (__fastcall *stopSwimming)(Actor *this);\n  void (__fastcall *buildDebugInfo)(Actor *this, std::string *);\n  CommandPermissionLevel (__fastcall *getCommandPermissionLevel)(Actor *this);\n  AttributeInstance *(__fastcall *getMutableAttribute)(Actor *this, const Attribute *);\n  const AttributeInstance *(__fastcall *getAttribute)(Actor *this, const Attribute *);\n  int (__fastcall *getDeathTime)(Actor *this);\n  void (__fastcall *heal)(Actor *this, int);\n  bool (__fastcall *isInvertedHealAndHarm)(Actor *this);\n  bool (__fastcall *canBeAffected)(Actor *this, const MobEffectInstance *);\n  bool (__fastcall *canBeAffected)(Actor *this, int);\n  bool (__fastcall *canBeAffectedByArrow)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectAdded)(Actor *this, MobEffectInstance *);\n  void (__fastcall *onEffectUpdated)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectRemoved)(Actor *this, MobEffectInstance *);\n  AnimationComponent *(__fastcall *getAnimationComponent)(Actor *this);\n  void (__fastcall *openContainerComponent)(Actor *this, Player *);\n  void (__fastcall *swing)(Actor *this);\n  void (__fastcall *useItem)(Actor *this, ItemStackBase *, ItemUseMethod, bool);\n  bool (__fastcall *hasOutputSignal)(Actor *this, unsigned __int8);\n  int (__fastcall *getOutputSignal)(Actor *this);\n  void (__fastcall *getDebugText)(Actor *this, std::vector<std::string> *);\n  float (__fastcall *getMapDecorationRotation)(Actor *this);\n  float (__fastcall *getRiderYRotation)(Actor *this, const Actor *);\n  float (__fastcall *getYHeadRot)(Actor *this);\n  bool (__fastcall *isWorldBuilder)(Actor *this);\n  bool (__fastcall *isCreative)(Actor *this);\n  bool (__fastcall *isAdventure)(Actor *this);\n  bool (__fastcall *add)(Actor *this, ItemStack *);\n  bool (__fastcall *drop)(Actor *this, const ItemStack *, bool);\n  bool (__fastcall *getInteraction)(Actor *this, Player *, ActorInteraction *, const Vec3 *);\n  bool (__fastcall *canDestroyBlock)(Actor *this, const Block *);\n  void (__fastcall *setAuxValue)(Actor *this, int);\n  void (__fastcall *setSize)(Actor *this, float, float);\n  int (__fastcall *getLifeSpan)(Actor *this);\n  void (__fastcall *onOrphan)(Actor *this);\n  void (__fastcall *wobble)(Actor *this);\n  bool (__fastcall *wasHurt)(Actor *this);\n  void (__fastcall *startSpinAttack)(Actor *this);\n  void (__fastcall *stopSpinAttack)(Actor *this);\n  void (__fastcall *setDamageNearbyMobs)(Actor *this, bool);\n  bool (__fastcall *hasCritBox)(Actor *this);\n  bool (__fastcall *isCritHit)(Actor *this);\n  void (__fastcall *renderDebugServerState)(Actor *this, const Options *);\n  void (__fastcall *reloadLootTable)(Actor *this, const EquipmentTableDefinition *);\n  void (__fastcall *reloadLootTable)(Actor *this);\n  float (__fastcall *getDeletionDelayTimeSeconds)(Actor *this);\n  void (__fastcall *kill)(Actor *this);\n  void (__fastcall *die)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *shouldTick)(Actor *this);\n  std::shared_ptr<IActorMovementProxy> *(__fastcall *createMovementProxy)(Actor *this, std::shared_ptr<IActorMovementProxy> *result);\n  void (__fastcall *updateEntitySpecificMolangVariables)(Actor *this, RenderParams *);\n  bool (__fastcall *shouldTryMakeStepSound)(Actor *this);\n  float (__fastcall *getNextStep)(Actor *this, const float);\n  bool (__fastcall *canMakeStepSound)(Actor *this);\n  void (__fastcall *outOfWorld)(Actor *this);\n  bool (__fastcall *_hurt)(Actor *this, const ActorDamageSource *, int, bool, bool);\n  void (__fastcall *markHurt)(Actor *this);\n  void (__fastcall *readAdditionalSaveData)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *addAdditionalSaveData)(Actor *this, CompoundTag *);\n  void (__fastcall *_playStepSound)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *_playFlySound)(Actor *this, const BlockPos *, const Block *);\n  bool (__fastcall *_makeFlySound)(Actor *this);\n  void (__fastcall *checkInsideBlocks)(Actor *this, float);\n  void (__fastcall *pushOutOfBlocks)(Actor *this, const Vec3 *);\n  bool (__fastcall *updateWaterState)(Actor *this);\n  void (__fastcall *doWaterSplashEffect)(Actor *this);\n  void (__fastcall *spawnTrailBubbles)(Actor *this);\n  void (__fastcall *updateInsideBlock)(Actor *this);\n  LootTable *(__fastcall *getLootTable)(Actor *this);\n  LootTable *(__fastcall *getDefaultLootTable)(Actor *this);\n  void (__fastcall *_removeRider)(Actor *this, const ActorUniqueID *, bool, bool, bool);\n  void (__fastcall *_onSizeUpdated)(Actor *this);\n  void (__fastcall *_doAutoAttackOnTouch)(Actor *this, Actor *);\n  void (__fastcall *knockback)(Mob *this, Actor *, int, float, float, float, float, float);\n  void (__fastcall *resolveDeathLoot)(Mob *this, int, const ActorDamageSource *);\n  void (__fastcall *spawnAnim)(Mob *this);\n  void (__fastcall *setSleeping)(Mob *this, bool);\n  void (__fastcall *setSprinting)(Mob *this, bool);\n  void (__fastcall *playAmbientSound)(Mob *this);\n  LevelSoundEvent (__fastcall *getAmbientSound)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicks)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicksRange)(Mob *this);\n  const TextureUVCoordinateSet *(__fastcall *getItemInHandIcon)(Mob *this, const ItemStack *, int);\n  float (__fastcall *getSpeed)(Mob *this);\n  void (__fastcall *setSpeed)(Mob *this, float);\n  float (__fastcall *getJumpPower)(Mob *this);\n  bool (__fastcall *hurtEffects)(Mob *this, const ActorDamageSource *, int, bool, bool);\n  int (__fastcall *getMeleeWeaponDamageBonus)(Mob *this, Mob *);\n  int (__fastcall *getMeleeKnockbackBonus)(Mob *this);\n  void (__fastcall *travel)(Mob *this, IMobMovementProxy *, float, float, float);\n  void (__fastcall *travel)(Mob *this, float, float, float);\n  void (__fastcall *applyFinalFriction)(Mob *this, float, bool);\n  void (__fastcall *updateWalkAnim)(Mob *this);\n  void (__fastcall *aiStep)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *aiStep)(Mob *this);\n  void (__fastcall *pushActors)(Mob *this);\n  void (__fastcall *lookAt)(Mob *this, Actor *, float, float);\n  bool (__fastcall *isLookingAtAnEntity)(Mob *this);\n  bool (__fastcall *checkSpawnRules)(Mob *this, bool);\n  bool (__fastcall *checkSpawnObstruction)(Mob *this);\n  float (__fastcall *getAttackAnim)(Mob *this, float);\n  int (__fastcall *getItemUseDuration)(Mob *this);\n  float (__fastcall *getItemUseStartupProgress)(Mob *this);\n  float (__fastcall *getItemUseIntervalProgress)(Mob *this);\n  int (__fastcall *getItemuseIntervalAxis)(Mob *this);\n  int (__fastcall *getTimeAlongSwing)(Mob *this);\n  void (__fastcall *ate)(Mob *this);\n  float (__fastcall *getMaxHeadXRot)(Mob *this);\n  Mob *(__fastcall *getLastHurtByMob)(Mob *this);\n  void (__fastcall *setLastHurtByMob)(Mob *this, Mob *);\n  Player *(__fastcall *getLastHurtByPlayer)(Mob *this);\n  void (__fastcall *setLastHurtByPlayer)(Mob *this, Player *);\n  Mob *(__fastcall *getLastHurtMob)(Mob *this);\n  void (__fastcall *setLastHurtMob)(Mob *this, Actor *);\n  bool (__fastcall *isAlliedTo)(Mob *this, Mob *);\n  bool (__fastcall *doHurtTarget)(Mob *this, Actor *);\n  bool (__fastcall *canBeControlledByRider)(Mob *this);\n  void (__fastcall *leaveCaravan)(Mob *this);\n  void (__fastcall *joinCaravan)(Mob *this, Mob *);\n  bool (__fastcall *hasCaravanTail)(Mob *this);\n  ActorUniqueID *(__fastcall *getCaravanHead)(Mob *this, ActorUniqueID *result);\n  int (__fastcall *getArmorValue)(Mob *this);\n  float (__fastcall *getArmorCoverPercentage)(Mob *this);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int, const std::bitset<4> *);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *hurtArmorSlot)(Mob *this, const ActorDamageSource *, int, ArmorSlot);\n  void (__fastcall *setDamagedArmor)(Mob *this, ArmorSlot, const ItemStack *);\n  void (__fastcall *sendArmorDamage)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *sendArmor)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *containerChanged)(Mob *this, int);\n  void (__fastcall *updateEquipment)(Mob *this);\n  int (__fastcall *clearEquipment)(Mob *this);\n  std::vector<ItemStack const *> *(__fastcall *getAllArmor)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<int> *(__fastcall *getAllArmorID)(Mob *this, std::vector<int> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllHand)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllEquipment)(Mob *this, std::vector<ItemStack const *> *result);\n  int (__fastcall *getArmorTypeHash)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *clearVanishEnchantedItemsOnDeath)(Mob *this);\n  void (__fastcall *sendInventory)(Mob *this, bool);\n  int (__fastcall *getDamageAfterMagicAbsorb)(Mob *this, const ActorDamageSource *, int);\n  bool (__fastcall *createAIGoals)(Mob *this);\n  void (__fastcall *onBorn)(Mob *this, Actor *, Actor *);\n  bool (__fastcall *setItemSlot)(Mob *this, EquipmentSlot, const ItemStack *);\n  void (__fastcall *setTransitioningSitting)(Mob *this, bool);\n  void (__fastcall *attackAnimation)(Mob *this, Actor *, float);\n  int (__fastcall *getAttackTime)(Mob *this);\n  float (__fastcall *_getWalkTargetValue)(Mob *this, const BlockPos *);\n  bool (__fastcall *canExistWhenDisallowMob)(Mob *this);\n  bool (__fastcall *useNewAi)(Mob *this);\n  void (__fastcall *ascendLadder)(Mob *this);\n  void (__fastcall *ascendScaffolding)(Mob *this);\n  void (__fastcall *descendScaffolding)(Mob *this);\n  void (__fastcall *dropContainer)(Mob *this);\n  std::unique_ptr<BodyControl> *(__fastcall *initBodyControl)(Mob *this, std::unique_ptr<BodyControl> *result);\n  void (__fastcall *jumpFromGround)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *jumpFromGround)(Mob *this);\n  void (__fastcall *updateAi)(Mob *this);\n  void (__fastcall *newServerAiStep)(Mob *this);\n  void (__fastcall *_serverAiMobStep)(Mob *this);\n  int (__fastcall *getDamageAfterEnchantReduction)(Mob *this, const ActorDamageSource *, int);\n  int (__fastcall *getDamageAfterArmorAbsorb)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *dropBags)(Mob *this);\n  void (__fastcall *tickDeath)(Mob *this);\n  void (__fastcall *updateGliding)(Mob *this);\n  bool (__fastcall *_allowAscendingScaffolding)(Mob *this);\n};\n\n")])])]),a("h3",{attrs:{id:"turtle-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#turtle-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("Turtle_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ Turtle_vtbl\n{\n  bool (__fastcall *hasComponent)(Actor *this, const HashedString *);\n  void (__fastcall *reloadHardcoded)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadHardcodedClient)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *initializeComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *_serverInitItemStackIds)(Actor *this);\n  void (__fastcall *_doInitialMove)(Actor *this);\n  bool (__fastcall *checkAllSensitiveWords)(Actor *this);\n  bool (__fastcall *checkNameTag)(Actor *this);\n  void (__fastcall *~Actor)(Actor *this);\n  void (__fastcall *reset)(Actor *this);\n  int (__fastcall *getOnDeathExperience)(Actor *this);\n  ActorType (__fastcall *getOwnerEntityType)(Actor *this);\n  void (__fastcall *remove)(Actor *this);\n  void (__fastcall *setPos)(Actor *this, const Vec3 *);\n  const PredictedMovementValues *(__fastcall *getPredictedMovementValues)(Actor *this);\n  const Vec3 *(__fastcall *getPos)(Actor *this);\n  const Vec3 *(__fastcall *getPosOld)(Actor *this);\n  const Vec3 *(__fastcall *getPosExtrapolated)(Actor *this, const Vec3 *result, float);\n  Vec3 *(__fastcall *getAttachPos)(Actor *this, Vec3 *result, ActorLocation, float);\n  Vec3 *(__fastcall *getFiringPos)(Actor *this, Vec3 *result);\n  void (__fastcall *setRot)(Actor *this, const Vec2 *);\n  void (__fastcall *move)(Actor *this, IActorMovementProxy *, const Vec3 *);\n  void (__fastcall *move)(Actor *this, const Vec3 *);\n  Vec3 *(__fastcall *getInterpolatedRidingPosition)(Actor *this, Vec3 *result, float);\n  float (__fastcall *getInterpolatedBodyRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedHeadRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedBodyYaw)(Actor *this, float);\n  float (__fastcall *getYawSpeedInDegreesPerSecond)(Actor *this);\n  float (__fastcall *getInterpolatedWalkAnimSpeed)(Actor *this, float);\n  Vec3 *(__fastcall *getInterpolatedRidingOffset)(Actor *this, Vec3 *result, float);\n  void (__fastcall *checkBlockCollisions)(Actor *this);\n  void (__fastcall *checkBlockCollisions)(Actor *this, const AABB *, std::function<void __cdecl(BlockSource &,Block const &,BlockPos const &,Actor &)>);\n  bool (__fastcall *isFireImmune)(Actor *this);\n  bool (__fastcall *breaksFallingBlocks)(Actor *this);\n  void (__fastcall *blockedByShield)(Actor *this, const ActorDamageSource *, Actor *);\n  void (__fastcall *teleportTo)(Actor *this, const Vec3 *, bool, int, int, const ActorUniqueID *);\n  bool (__fastcall *tryTeleportTo)(Actor *this, const Vec3 *, bool, bool, int, int);\n  void (__fastcall *chorusFruitTeleport)(Actor *this, Vec3 *);\n  void (__fastcall *lerpTo)(Actor *this, const Vec3 *, const Vec2 *, int);\n  void (__fastcall *lerpMotion)(Actor *this, const Vec3 *);\n  std::unique_ptr<AddActorBasePacket> *(__fastcall *getAddPacket)(Actor *this, std::unique_ptr<AddActorBasePacket> *result);\n  void (__fastcall *normalTick)(Actor *this);\n  void (__fastcall *baseTick)(Actor *this);\n  void (__fastcall *rideTick)(Actor *this);\n  void (__fastcall *positionRider)(Actor *this, Actor *, float);\n  float (__fastcall *getRidingHeight)(Actor *this);\n  bool (__fastcall *startRiding)(Actor *this, Actor *);\n  void (__fastcall *addRider)(Actor *this, Actor *);\n  void (__fastcall *flagRiderToRemove)(Actor *this, Actor *);\n  std::string *(__fastcall *getExitTip)(Actor *this, std::string *result, const std::string *, InputMode);\n  bool (__fastcall *intersects)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *, float);\n  bool (__fastcall *isInWall)(Actor *this);\n  bool (__fastcall *isInvisible)(Actor *this);\n  bool (__fastcall *canShowNameTag)(Actor *this);\n  bool (__fastcall *canExistInPeaceful)(Actor *this);\n  void (__fastcall *setNameTagVisible)(Actor *this, bool);\n  const std::string *(__fastcall *getNameTag)(Actor *this);\n  unsigned __int64 (__fastcall *getNameTagAsHash)(Actor *this);\n  std::string *(__fastcall *getFormattedNameTag)(Actor *this, std::string *result);\n  void (__fastcall *filterFormattedNameTag)(Actor *this, const UIProfanityContext *);\n  void (__fastcall *setNameTag)(Actor *this, const std::string *);\n  bool (__fastcall *getAlwaysShowNameTag)(Actor *this);\n  void (__fastcall *setScoreTag)(Actor *this, const std::string *);\n  const std::string *(__fastcall *getScoreTag)(Actor *this);\n  bool (__fastcall *isInWater)(Actor *this);\n  bool (__fastcall *hasEnteredWater)(Actor *this);\n  bool (__fastcall *isImmersedInWater)(Actor *this);\n  bool (__fastcall *isInWaterOrRain)(Actor *this);\n  bool (__fastcall *isInLava)(Actor *this);\n  bool (__fastcall *isUnderLiquid)(Actor *this, MaterialType);\n  bool (__fastcall *isOverWater)(Actor *this);\n  void (__fastcall *makeStuckInBlock)(Actor *this, const Vec3 *);\n  float (__fastcall *getCameraOffset)(Actor *this);\n  float (__fastcall *getShadowHeightOffs)(Actor *this);\n  float (__fastcall *getShadowRadius)(Actor *this);\n  Vec3 *(__fastcall *getHeadLookVector)(Actor *this, Vec3 *result, float);\n  bool (__fastcall *canSeeInvisible)(Actor *this);\n  bool (__fastcall *canSee)(Actor *this, const Vec3 *);\n  bool (__fastcall *canSee)(Actor *this, const Actor *);\n  bool (__fastcall *isSkyLit)(Actor *this, float);\n  float (__fastcall *getBrightness)(Actor *this, float);\n  bool (__fastcall *interactPreventDefault)(Actor *this);\n  void (__fastcall *playerTouch)(Actor *this, Player *);\n  void (__fastcall *onAboveBubbleColumn)(Actor *this, const bool);\n  void (__fastcall *onInsideBubbleColumn)(Actor *this, const bool);\n  bool (__fastcall *isImmobile)(Actor *this);\n  bool (__fastcall *isSilent)(Actor *this);\n  bool (__fastcall *isPickable)(Actor *this);\n  bool (__fastcall *isFishable)(Actor *this);\n  bool (__fastcall *isSleeping)(Actor *this);\n  bool (__fastcall *isShootable)(Actor *this);\n  void (__fastcall *setSneaking)(Actor *this, bool);\n  bool (__fastcall *isBlocking)(Actor *this);\n  bool (__fastcall *isDamageBlocked)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *isAlive)(Actor *this);\n  bool (__fastcall *isOnFire)(Actor *this);\n  bool (__fastcall *isOnHotBlock)(Actor *this);\n  bool (__fastcall *isCreativeModeAllowed)(Actor *this);\n  bool (__fastcall *isSurfaceMob)(Actor *this);\n  bool (__fastcall *isTargetable)(Actor *this);\n  bool (__fastcall *isLocalPlayer)(Actor *this);\n  bool (__fastcall *isPlayer)(Actor *this);\n  bool (__fastcall *canAttack)(Actor *this, Actor *, bool);\n  void (__fastcall *setTarget)(Actor *this, Actor *);\n  Actor *(__fastcall *findAttackTarget)(Actor *this);\n  bool (__fastcall *isValidTarget)(Actor *this, Actor *);\n  bool (__fastcall *attack)(Actor *this, Actor *);\n  void (__fastcall *performRangedAttack)(Actor *this, Actor *, float);\n  void (__fastcall *adjustDamageAmount)(Actor *this, int *);\n  int (__fastcall *getEquipmentCount)(Actor *this);\n  void (__fastcall *setOwner)(Actor *this, const ActorUniqueID);\n  void (__fastcall *setSitting)(Actor *this, bool);\n  void (__fastcall *onTame)(Actor *this);\n  void (__fastcall *onFailedTame)(Actor *this);\n  int (__fastcall *getInventorySize)(Actor *this);\n  int (__fastcall *getEquipSlots)(Actor *this);\n  int (__fastcall *getChestSlots)(Actor *this);\n  void (__fastcall *setStanding)(Actor *this, bool);\n  bool (__fastcall *canPowerJump)(Actor *this);\n  void (__fastcall *setCanPowerJump)(Actor *this, bool);\n  bool (__fastcall *isJumping)(Actor *this);\n  bool (__fastcall *isEnchanted)(Actor *this);\n  void (__fastcall *rideJumped)(Actor *this);\n  void (__fastcall *rideLanded)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *shouldRender)(Actor *this);\n  bool (__fastcall *isInvulnerableTo)(Actor *this, const ActorDamageSource *);\n  ActorDamageCause (__fastcall *getBlockDamageCause)(Actor *this, const Block *);\n  void (__fastcall *actuallyHurt)(Actor *this, int, const ActorDamageSource *, bool);\n  void (__fastcall *animateHurt)(Actor *this);\n  bool (__fastcall *doFireHurt)(Actor *this, int);\n  void (__fastcall *onLightningHit)(Actor *this);\n  void (__fastcall *onBounceStarted)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *feed)(Actor *this, int);\n  void (__fastcall *handleEntityEvent)(Actor *this, ActorEvent, int);\n  float (__fastcall *getPickRadius)(Actor *this);\n  const HashedString *(__fastcall *getActorRendererId)(Actor *this);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const ItemStack *, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int);\n  void (__fastcall *despawn)(Actor *this);\n  void (__fastcall *killed)(Actor *this, Actor *);\n  void (__fastcall *awardKillScore)(Actor *this, Actor *, int);\n  void (__fastcall *setArmor)(Actor *this, ArmorSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getArmor)(Actor *this, ArmorSlot);\n  ArmorMaterialType (__fastcall *getArmorMaterialTypeInSlot)(Actor *this, ArmorSlot);\n  ArmorTextureType (__fastcall *getArmorMaterialTextureTypeInSlot)(Actor *this, ArmorSlot);\n  float (__fastcall *getArmorColorInSlot)(Actor *this, ArmorSlot, int);\n  const ItemStack *(__fastcall *getEquippedSlot)(Actor *this, EquipmentSlot);\n  void (__fastcall *setEquippedSlot)(Actor *this, EquipmentSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getCarriedItem)(Actor *this);\n  void (__fastcall *setCarriedItem)(Actor *this, const ItemStack *);\n  void (__fastcall *setOffhandSlot)(Actor *this, const ItemStack *);\n  const ItemStack *(__fastcall *getEquippedTotem)(Actor *this);\n  bool (__fastcall *consumeTotem)(Actor *this);\n  bool (__fastcall *save)(Actor *this, CompoundTag *);\n  void (__fastcall *saveWithoutId)(Actor *this, CompoundTag *);\n  bool (__fastcall *load)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *loadLinks)(Actor *this, const CompoundTag *, std::vector<ActorLink> *, DataLoadHelper *);\n  ActorType (__fastcall *getEntityTypeId)(Actor *this);\n  const HashedString *(__fastcall *queryEntityRenderer)(Actor *this);\n  ActorUniqueID *(__fastcall *getSourceUniqueID)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *setOnFire)(Actor *this, int);\n  AABB *(__fastcall *getHandleWaterAABB)(Actor *this, AABB *result);\n  void (__fastcall *handleInsidePortal)(Actor *this, const BlockPos *);\n  int (__fastcall *getPortalCooldown)(Actor *this);\n  int (__fastcall *getPortalWaitTime)(Actor *this);\n  AutomaticID<Dimension,int> *(__fastcall *getDimensionId)(Actor *this, AutomaticID<Dimension,int> *result);\n  bool (__fastcall *canChangeDimensions)(Actor *this);\n  void (__fastcall *changeDimension)(Actor *this, const ChangeDimensionPacket *);\n  void (__fastcall *changeDimension)(Actor *this, AutomaticID<Dimension,int>, bool);\n  ActorUniqueID *(__fastcall *getControllingPlayer)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *checkFallDamage)(Actor *this, float, bool);\n  void (__fastcall *causeFallDamage)(Actor *this, float);\n  void (__fastcall *handleFallDistanceOnServer)(Actor *this, float, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, int, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, const Block *, bool);\n  void (__fastcall *onSynchedDataUpdate)(Actor *this, int);\n  bool (__fastcall *canAddRider)(Actor *this, Actor *);\n  bool (__fastcall *canPickupItem)(Actor *this, const ItemStack *);\n  bool (__fastcall *canBePulledIntoVehicle)(Actor *this);\n  bool (__fastcall *inCaravan)(Actor *this);\n  bool (__fastcall *isLeashableType)(Actor *this);\n  void (__fastcall *tickLeash)(Actor *this);\n  void (__fastcall *sendMotionPacketIfNeeded)(Actor *this);\n  bool (__fastcall *canSynchronizeNewEntity)(Actor *this);\n  bool (__fastcall *stopRiding)(Actor *this, bool, bool, bool, bool);\n  void (__fastcall *startSwimming)(Actor *this);\n  void (__fastcall *stopSwimming)(Actor *this);\n  void (__fastcall *buildDebugInfo)(Actor *this, std::string *);\n  CommandPermissionLevel (__fastcall *getCommandPermissionLevel)(Actor *this);\n  AttributeInstance *(__fastcall *getMutableAttribute)(Actor *this, const Attribute *);\n  const AttributeInstance *(__fastcall *getAttribute)(Actor *this, const Attribute *);\n  int (__fastcall *getDeathTime)(Actor *this);\n  void (__fastcall *heal)(Actor *this, int);\n  bool (__fastcall *isInvertedHealAndHarm)(Actor *this);\n  bool (__fastcall *canBeAffected)(Actor *this, const MobEffectInstance *);\n  bool (__fastcall *canBeAffected)(Actor *this, int);\n  bool (__fastcall *canBeAffectedByArrow)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectAdded)(Actor *this, MobEffectInstance *);\n  void (__fastcall *onEffectUpdated)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectRemoved)(Actor *this, MobEffectInstance *);\n  AnimationComponent *(__fastcall *getAnimationComponent)(Actor *this);\n  void (__fastcall *openContainerComponent)(Actor *this, Player *);\n  void (__fastcall *swing)(Actor *this);\n  void (__fastcall *useItem)(Actor *this, ItemStackBase *, ItemUseMethod, bool);\n  bool (__fastcall *hasOutputSignal)(Actor *this, unsigned __int8);\n  int (__fastcall *getOutputSignal)(Actor *this);\n  void (__fastcall *getDebugText)(Actor *this, std::vector<std::string> *);\n  float (__fastcall *getMapDecorationRotation)(Actor *this);\n  float (__fastcall *getRiderYRotation)(Actor *this, const Actor *);\n  float (__fastcall *getYHeadRot)(Actor *this);\n  bool (__fastcall *isWorldBuilder)(Actor *this);\n  bool (__fastcall *isCreative)(Actor *this);\n  bool (__fastcall *isAdventure)(Actor *this);\n  bool (__fastcall *add)(Actor *this, ItemStack *);\n  bool (__fastcall *drop)(Actor *this, const ItemStack *, bool);\n  bool (__fastcall *getInteraction)(Actor *this, Player *, ActorInteraction *, const Vec3 *);\n  bool (__fastcall *canDestroyBlock)(Actor *this, const Block *);\n  void (__fastcall *setAuxValue)(Actor *this, int);\n  void (__fastcall *setSize)(Actor *this, float, float);\n  int (__fastcall *getLifeSpan)(Actor *this);\n  void (__fastcall *onOrphan)(Actor *this);\n  void (__fastcall *wobble)(Actor *this);\n  bool (__fastcall *wasHurt)(Actor *this);\n  void (__fastcall *startSpinAttack)(Actor *this);\n  void (__fastcall *stopSpinAttack)(Actor *this);\n  void (__fastcall *setDamageNearbyMobs)(Actor *this, bool);\n  bool (__fastcall *hasCritBox)(Actor *this);\n  bool (__fastcall *isCritHit)(Actor *this);\n  void (__fastcall *renderDebugServerState)(Actor *this, const Options *);\n  void (__fastcall *reloadLootTable)(Actor *this, const EquipmentTableDefinition *);\n  void (__fastcall *reloadLootTable)(Actor *this);\n  float (__fastcall *getDeletionDelayTimeSeconds)(Actor *this);\n  void (__fastcall *kill)(Actor *this);\n  void (__fastcall *die)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *shouldTick)(Actor *this);\n  std::shared_ptr<IActorMovementProxy> *(__fastcall *createMovementProxy)(Actor *this, std::shared_ptr<IActorMovementProxy> *result);\n  void (__fastcall *updateEntitySpecificMolangVariables)(Actor *this, RenderParams *);\n  bool (__fastcall *shouldTryMakeStepSound)(Actor *this);\n  float (__fastcall *getNextStep)(Actor *this, const float);\n  bool (__fastcall *canMakeStepSound)(Actor *this);\n  void (__fastcall *outOfWorld)(Actor *this);\n  bool (__fastcall *_hurt)(Actor *this, const ActorDamageSource *, int, bool, bool);\n  void (__fastcall *markHurt)(Actor *this);\n  void (__fastcall *readAdditionalSaveData)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *addAdditionalSaveData)(Actor *this, CompoundTag *);\n  void (__fastcall *_playStepSound)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *_playFlySound)(Actor *this, const BlockPos *, const Block *);\n  bool (__fastcall *_makeFlySound)(Actor *this);\n  void (__fastcall *checkInsideBlocks)(Actor *this, float);\n  void (__fastcall *pushOutOfBlocks)(Actor *this, const Vec3 *);\n  bool (__fastcall *updateWaterState)(Actor *this);\n  void (__fastcall *doWaterSplashEffect)(Actor *this);\n  void (__fastcall *spawnTrailBubbles)(Actor *this);\n  void (__fastcall *updateInsideBlock)(Actor *this);\n  LootTable *(__fastcall *getLootTable)(Actor *this);\n  LootTable *(__fastcall *getDefaultLootTable)(Actor *this);\n  void (__fastcall *_removeRider)(Actor *this, const ActorUniqueID *, bool, bool, bool);\n  void (__fastcall *_onSizeUpdated)(Actor *this);\n  void (__fastcall *_doAutoAttackOnTouch)(Actor *this, Actor *);\n  void (__fastcall *knockback)(Mob *this, Actor *, int, float, float, float, float, float);\n  void (__fastcall *resolveDeathLoot)(Mob *this, int, const ActorDamageSource *);\n  void (__fastcall *spawnAnim)(Mob *this);\n  void (__fastcall *setSleeping)(Mob *this, bool);\n  void (__fastcall *setSprinting)(Mob *this, bool);\n  void (__fastcall *playAmbientSound)(Mob *this);\n  LevelSoundEvent (__fastcall *getAmbientSound)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicks)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicksRange)(Mob *this);\n  const TextureUVCoordinateSet *(__fastcall *getItemInHandIcon)(Mob *this, const ItemStack *, int);\n  float (__fastcall *getSpeed)(Mob *this);\n  void (__fastcall *setSpeed)(Mob *this, float);\n  float (__fastcall *getJumpPower)(Mob *this);\n  bool (__fastcall *hurtEffects)(Mob *this, const ActorDamageSource *, int, bool, bool);\n  int (__fastcall *getMeleeWeaponDamageBonus)(Mob *this, Mob *);\n  int (__fastcall *getMeleeKnockbackBonus)(Mob *this);\n  void (__fastcall *travel)(Mob *this, IMobMovementProxy *, float, float, float);\n  void (__fastcall *travel)(Mob *this, float, float, float);\n  void (__fastcall *applyFinalFriction)(Mob *this, float, bool);\n  void (__fastcall *updateWalkAnim)(Mob *this);\n  void (__fastcall *aiStep)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *aiStep)(Mob *this);\n  void (__fastcall *pushActors)(Mob *this);\n  void (__fastcall *lookAt)(Mob *this, Actor *, float, float);\n  bool (__fastcall *isLookingAtAnEntity)(Mob *this);\n  bool (__fastcall *checkSpawnRules)(Mob *this, bool);\n  bool (__fastcall *checkSpawnObstruction)(Mob *this);\n  float (__fastcall *getAttackAnim)(Mob *this, float);\n  int (__fastcall *getItemUseDuration)(Mob *this);\n  float (__fastcall *getItemUseStartupProgress)(Mob *this);\n  float (__fastcall *getItemUseIntervalProgress)(Mob *this);\n  int (__fastcall *getItemuseIntervalAxis)(Mob *this);\n  int (__fastcall *getTimeAlongSwing)(Mob *this);\n  void (__fastcall *ate)(Mob *this);\n  float (__fastcall *getMaxHeadXRot)(Mob *this);\n  Mob *(__fastcall *getLastHurtByMob)(Mob *this);\n  void (__fastcall *setLastHurtByMob)(Mob *this, Mob *);\n  Player *(__fastcall *getLastHurtByPlayer)(Mob *this);\n  void (__fastcall *setLastHurtByPlayer)(Mob *this, Player *);\n  Mob *(__fastcall *getLastHurtMob)(Mob *this);\n  void (__fastcall *setLastHurtMob)(Mob *this, Actor *);\n  bool (__fastcall *isAlliedTo)(Mob *this, Mob *);\n  bool (__fastcall *doHurtTarget)(Mob *this, Actor *);\n  bool (__fastcall *canBeControlledByRider)(Mob *this);\n  void (__fastcall *leaveCaravan)(Mob *this);\n  void (__fastcall *joinCaravan)(Mob *this, Mob *);\n  bool (__fastcall *hasCaravanTail)(Mob *this);\n  ActorUniqueID *(__fastcall *getCaravanHead)(Mob *this, ActorUniqueID *result);\n  int (__fastcall *getArmorValue)(Mob *this);\n  float (__fastcall *getArmorCoverPercentage)(Mob *this);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int, const std::bitset<4> *);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *hurtArmorSlot)(Mob *this, const ActorDamageSource *, int, ArmorSlot);\n  void (__fastcall *setDamagedArmor)(Mob *this, ArmorSlot, const ItemStack *);\n  void (__fastcall *sendArmorDamage)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *sendArmor)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *containerChanged)(Mob *this, int);\n  void (__fastcall *updateEquipment)(Mob *this);\n  int (__fastcall *clearEquipment)(Mob *this);\n  std::vector<ItemStack const *> *(__fastcall *getAllArmor)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<int> *(__fastcall *getAllArmorID)(Mob *this, std::vector<int> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllHand)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllEquipment)(Mob *this, std::vector<ItemStack const *> *result);\n  int (__fastcall *getArmorTypeHash)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *clearVanishEnchantedItemsOnDeath)(Mob *this);\n  void (__fastcall *sendInventory)(Mob *this, bool);\n  int (__fastcall *getDamageAfterMagicAbsorb)(Mob *this, const ActorDamageSource *, int);\n  bool (__fastcall *createAIGoals)(Mob *this);\n  void (__fastcall *onBorn)(Mob *this, Actor *, Actor *);\n  bool (__fastcall *setItemSlot)(Mob *this, EquipmentSlot, const ItemStack *);\n  void (__fastcall *setTransitioningSitting)(Mob *this, bool);\n  void (__fastcall *attackAnimation)(Mob *this, Actor *, float);\n  int (__fastcall *getAttackTime)(Mob *this);\n  float (__fastcall *_getWalkTargetValue)(Mob *this, const BlockPos *);\n  bool (__fastcall *canExistWhenDisallowMob)(Mob *this);\n  bool (__fastcall *useNewAi)(Mob *this);\n  void (__fastcall *ascendLadder)(Mob *this);\n  void (__fastcall *ascendScaffolding)(Mob *this);\n  void (__fastcall *descendScaffolding)(Mob *this);\n  void (__fastcall *dropContainer)(Mob *this);\n  std::unique_ptr<BodyControl> *(__fastcall *initBodyControl)(Mob *this, std::unique_ptr<BodyControl> *result);\n  void (__fastcall *jumpFromGround)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *jumpFromGround)(Mob *this);\n  void (__fastcall *updateAi)(Mob *this);\n  void (__fastcall *newServerAiStep)(Mob *this);\n  void (__fastcall *_serverAiMobStep)(Mob *this);\n  int (__fastcall *getDamageAfterEnchantReduction)(Mob *this, const ActorDamageSource *, int);\n  int (__fastcall *getDamageAfterArmorAbsorb)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *dropBags)(Mob *this);\n  void (__fastcall *tickDeath)(Mob *this);\n  void (__fastcall *updateGliding)(Mob *this);\n  bool (__fastcall *_allowAscendingScaffolding)(Mob *this);\n};\n\n")])])]),a("h3",{attrs:{id:"throwinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#throwinfo"}},[t._v("#")]),t._v(" "),a("code",[t._v("ThrowInfo")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("typedef const struct _s_ThrowInfo ThrowInfo;\n\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);