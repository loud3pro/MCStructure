(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{441:function(t,a,o){"use strict";o.r(a);var e=o(27),c=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"k"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k"}},[t._v("#")]),t._v(" K")]),t._v(" "),a("h3",{attrs:{id:"ktx-ktxinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ktx-ktxinfo"}},[t._v("#")]),t._v(" "),a("code",[t._v("KTX::KTXInfo")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("int")])]),t._v(" "),a("td",[t._v("glInterFormat")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("(24) "),a("code",[t._v("std::vector<int>")])]),t._v(" "),a("td",[t._v("imageSizeList")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[t._v("(1) "),a("code",[t._v("unsigned __int8")])]),t._v(" "),a("td",[t._v("mipmapCount")])]),t._v(" "),a("tr",[a("td",[t._v("36")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("storageSize")])])])]),t._v(" "),a("h3",{attrs:{id:"kickcommanddata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kickcommanddata"}},[t._v("#")]),t._v(" "),a("code",[t._v("KickCommandData")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(1) "),a("code",[t._v("_BYTE[1]")])]),t._v(" "),a("td",[t._v("requiredPermissionLevel")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("name")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("description")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("reason")])]),t._v(" "),a("tr",[a("td",[t._v("56")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("success")])]),t._v(" "),a("tr",[a("td",[t._v("72")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("alias")])]),t._v(" "),a("tr",[a("td",[t._v("88")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("targetParamTitle")])]),t._v(" "),a("tr",[a("td",[t._v("104")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("reasonDescription")])])])]),t._v(" "),a("h3",{attrs:{id:"killstrings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#killstrings"}},[t._v("#")]),t._v(" "),a("code",[t._v("KillStrings")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("name")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("description")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("success")])]),t._v(" "),a("tr",[a("td",[t._v("48")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("gsl::basic_string_span<char const ,-1>")])]),t._v(" "),a("td",[t._v("alias")])])])]),t._v(" "),a("h3",{attrs:{id:"keymapping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keymapping"}},[t._v("#")]),t._v(" "),a("code",[t._v("Keymapping")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(32) "),a("code",[t._v("std::string")])]),t._v(" "),a("td",[t._v("mAction")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[t._v("(24) "),a("code",[t._v("std::vector<int>")])]),t._v(" "),a("td",[t._v("mKeys")])]),t._v(" "),a("tr",[a("td",[t._v("56")]),t._v(" "),a("td",[t._v("(1) "),a("code",[t._v("bool")])]),t._v(" "),a("td",[t._v("mAllowRemap")])])])]),t._v(" "),a("h3",{attrs:{id:"keymanager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keymanager"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyManager")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("KeyManager_vtbl *")])]),t._v(" "),a("td",[t._v("__vftable")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("(32) "),a("code",[t._v("std::string")])]),t._v(" "),a("td",[t._v("mPublicKey")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("std::unique_ptr<Crypto::Asymmetric::Asymmetric>")])]),t._v(" "),a("td",[t._v("mInstance")])])])]),t._v(" "),a("h3",{attrs:{id:"keyboardaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardaction"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardAction")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("int")])]),t._v(" "),a("td",[t._v("state")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("(1) "),a("code",[t._v("unsigned __int8")])]),t._v(" "),a("td",[t._v("key")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("int")])]),t._v(" "),a("td",[t._v("controllerId")])])])]),t._v(" "),a("h3",{attrs:{id:"keyornameresult"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyornameresult"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyOrNameResult")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(32) "),a("code",[t._v("std::string")])]),t._v(" "),a("td",[t._v("mString")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("KeyOrNameResult::ResultType")])]),t._v(" "),a("td",[t._v("mType")])])])]),t._v(" "),a("h3",{attrs:{id:"keyframetransform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyframetransform"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyFrameTransform")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(24) "),a("code",[t._v("std::vector<KeyFrameTransformData>")])]),t._v(" "),a("td",[t._v("mPrePost")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[t._v("(16) "),a("code",[t._v("KeyFrameLerpMode")])]),t._v(" "),a("td",[t._v("mLerpMode")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("float")])]),t._v(" "),a("td",[t._v("mKeyFrameTimeStamp")])])])]),t._v(" "),a("h3",{attrs:{id:"keyframelerpmode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyframelerpmode"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyFrameLerpMode")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("std::unique_ptr<glm::tmat4x4<float,0>>")])]),t._v(" "),a("td",[t._v("mPrecomputedCubicCoeffs")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("_BYTE[4]")])]),t._v(" "),a("td",[t._v("mLerpStyle")])])])]),t._v(" "),a("h3",{attrs:{id:"knockbackevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knockbackevent"}},[t._v("#")]),t._v(" "),a("code",[t._v("KnockBackEvent")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(24) "),a("code",[t._v("WeakRefT<EntityRefTraits>")])]),t._v(" "),a("td",[t._v("mActor")])])])]),t._v(" "),a("h3",{attrs:{id:"knownfolderid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knownfolderid"}},[t._v("#")]),t._v(" "),a("code",[t._v("KNOWNFOLDERID")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("Data1")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("(2) "),a("code",[t._v("unsigned __int16")])]),t._v(" "),a("td",[t._v("Data2")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("(2) "),a("code",[t._v("unsigned __int16")])]),t._v(" "),a("td",[t._v("Data3")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("unsigned __int8[8]")])]),t._v(" "),a("td",[t._v("Data4")])])])]),t._v(" "),a("h3",{attrs:{id:"keyboardinputmapping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardinputmapping"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardInputMapping")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(24) "),a("code",[t._v("std::vector<KeyboardKeyBinding>")])]),t._v(" "),a("td",[t._v("keyBindings")])])])]),t._v(" "),a("h3",{attrs:{id:"keyboardmapper-keyboardkeybuttondetails"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardmapper-keyboardkeybuttondetails"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardMapper::KeyboardKeyButtonDetails")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("nameId")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("(1) "),a("code",[t._v("FocusImpact")])]),t._v(" "),a("td",[t._v("focusImpact")])])])]),t._v(" "),a("h3",{attrs:{id:"keyboardmapper-keyboardmappingdata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardmapper-keyboardmappingdata"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardMapper::KeyboardMappingData")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(64) "),a("code",[t._v("std::unordered_multimap<int,KeyboardMapper::KeyboardKeyButtonDetails>")])]),t._v(" "),a("td",[t._v("mKeyboardKeyToButtonDetailsMap")])])])]),t._v(" "),a("h3",{attrs:{id:"keyboardremappinglayout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardremappinglayout"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardRemappingLayout")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) KeyboardRemappingLayout : RemappingLayout\n{\n  const KeyboardType mKeyboardType;\n};\n\n")])])]),a("h3",{attrs:{id:"keyboardremappinglayout-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardremappinglayout-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardRemappingLayout_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KeyboardRemappingLayout_vtbl\n{\n  void (__fastcall *~RemappingLayout)(RemappingLayout *this);\n  void (__fastcall *setMappingWithRawInput)(RemappingLayout *this, const std::string *, int, RawInputType);\n  int (__fastcall *getAdjustedKey)(RemappingLayout *this, int);\n  std::string *(__fastcall *getSaveString)(RemappingLayout *this, std::string *result, const std::string *);\n  std::string *(__fastcall *getMappedKeyName)(RemappingLayout *this, std::string *result, const Keymapping *);\n  std::string *(__fastcall *getMappedKeyName)(RemappingLayout *this, std::string *result, int, bool);\n  std::string *(__fastcall *getMappedKeyName)(RemappingLayout *this, std::string *result, int);\n  std::string *(__fastcall *getKeySpriteLocation)(RemappingLayout *this, std::string *result, const Keymapping *);\n  std::string *(__fastcall *getKeySpriteLocation)(RemappingLayout *this, std::string *result, int);\n  int (__fastcall *_rawKeyToKey)(RemappingLayout *this, int, RawInputType);\n};\n\n")])])]),a("h3",{attrs:{id:"keymanager-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keymanager-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyManager_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KeyManager_vtbl\n{\n  void (__fastcall *~KeyManager)(KeyManager *this);\n  bool (__fastcall *isValid)(KeyManager *this);\n};\n\n")])])]),a("h3",{attrs:{id:"keyboardmanager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardmanager"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardManager")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KeyboardManager\n{\n  KeyboardManager_vtbl *__vftable /*VFT*/;\n};\n\n")])])]),a("h3",{attrs:{id:"keyboardmanager-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardmanager-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardManager_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KeyboardManager_vtbl\n{\n  void (__fastcall *~KeyboardManager)(KeyboardManager *this);\n  bool (__fastcall *tryEnableKeyboard)(KeyboardManager *this, const std::string *, int, bool, bool, bool, const Vec2 *, float);\n  bool (__fastcall *isFullScreenKeyboard)(KeyboardManager *this);\n  void (__fastcall *disableKeyboard)(KeyboardManager *this);\n  void (__fastcall *setKeyboardActive)(KeyboardManager *this, bool);\n  bool (__fastcall *canActivateKeyboard)(KeyboardManager *this);\n  bool (__fastcall *isKeyboardEnabled)(KeyboardManager *this);\n  bool (__fastcall *isKeyboardActive)(KeyboardManager *this);\n  bool (__fastcall *wasEnabledWithMultiline)(KeyboardManager *this);\n  int (__fastcall *getMaxLength)(KeyboardManager *this);\n  float (__fastcall *getKeyboardHeight)(KeyboardManager *this);\n  void (__fastcall *setForcedHeight)(KeyboardManager *this, float);\n  bool (__fastcall *tryClaimKeyboardOwnership)(KeyboardManager *this);\n  void (__fastcall *releaseKeyboardOwnership)(KeyboardManager *this);\n  bool (__fastcall *getKeyboardClosedEvent)(KeyboardManager *this);\n  void (__fastcall *clearKeyboardClosedEvent)(KeyboardManager *this);\n  void (__fastcall *updateTextEditBoxPosition)(KeyboardManager *this, const RectangleArea *, const Vec2 *, const Vec2 *);\n};\n\n")])])]),a("h3",{attrs:{id:"keyframetransformdata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyframetransformdata"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyFrameTransformData")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KeyFrameTransformData\n{\n  std::vector<ChannelTransform> mChannelTransforms;\n  std::vector<ChannelTransform_Float> mChannelTransforms_Floats;\n};\n\n")])])]),a("h3",{attrs:{id:"keyboardkeybinding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardkeybinding"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardKeyBinding")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(4)) KeyboardKeyBinding\n{\n  std::string buttonName;\n  int keyNum;\n  FocusImpact focusImpact;\n};\n\n")])])]),a("h3",{attrs:{id:"knockbackarmorupdater"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knockbackarmorupdater"}},[t._v("#")]),t._v(" "),a("code",[t._v("KnockbackArmorUpdater")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KnockbackArmorUpdater : ActorEventListener\n{\n};\n\n")])])]),a("h3",{attrs:{id:"knockbackarmorupdater-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knockbackarmorupdater-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KnockbackArmorUpdater_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KnockbackArmorUpdater_vtbl\n{\n  void (__fastcall *~ActorEventListener)(ActorEventListener *this);\n  EventResult (__fastcall *onActorAttack)(ActorEventListener *this, Actor *, Actor *, int);\n  EventResult (__fastcall *onActorHit)(ActorEventListener *this, Actor *, const ActorDamageSource *, int *, bool *, bool *);\n  EventResult (__fastcall *onActorHurt)(ActorEventListener *this, const ActorHurtEvent *);\n  EventResult (__fastcall *onActorMove)(ActorEventListener *this, Actor *, const Vec3 *);\n  EventResult (__fastcall *onActorPredictedMove)(ActorEventListener *this, Actor *, MovePredictionType, const Vec3 *);\n  EventResult (__fastcall *onActorTick)(ActorEventListener *this, Actor *);\n  EventResult (__fastcall *onActorSneakChanged)(ActorEventListener *this, Actor *, bool);\n  EventResult (__fastcall *onActorStartRiding)(ActorEventListener *this, Actor *, Actor *);\n  EventResult (__fastcall *onActorStopRiding)(ActorEventListener *this, Actor *, bool, bool, bool);\n  EventResult (__fastcall *onActorDeath)(ActorEventListener *this, Actor *, const ActorDamageSource *, ActorType);\n  EventResult (__fastcall *onActorDefinitionEventTriggered)(ActorEventListener *this, const ActorDefinitionEvent *);\n  EventResult (__fastcall *onActorUseItem)(ActorEventListener *this, const ActorUseItemEvent *);\n  EventResult (__fastcall *onActorUseItemOn)(ActorEventListener *this, Actor *, const ItemStack *, const BlockPos *, unsigned __int8);\n  EventResult (__fastcall *onActorCreated)(ActorEventListener *this, Actor *);\n  EventResult (__fastcall *onProjectileHit)(ActorEventListener *this, const ProjectileHitEvent *);\n  EventResult (__fastcall *onActorTeleported)(ActorEventListener *this, Actor *);\n  EventResult (__fastcall *onActorAttackedActor)(ActorEventListener *this, Actor *, Actor *);\n  EventResult (__fastcall *onActorAcquiredItem)(ActorEventListener *this, const ActorAcquiredItemEvent *);\n  EventResult (__fastcall *onActorPlacedItem)(ActorEventListener *this, Actor *, const ItemInstance *);\n  EventResult (__fastcall *onActorDroppedItem)(ActorEventListener *this, Actor *, const ItemInstance *);\n  EventResult (__fastcall *onActorCarriedItemChanged)(ActorEventListener *this, Actor *, const ItemInstance *, const ItemInstance *, HandSlot);\n  EventResult (__fastcall *onActorEquippedArmor)(ActorEventListener *this, Actor *, const ItemInstance *, ArmorSlot);\n  EventResult (__fastcall *onActorRemoved)(ActorEventListener *this, Actor *);\n  EventResult (__fastcall *onActorMobInteraction)(ActorEventListener *this, Actor *, MinecraftEventing::InteractionType, ActorType);\n  EventResult (__fastcall *onActorTargetAcquired)(ActorEventListener *this, Actor *, Actor *);\n  EventResult (__fastcall *onActorGriefingBlock)(ActorEventListener *this, const ActorGriefingBlockEvent *);\n  EventResult (__fastcall *onActorAddEffect)(ActorEventListener *this, const ActorAddEffectEvent *);\n  EventResult (__fastcall *onActorKilled)(ActorEventListener *this, const ActorKilledEvent *);\n  EventResult (__fastcall *onActorRemoveEffect)(ActorEventListener *this, const ActorRemoveEffectEvent *);\n  EventResult (__fastcall *onKnockBack)(ActorEventListener *this, const KnockBackEvent *);\n  EventResult (__fastcall *onMountTaming)(ActorEventListener *this, const MountTamingEvent *);\n  EventResult (__fastcall *onActorAnimationChanged)(ActorEventListener *this, const ActorAnimationChangedEvent *);\n  EventResult (__fastcall *onSendActorAddBuff)(ActorEventListener *this, Actor *, const AttributeInstance *, const std::string *, int, bool, int, int, int);\n};\n\n")])])]),a("h3",{attrs:{id:"keyspan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyspan"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeySpan")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KeySpan\n{\n  const std::string name;\n  const int start;\n  int end;\n};\n\n")])])]),a("h3",{attrs:{id:"keyboardlayout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardlayout"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardLayout")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KeyboardLayout\n{\n};\n\n")])])]),a("h3",{attrs:{id:"knockbackresistanceitemcomponent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knockbackresistanceitemcomponent"}},[t._v("#")]),t._v(" "),a("code",[t._v("KnockbackResistanceItemComponent")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) KnockbackResistanceItemComponent : ItemComponent\n{\n  float mProtection;\n};\n\n")])])]),a("h3",{attrs:{id:"knockbackresistanceitemcomponent-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knockbackresistanceitemcomponent-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KnockbackResistanceItemComponent_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KnockbackResistanceItemComponent_vtbl\n{\n  void (__fastcall *~ItemComponent)(ItemComponent *this);\n  bool (__fastcall *checkComponentDataForContentErrors)(ItemComponent *this);\n  void (__fastcall *writeSettings)(ItemComponent *this);\n  bool (__fastcall *useOn)(ItemComponent *this, ItemStack *, Actor *, const BlockPos *, unsigned __int8, const Vec3 *);\n  bool (__fastcall *isNetworkComponent)(ItemComponent *this);\n  std::unique_ptr<CompoundTag> *(__fastcall *buildNetworkTag)(ItemComponent *this, std::unique_ptr<CompoundTag> *result);\n  void (__fastcall *initializeFromNetwork)(ItemComponent *this, const CompoundTag *);\n};\n\n")])])]),a("h3",{attrs:{id:"keyboard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboard"}},[t._v("#")]),t._v(" "),a("code",[t._v("Keyboard")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj Keyboard\n{\n};\n\n")])])]),a("h3",{attrs:{id:"keyboardmapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardmapper"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardMapper")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KeyboardMapper : InputDeviceMapper\n{\n  std::unordered_map<int,KeyboardMapper::KeyboardMappingData> mPerIdMappings;\n};\n\n")])])]),a("h3",{attrs:{id:"keyboardmapper-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboardmapper-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyboardMapper_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KeyboardMapper_vtbl\n{\n  void (__fastcall *~InputDeviceMapper)(InputDeviceMapper *this);\n  void (__fastcall *setMapping)(InputDeviceMapper *this, InputEventQueue *, const BindingFactory *, const InputMapping *, int);\n  void (__fastcall *clearMapping)(InputDeviceMapper *this, int);\n  void (__fastcall *clearInputDeviceQueue)(InputDeviceMapper *this);\n  void (__fastcall *clearInputDeviceQueueForFrame)(InputDeviceMapper *this);\n  void (__fastcall *hardResetInputDeviceQueue)(InputDeviceMapper *this);\n  bool (__fastcall *tick)(InputDeviceMapper *this, InputEventQueue *, ControllerIDtoClientMap *);\n  InputMode (__fastcall *getInputMode)(InputDeviceMapper *this);\n  void (__fastcall *getCursorPos)(InputDeviceMapper *this, float *, float *);\n  void (__fastcall *render)(InputDeviceMapper *this, InputRenderContext *);\n  void (__fastcall *setWindowSize)(InputDeviceMapper *this, int, int);\n  void (__fastcall *setBindingMode)(InputDeviceMapper *this, InputBindingMode, int);\n  InputBindingMode (__fastcall *getBindingMode)(InputDeviceMapper *this, int);\n  void (__fastcall *changeControllerId)(InputDeviceMapper *this, int, int);\n};\n\n")])])]),a("h3",{attrs:{id:"kickcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kickcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("KickCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KickCommand : ServerCommand\n{\n  CommandSelector<Player> mPlayers;\n  CommandMessage mMessage;\n};\n\n")])])]),a("h3",{attrs:{id:"kickcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kickcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KickCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KickCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"killcommand"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#killcommand"}},[t._v("#")]),t._v(" "),a("code",[t._v("KillCommand")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KillCommand : Command\n{\n  CommandSelector<Actor> mTargets;\n};\n\n")])])]),a("h3",{attrs:{id:"killcommand-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#killcommand-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KillCommand_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KillCommand_vtbl\n{\n  void (__fastcall *~Command)(Command *this);\n  void (__fastcall *execute)(Command *this, const CommandOrigin *, CommandOutput *);\n};\n\n")])])]),a("h3",{attrs:{id:"killcommand-ctor-l2-lambda-cb2bf1939a96fa330fd7ec1c15d0e65d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#killcommand-ctor-l2-lambda-cb2bf1939a96fa330fd7ec1c15d0e65d"}},[t._v("#")]),t._v(" "),a("code",[t._v("KillCommand::{ctor}::__l2::<lambda_cb2bf1939a96fa330fd7ec1c15d0e65d>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KillCommand::{ctor}::__l2::<lambda_cb2bf1939a96fa330fd7ec1c15d0e65d>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"kelpblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kelpblock"}},[t._v("#")]),t._v(" "),a("code",[t._v("KelpBlock")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KelpBlock : BlockLegacy\n{\n};\n\n")])])]),a("h3",{attrs:{id:"kelpblock-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kelpblock-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KelpBlock_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KelpBlock_vtbl\n{\n  void (__fastcall *~BlockLegacy)(BlockLegacy *this);\n  const Block *(__fastcall *getStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  const Block *(__fastcall *getModBlockStateFromLegacyData)(BlockLegacy *this, unsigned __int16);\n  std::shared_ptr<BlockActor> *(__fastcall *newBlockEntity)(BlockLegacy *this, std::shared_ptr<BlockActor> *result, const BlockPos *, const Block *);\n  const Block *(__fastcall *getNextBlockPermutation)(BlockLegacy *this, const Block *);\n  bool (__fastcall *hasTag)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *);\n  bool (__fastcall *getCollisionShape)(BlockLegacy *this, AABB *, const Block *, BlockSource *, const BlockPos *, Actor *);\n  bool (__fastcall *isObstructingChests)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *);\n  Vec3 *(__fastcall *randomlyModifyPosition)(BlockLegacy *this, Vec3 *result, const BlockPos *, int *);\n  void (__fastcall *addAABBs)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *);\n  const AABB *(__fastcall *getAABB)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, AABB *, bool);\n  bool (__fastcall *addCollisionShapes)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, const AABB *, std::vector<AABB> *, Actor *);\n  const AABB *(__fastcall *getOutline)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  bool (__fastcall *getLiquidClipVolume)(BlockLegacy *this, BlockSource *, const BlockPos *, AABB *);\n  void (__fastcall *onProjectileHit)(BlockLegacy *this, BlockSource *, const BlockPos *, const Actor *);\n  bool (__fastcall *liquidCanFlowIntoFromDirection)(BlockLegacy *this, unsigned __int8, const std::function<Block const & __cdecl(BlockPos const &)> *, const BlockPos *);\n  bool (__fastcall *hasVariableLighting)(BlockLegacy *this);\n  bool (__fastcall *isStrippable)(BlockLegacy *this, const Block *);\n  const Block *(__fastcall *getStrippedBlock)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canProvideSupport)(BlockLegacy *this, const Block *, unsigned __int8, BlockSupportType);\n  bool (__fastcall *canConnect)(BlockLegacy *this, const Block *, unsigned __int8, const Block *);\n  void (__fastcall *getConnectedDirections)(BlockLegacy *this, const Block *, const BlockPos *, BlockSource *, bool *, bool *, bool *, bool *);\n  bool (__fastcall *isStemBlock)(BlockLegacy *this);\n  bool (__fastcall *isContainerBlock)(BlockLegacy *this);\n  bool (__fastcall *isCraftingBlock)(BlockLegacy *this);\n  bool (__fastcall *isWaterBlocking)(BlockLegacy *this);\n  bool (__fastcall *isHurtableBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isFenceGateBlock)(BlockLegacy *this);\n  bool (__fastcall *isThinFenceBlock)(BlockLegacy *this);\n  bool (__fastcall *isWallBlock)(BlockLegacy *this);\n  bool (__fastcall *isStairBlock)(BlockLegacy *this);\n  bool (__fastcall *isSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoubleSlabBlock)(BlockLegacy *this);\n  bool (__fastcall *isDoorBlock)(BlockLegacy *this);\n  bool (__fastcall *isRailBlock)(BlockLegacy *this);\n  bool (__fastcall *isButtonBlock)(BlockLegacy *this);\n  bool (__fastcall *canHurtAndBreakItem)(BlockLegacy *this);\n  bool (__fastcall *isSignalSource)(BlockLegacy *this);\n  bool (__fastcall *canBeOriginalSurface)(BlockLegacy *this);\n  bool (__fastcall *isValidAuxValue)(BlockLegacy *this, int);\n  void (__fastcall *setTargetLandBlocks)(BlockLegacy *this, const std::vector<std::string> *);\n  bool (__fastcall *canFillAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  const Block *(__fastcall *sanitizeFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *onFillBlock)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getDirectSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  bool (__fastcall *waterSpreadCausesSpawn)(BlockLegacy *this);\n  bool (__fastcall *canContainLiquid)(BlockLegacy *this);\n  bool (__fastcall *shouldConnectToRedstone)(BlockLegacy *this, BlockSource *, const BlockPos *, int);\n  void (__fastcall *handleRain)(BlockLegacy *this, BlockSource *, const BlockPos *, float);\n  bool (__fastcall *canBeUsedInCommands)(BlockLegacy *this, const BaseGameVersion *);\n  float (__fastcall *getThickness)(BlockLegacy *this);\n  float (__fastcall *getFlexibility)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *checkIsPathable)(BlockLegacy *this, Actor *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *shouldDispense)(BlockLegacy *this, BlockSource *, Container *);\n  bool (__fastcall *dispense)(BlockLegacy *this, BlockSource *, Container *, int, const Vec3 *, unsigned __int8);\n  void (__fastcall *transformOnFall)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *onRedstoneUpdate)(BlockLegacy *this, BlockSource *, const BlockPos *, int, bool);\n  void (__fastcall *onMove)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *detachesOnPistonMove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *movedByPiston)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onStructureNeighborBlockPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *setupRedstoneComponent)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *specialUse)(BlockLegacy *this, Player *, const BlockPos *, ItemStack *);\n  BlockProperty (__fastcall *getRedstoneProperty)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *updateEntityAfterFallOn)(BlockLegacy *this, IActorMovementProxy *);\n  bool (__fastcall *isBounceBlock)(BlockLegacy *this);\n  bool (__fastcall *ignoreEntitiesOnPistonMove)(BlockLegacy *this, const Block *);\n  bool (__fastcall *onFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, FertilizerType);\n  bool (__fastcall *mayConsumeFertilizer)(BlockLegacy *this, BlockSource *);\n  bool (__fastcall *canBeFertilized)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *mayPick)(BlockLegacy *this, BlockSource *, const Block *, bool);\n  bool (__fastcall *mayPick)(BlockLegacy *this);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *mayPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *mayPlaceOn)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *tryToPlace)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const ActorBlockSyncMessage *);\n  bool (__fastcall *breaksFallingBlocks)(BlockLegacy *this, const Block *);\n  void (__fastcall *destroy)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, Actor *);\n  bool (__fastcall *playerWillDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  bool (__fastcall *getIgnoresDestroyPermissions)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *neighborChanged)(BlockLegacy *this, BlockSource *, const BlockPos *, const BlockPos *);\n  bool (__fastcall *getSecondPart)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  int (__fastcall *getResourceCount)(BlockLegacy *this, Random *, const Block *, int, bool);\n  ItemInstance *(__fastcall *getResourceItem)(BlockLegacy *this, ItemInstance *result, Random *, const Block *, int);\n  ItemInstance *(__fastcall *asItemInstance)(BlockLegacy *this, ItemInstance *result, BlockSource *, const BlockPos *, const Block *);\n  void (__fastcall *spawnResources)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  void (__fastcall *trySpawnResourcesOnExplosion)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, std::vector<Item const *> *, float, int, bool);\n  bool (__fastcall *spawnBurnResources)(BlockLegacy *this, BlockSource *, float, float, float);\n  const Block *(__fastcall *getPlacementBlock)(BlockLegacy *this, Actor *, const BlockPos *, unsigned __int8, const Vec3 *, int);\n  int (__fastcall *calcVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *isAttachedTo)(BlockLegacy *this, BlockSource *, const BlockPos *, BlockPos *);\n  bool (__fastcall *attack)(BlockLegacy *this, Player *, const BlockPos *);\n  void (__fastcall *handleEntityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, Vec3 *);\n  void (__fastcall *entityInside)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  int (__fastcall *getExperienceDrop)(BlockLegacy *this, Random *);\n  bool (__fastcall *canBeBuiltOver)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *triggerEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, int, int);\n  void (__fastcall *executeEvent)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, const std::string *, Actor *);\n  void (__fastcall *executeEvent)(BlockLegacy *this, const std::string *, RenderParams *);\n  bool (__fastcall *executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  bool (__fastcall *executeTriggerChain)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, RenderParams *);\n  const MobSpawnerData *(__fastcall *getMobToSpawn)(BlockLegacy *this, const SpawnConditions *, BlockSource *);\n  bool (__fastcall *shouldStopFalling)(BlockLegacy *this, Actor *);\n  bool (__fastcall *pushesUpFallingBlocks)(BlockLegacy *this);\n  float (__fastcall *calcGroundFriction)(BlockLegacy *this, Mob *, const BlockPos *);\n  bool (__fastcall *canHaveExtraData)(BlockLegacy *this);\n  bool (__fastcall *hasComparatorSignal)(BlockLegacy *this);\n  int (__fastcall *getComparatorSignal)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *, unsigned __int8);\n  bool (__fastcall *onDig)(BlockLegacy *this, const Block *, Actor *, ItemStack *, const BlockPos *);\n  bool (__fastcall *canSlide)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  bool (__fastcall *canSpawnAt)(BlockLegacy *this, const BlockSource *, const BlockPos *);\n  void (__fastcall *notifySpawnedAt)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getIconYOffset)(BlockLegacy *this);\n  std::string *(__fastcall *buildDescriptionId)(BlockLegacy *this, std::string *result, const Block *);\n  bool (__fastcall *isAuxValueRelevantForPicking)(BlockLegacy *this);\n  int (__fastcall *getColor)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  int (__fastcall *getColor)(BlockLegacy *this, const Block *);\n  int (__fastcall *getColorAtPos)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getColorForParticle)(BlockLegacy *this, BlockSource *, const BlockPos *, const Block *);\n  bool (__fastcall *isSeasonTinted)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  void (__fastcall *onGraphicsModeChanged)(BlockLegacy *this, const BlockGraphicsModeChangeContext *);\n  float (__fastcall *getShadeBrightness)(BlockLegacy *this, const Block *);\n  const AABB *(__fastcall *getVisualShapeInWorld)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *, AABB *, bool);\n  const AABB *(__fastcall *getVisualShape)(BlockLegacy *this, const Block *, AABB *, bool);\n  const AABB *(__fastcall *getUIShape)(BlockLegacy *this, const Block *, AABB *);\n  int (__fastcall *telemetryVariant)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  int (__fastcall *getVariant)(BlockLegacy *this, const Block *);\n  bool (__fastcall *canSpawnOn)(BlockLegacy *this);\n  const Block *(__fastcall *getRenderBlock)(BlockLegacy *this);\n  unsigned __int8 (__fastcall *getMappedFace)(BlockLegacy *this, unsigned __int8, const Block *);\n  bool (__fastcall *renderTwoFaced)(BlockLegacy *this);\n  Flip (__fastcall *getFaceFlip)(BlockLegacy *this, unsigned __int8, const Block *);\n  void (__fastcall *animateTick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  BlockLegacy *(__fastcall *init)(BlockLegacy *this);\n  BlockLegacy *(__fastcall *setLightBlock)(BlockLegacy *this, Brightness);\n  BlockLegacy *(__fastcall *setLightEmission)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setExplodeable)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFlammable)(BlockLegacy *this, FlameOdds, BurnOdds);\n  BlockLegacy *(__fastcall *setDestroyTime)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *setFriction)(BlockLegacy *this, float);\n  BlockLegacy *(__fastcall *addProperty)(BlockLegacy *this, BlockProperty);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *, unsigned __int64);\n  BlockLegacy *(__fastcall *addState)(BlockLegacy *this, const ItemState *);\n  BlockLegacy *(__fastcall *setAllowsRunes)(BlockLegacy *this, bool);\n  BlockLegacy *(__fastcall *setMapColor)(BlockLegacy *this, const mce::Color *);\n  bool (__fastcall *canBeSilkTouched)(BlockLegacy *this);\n  ItemInstance *(__fastcall *getSilkTouchItemInstance)(BlockLegacy *this, ItemInstance *result, const Block *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const Vec3 *, const Vec3 *);\n  void (__fastcall *setVisualShape)(BlockLegacy *this, const AABB *);\n  const Block *(__fastcall *tryLegacyUpgrade)(BlockLegacy *this, unsigned __int16);\n  bool (__fastcall *dealsContactDamage)(BlockLegacy *this, const Actor *, const Block *, bool);\n  void (__fastcall *onRemove)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onExploded)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *);\n  void (__fastcall *onStandOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOn)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onStepOff)(BlockLegacy *this, Actor *, const BlockPos *);\n  void (__fastcall *onPlayerPlacing)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, unsigned __int8);\n  void (__fastcall *onPlace)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  void (__fastcall *onFallOn)(BlockLegacy *this, BlockSource *, const BlockPos *, Actor *, float);\n  void (__fastcall *playerDestroy)(BlockLegacy *this, Player *, const BlockPos *, const Block *);\n  void (__fastcall *tick)(BlockLegacy *this, BlockSource *, const BlockPos *, Random *);\n  bool (__fastcall *shouldRandomTick)(BlockLegacy *this);\n  bool (__fastcall *isInteractiveBlock)(BlockLegacy *this);\n  HitResult *(__fastcall *clip)(BlockLegacy *this, HitResult *result, BlockSource *, const BlockPos *, const Vec3 *, const Vec3 *, bool);\n  bool (__fastcall *use)(BlockLegacy *this, Player *, const BlockPos *, unsigned __int8);\n  bool (__fastcall *canSurvive)(BlockLegacy *this, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this, const Block *, BlockSource *, const BlockPos *);\n  BlockRenderLayer (__fastcall *getRenderLayer)(BlockLegacy *this);\n  int (__fastcall *getExtraRenderLayers)(BlockLegacy *this);\n  float (__fastcall *getExplosionResistance)(BlockLegacy *this, Actor *);\n  Brightness *(__fastcall *getLightEmission)(BlockLegacy *this, Brightness *result, const Block *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result, BlockSource *, const BlockPos *);\n  mce::Color *(__fastcall *getMapColor)(BlockLegacy *this, mce::Color *result);\n  bool (__fastcall *isCropBlock)(BlockLegacy *this);\n  void (__fastcall *_executeEvent)(BlockLegacy *this, const std::string *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  bool (__fastcall *_executeTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n  void (__fastcall *_forceExecuteTrigger)(BlockLegacy *this, const DefinitionTrigger *, std::vector<std::pair<std::string const ,std::string const >> *, RenderParams *);\n};\n\n")])])]),a("h3",{attrs:{id:"knownfolder-definition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knownfolder-definition"}},[t._v("#")]),t._v(" "),a("code",[t._v("KNOWNFOLDER_DEFINITION")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct KNOWNFOLDER_DEFINITION\n{\n  KF_CATEGORY category;\n  wchar_t *pszName;\n  wchar_t *pszDescription;\n  _GUID fidParent;\n  wchar_t *pszRelativePath;\n  wchar_t *pszParsingName;\n  wchar_t *pszTooltip;\n  wchar_t *pszLocalizedName;\n  wchar_t *pszIcon;\n  wchar_t *pszSecurity;\n  unsigned int dwAttributes;\n  unsigned int kfdFlags;\n  _GUID ftidType;\n};\n\n")])])]),a("h3",{attrs:{id:"kencrypt-valueinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kencrypt-valueinfo"}},[t._v("#")]),t._v(" "),a("code",[t._v("KEncrypt::_ValueInfo")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct KEncrypt::_ValueInfo\n{\n  unsigned int KeyHash;\n  unsigned int Value;\n};\n\n")])])]),a("h3",{attrs:{id:"knockbackroargoal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knockbackroargoal"}},[t._v("#")]),t._v(" "),a("code",[t._v("KnockbackRoarGoal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) KnockbackRoarGoal : Goal\n{\n  const int mDuration;\n  const int mAttackTime;\n  const int mKnockbackDamage;\n  const int mKnockbackStrength;\n  const int mKnockbackRange;\n  ActorFilterGroup mKnockbackFilter;\n  ActorFilterGroup mDamageFilter;\n  const DefinitionTrigger mOnRoarEnd;\n  const int mCooldownTime;\n  int mCurrentCooldown;\n  Mob *mMob;\n  int mRoarTime;\n};\n\n")])])]),a("h3",{attrs:{id:"knockbackroargoal-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#knockbackroargoal-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KnockbackRoarGoal_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KnockbackRoarGoal_vtbl\n{\n  void (__fastcall *~Goal)(Goal *this);\n  bool (__fastcall *canUse)(Goal *this);\n  bool (__fastcall *canContinueToUse)(Goal *this);\n  bool (__fastcall *canBeInterrupted)(Goal *this);\n  void (__fastcall *start)(Goal *this);\n  void (__fastcall *stop)(Goal *this);\n  void (__fastcall *tick)(Goal *this);\n  void (__fastcall *appendDebugInfo)(Goal *this, std::string *);\n  bool (__fastcall *isTargetGoal)(Goal *this);\n  void (__fastcall *onPlayerDimensionChanged)(Goal *this, Player *, AutomaticID<Dimension,int>);\n};\n\n")])])]),a("h3",{attrs:{id:"kelpfeature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kelpfeature"}},[t._v("#")]),t._v(" "),a("code",[t._v("KelpFeature")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KelpFeature : Feature\n{\n};\n\n")])])]),a("h3",{attrs:{id:"kelpfeature-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kelpfeature-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("KelpFeature_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ KelpFeature_vtbl\n{\n  void (__fastcall *~IFeature)(IFeature *this);\n  std::optional<BlockPos> *(__fastcall *place)(IFeature *this, std::optional<BlockPos> *result, IBlockWorldGenAPI *, const BlockPos *, Random *, RenderParams *);\n  std::string *(__fastcall *getStructureName)(IFeature *this, std::string *result);\n  bool (__fastcall *parse)(IFeature *this, const rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> > *, IWorldRegistriesProvider *);\n  bool (__fastcall *place)(Feature *this, BlockSource *, const BlockPos *, Random *);\n};\n\n")])])]),a("h3",{attrs:{id:"keyframetransform-computecubicpolynomial-l9-lambda-8345864a9afa0c4a53458247a6c1a2c5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyframetransform-computecubicpolynomial-l9-lambda-8345864a9afa0c4a53458247a6c1a2c5"}},[t._v("#")]),t._v(" "),a("code",[t._v("KeyFrameTransform::computeCubicPolynomial::__l9::<lambda_8345864a9afa0c4a53458247a6c1a2c5>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj KeyFrameTransform::computeCubicPolynomial::__l9::<lambda_8345864a9afa0c4a53458247a6c1a2c5>\n{\n};\n\n")])])])])}),[],!1,null,null,null);a.default=c.exports}}]);