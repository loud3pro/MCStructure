(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{471:function(t,a,o){"use strict";o.r(a);var e=o(27),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"z"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#z"}},[t._v("#")]),t._v(" Z")]),t._v(" "),a("h3",{attrs:{id:"z-stream-s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#z-stream-s"}},[t._v("#")]),t._v(" "),a("code",[t._v("z_stream_s")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("unsigned __int8 *")])]),t._v(" "),a("td",[t._v("next_in")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("avail_in")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("total_in")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("unsigned __int8 *")])]),t._v(" "),a("td",[t._v("next_out")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("avail_out")])]),t._v(" "),a("tr",[a("td",[t._v("28")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("total_out")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("char *")])]),t._v(" "),a("td",[t._v("msg")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("internal_state *")])]),t._v(" "),a("td",[t._v("state")])]),t._v(" "),a("tr",[a("td",[t._v("48")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("void *(__fastcall *)(void *, unsigned int, unsigned int)")])]),t._v(" "),a("td",[t._v("zalloc")])]),t._v(" "),a("tr",[a("td",[t._v("56")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("void (__fastcall *)(void *, void *)")])]),t._v(" "),a("td",[t._v("zfree")])]),t._v(" "),a("tr",[a("td",[t._v("64")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("void *")])]),t._v(" "),a("td",[t._v("opaque")])]),t._v(" "),a("tr",[a("td",[t._v("72")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("int")])]),t._v(" "),a("td",[t._v("data_type")])]),t._v(" "),a("tr",[a("td",[t._v("76")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("adler")])]),t._v(" "),a("tr",[a("td",[t._v("80")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("reserved")])])])]),t._v(" "),a("h3",{attrs:{id:"zlib-filefunc64-32-def-s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlib-filefunc64-32-def-s"}},[t._v("#")]),t._v(" "),a("code",[t._v("zlib_filefunc64_32_def_s")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(64) "),a("code",[t._v("zlib_filefunc64_def_s")])]),t._v(" "),a("td",[t._v("zfile_func64")])]),t._v(" "),a("tr",[a("td",[t._v("64")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("void *(__fastcall *)(void *, const char *, int)")])]),t._v(" "),a("td",[t._v("zopen32_file")])]),t._v(" "),a("tr",[a("td",[t._v("72")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("int (__fastcall *)(void *, void *)")])]),t._v(" "),a("td",[t._v("ztell32_file")])]),t._v(" "),a("tr",[a("td",[t._v("80")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("int (__fastcall *)(void *, void *, unsigned int, int)")])]),t._v(" "),a("td",[t._v("zseek32_file")])])])]),t._v(" "),a("h3",{attrs:{id:"zlib-filefunc64-def-s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlib-filefunc64-def-s"}},[t._v("#")]),t._v(" "),a("code",[t._v("zlib_filefunc64_def_s")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("void *(__fastcall *)(void *, const void *, int)")])]),t._v(" "),a("td",[t._v("zopen64_file")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("unsigned int (__fastcall *)(void *, void *, void *, unsigned int)")])]),t._v(" "),a("td",[t._v("zread_file")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("unsigned int (__fastcall *)(void *, void *, const void *, unsigned int)")])]),t._v(" "),a("td",[t._v("zwrite_file")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("unsigned __int64 (__fastcall *)(void *, void *)")])]),t._v(" "),a("td",[t._v("ztell64_file")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("int (__fastcall *)(void *, void *, unsigned __int64, int)")])]),t._v(" "),a("td",[t._v("zseek64_file")])]),t._v(" "),a("tr",[a("td",[t._v("40")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("int (__fastcall *)(void *, void *)")])]),t._v(" "),a("td",[t._v("zclose_file")])]),t._v(" "),a("tr",[a("td",[t._v("48")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("int (__fastcall *)(void *, void *)")])]),t._v(" "),a("td",[t._v("zerror_file")])]),t._v(" "),a("tr",[a("td",[t._v("56")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("void *")])]),t._v(" "),a("td",[t._v("opaque")])])])]),t._v(" "),a("h3",{attrs:{id:"zlibfileaccesswrapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlibfileaccesswrapper"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZlibFileAccessWrapper")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("std::unique_ptr<zlib_filefunc64_32_def_s>")])]),t._v(" "),a("td",[t._v("mZipAPI")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("(8) "),a("code",[t._v("IFileAccess *")])]),t._v(" "),a("td",[t._v("mFileAccess")])])])]),t._v(" "),a("h3",{attrs:{id:"zip-fileinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zip-fileinfo"}},[t._v("#")]),t._v(" "),a("code",[t._v("zip_fileinfo")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Offset")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("(24) "),a("code",[t._v("tm_zip_s")])]),t._v(" "),a("td",[t._v("tmz_date")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("dosDate")])]),t._v(" "),a("tr",[a("td",[t._v("28")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("internal_fa")])]),t._v(" "),a("tr",[a("td",[t._v("32")]),t._v(" "),a("td",[t._v("(4) "),a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("external_fa")])])])]),t._v(" "),a("h3",{attrs:{id:"zombiemodel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zombiemodel"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZombieModel")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZombieModel : HumanoidModel\n{\n  mce::MaterialPtr mDefaultMaterial;\n};\n\n")])])]),a("h3",{attrs:{id:"zombiemodel-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zombiemodel-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZombieModel_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZombieModel_vtbl\n{\n  void (__fastcall *~AppPlatformListener)(AppPlatformListener *this);\n  void (__fastcall *onLowMemory)(AppPlatformListener *this);\n  void (__fastcall *onAppPaused)(AppPlatformListener *this);\n  void (__fastcall *onAppUnpaused)(AppPlatformListener *this);\n  void (__fastcall *onAppPreSuspended)(AppPlatformListener *this);\n  void (__fastcall *onAppSuspended)(AppPlatformListener *this);\n  void (__fastcall *onAppResumed)(AppPlatformListener *this);\n  void (__fastcall *onAppFocusLost)(AppPlatformListener *this);\n  void (__fastcall *onAppFocusGained)(AppPlatformListener *this);\n  void (__fastcall *onAppTerminated)(AppPlatformListener *this);\n  void (__fastcall *onOperationModeChanged)(AppPlatformListener *this, const OperationMode);\n  void (__fastcall *onPerformanceModeChanged)(AppPlatformListener *this, const bool);\n  void (__fastcall *onPushNotificationReceived)(AppPlatformListener *this, const PushNotificationMessage *);\n  void (__fastcall *onResizeBegin)(AppPlatformListener *this);\n  void (__fastcall *onResizeEnd)(AppPlatformListener *this);\n  void (__fastcall *onDeviceLost)(AppPlatformListener *this);\n  void (__fastcall *clear)(Model *this);\n  void (__fastcall *preDraw)(Model *this, ScreenContext *);\n  void (__fastcall *postDraw)(Model *this, ScreenContext *);\n  void (__fastcall *render)(Model *this, BaseActorRenderContext *, Actor *, float, float, float, float, float, float);\n  void (__fastcall *render)(Model *this, BaseActorRenderContext *);\n  void (__fastcall *render)(Model *this, ScreenContext *, Actor *, float, float, float, float, float, float);\n  void (__fastcall *render)(Model *this, ScreenContext *);\n  void (__fastcall *setupAnim)(Model *this);\n  void (__fastcall *setupAnim)(Model *this, float, float, float, float, float, float);\n  void (__fastcall *prepareMobModel)(Model *this, Mob *, float, float, float);\n  Vec3 *(__fastcall *getLeashOffsetPosition)(Model *this, Vec3 *result, bool);\n  void (__fastcall *renderAniModel)(Model *this, ScreenContext *, Actor *, float, float, float, float, float, float, MatrixStack::MatrixStackRef *);\n  void (__fastcall *renderMod)(Model *this, ScreenContext *, Actor *, float, float, float, float, float, float);\n  void (__fastcall *youngTransform)(Model *this, ScreenContext *, Actor *, float, float, float, float, float, float, MatrixStack::MatrixStackRef *);\n  float (__fastcall *getHeightAdjustment)(Model *this);\n  AABB *(__fastcall *buildAABB)(Model *this, AABB *result);\n  void (__fastcall *renderAniModel)(HumanoidModel *this, ScreenContext *, int, float, float);\n};\n\n")])])]),a("h3",{attrs:{id:"zippackaccessstrategy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zippackaccessstrategy"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZipPackAccessStrategy")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZipPackAccessStrategy : PackAccessStrategy\n{\n  std::string mPackName;\n  ResourceLocation mArchiveLocation;\n  Core::PathBuffer<std::string > mSubPath;\n  IFileAccess *mFileAccess;\n  bool mIsTrusted;\n  bool mIsWritable;\n  std::vector<std::pair<Core::PathBuffer<std::string >,std::string >> mQueueWriteContent;\n  std::vector<Core::PathBuffer<std::string >> mQueueDeleteContent;\n  __int64 mLastModified;\n  const IContentKeyProvider *mKeyProvider;\n};\n\n")])])]),a("h3",{attrs:{id:"zippackaccessstrategy-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zippackaccessstrategy-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZipPackAccessStrategy_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZipPackAccessStrategy_vtbl\n{\n  void (__fastcall *~PackAccessStrategy)(PackAccessStrategy *this);\n  unsigned __int64 (__fastcall *getPackSize)(PackAccessStrategy *this);\n  const ResourceLocation *(__fastcall *getPackLocation)(PackAccessStrategy *this);\n  const std::string *(__fastcall *getPackName)(PackAccessStrategy *this);\n  bool (__fastcall *isWritable)(PackAccessStrategy *this);\n  void (__fastcall *setIsTrusted)(PackAccessStrategy *this, bool);\n  bool (__fastcall *isTrusted)(PackAccessStrategy *this);\n  bool (__fastcall *hasAsset)(PackAccessStrategy *this, const Core::Path *, bool);\n  bool (__fastcall *hasFolder)(PackAccessStrategy *this, const Core::Path *);\n  bool (__fastcall *getAsset)(PackAccessStrategy *this, const Core::Path *, std::string *, bool);\n  bool (__fastcall *deleteAsset)(PackAccessStrategy *this, const Core::PathBuffer<std::string > *);\n  bool (__fastcall *writeAsset)(PackAccessStrategy *this, const Core::Path *, const std::string *);\n  void (__fastcall *forEachIn)(PackAccessStrategy *this, const Core::Path *, std::function<void __cdecl(Core::Path const &)>, bool);\n  void (__fastcall *forEachInAssetSet)(PackAccessStrategy *this, const Core::Path *, std::function<void __cdecl(Core::Path const &)>);\n  PackAccessStrategyType (__fastcall *getStrategyType)(PackAccessStrategy *this);\n  const Core::PathBuffer<std::string > *(__fastcall *getSubPath)(PackAccessStrategy *this);\n  std::unique_ptr<PackAccessStrategy> *(__fastcall *createSubPack)(PackAccessStrategy *this, std::unique_ptr<PackAccessStrategy> *result, const Core::Path *);\n  PackAccessAssetGenerationResult (__fastcall *generateAssetSet)(PackAccessStrategy *this);\n  bool (__fastcall *canRecurse)(PackAccessStrategy *this);\n  void (__fastcall *unload)(PackAccessStrategy *this);\n  __int64 (__fastcall *getLastModifiedTime)(PackAccessStrategy *this, const Core::Path *);\n  std::unique_ptr<IDataOutput> *(__fastcall *createEncryptor)(PackAccessStrategy *this, std::unique_ptr<IDataOutput> *result, std::unique_ptr<IDataOutput>);\n  std::unique_ptr<IDataInput> *(__fastcall *createDecryptor)(PackAccessStrategy *this, std::unique_ptr<IDataInput> *result, std::unique_ptr<IDataInput>);\n  bool (__fastcall *hasUpgradeFiles)(PackAccessStrategy *this);\n  ContentIdentity *(__fastcall *readContentIdentity)(PackAccessStrategy *this, ContentIdentity *result);\n  bool (__fastcall *hasFile)(PackAccessStrategy *this, const Core::Path *);\n  void (__fastcall *setSubPathAsPackName)(PackAccessStrategy *this);\n};\n\n")])])]),a("h3",{attrs:{id:"zippackaccessstrategyowningfileacccess"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zippackaccessstrategyowningfileacccess"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZipPackAccessStrategyOwningFileAcccess")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZipPackAccessStrategyOwningFileAcccess : ZipPackAccessStrategy\n{\n  std::shared_ptr<IFileAccess> mFileAccessShared;\n};\n\n")])])]),a("h3",{attrs:{id:"zippackaccessstrategyowningfileacccess-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zippackaccessstrategyowningfileacccess-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZipPackAccessStrategyOwningFileAcccess_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZipPackAccessStrategyOwningFileAcccess_vtbl\n{\n  void (__fastcall *~PackAccessStrategy)(PackAccessStrategy *this);\n  unsigned __int64 (__fastcall *getPackSize)(PackAccessStrategy *this);\n  const ResourceLocation *(__fastcall *getPackLocation)(PackAccessStrategy *this);\n  const std::string *(__fastcall *getPackName)(PackAccessStrategy *this);\n  bool (__fastcall *isWritable)(PackAccessStrategy *this);\n  void (__fastcall *setIsTrusted)(PackAccessStrategy *this, bool);\n  bool (__fastcall *isTrusted)(PackAccessStrategy *this);\n  bool (__fastcall *hasAsset)(PackAccessStrategy *this, const Core::Path *, bool);\n  bool (__fastcall *hasFolder)(PackAccessStrategy *this, const Core::Path *);\n  bool (__fastcall *getAsset)(PackAccessStrategy *this, const Core::Path *, std::string *, bool);\n  bool (__fastcall *deleteAsset)(PackAccessStrategy *this, const Core::PathBuffer<std::string > *);\n  bool (__fastcall *writeAsset)(PackAccessStrategy *this, const Core::Path *, const std::string *);\n  void (__fastcall *forEachIn)(PackAccessStrategy *this, const Core::Path *, std::function<void __cdecl(Core::Path const &)>, bool);\n  void (__fastcall *forEachInAssetSet)(PackAccessStrategy *this, const Core::Path *, std::function<void __cdecl(Core::Path const &)>);\n  PackAccessStrategyType (__fastcall *getStrategyType)(PackAccessStrategy *this);\n  const Core::PathBuffer<std::string > *(__fastcall *getSubPath)(PackAccessStrategy *this);\n  std::unique_ptr<PackAccessStrategy> *(__fastcall *createSubPack)(PackAccessStrategy *this, std::unique_ptr<PackAccessStrategy> *result, const Core::Path *);\n  PackAccessAssetGenerationResult (__fastcall *generateAssetSet)(PackAccessStrategy *this);\n  bool (__fastcall *canRecurse)(PackAccessStrategy *this);\n  void (__fastcall *unload)(PackAccessStrategy *this);\n  __int64 (__fastcall *getLastModifiedTime)(PackAccessStrategy *this, const Core::Path *);\n  std::unique_ptr<IDataOutput> *(__fastcall *createEncryptor)(PackAccessStrategy *this, std::unique_ptr<IDataOutput> *result, std::unique_ptr<IDataOutput>);\n  std::unique_ptr<IDataInput> *(__fastcall *createDecryptor)(PackAccessStrategy *this, std::unique_ptr<IDataInput> *result, std::unique_ptr<IDataInput>);\n  bool (__fastcall *hasUpgradeFiles)(PackAccessStrategy *this);\n  ContentIdentity *(__fastcall *readContentIdentity)(PackAccessStrategy *this, ContentIdentity *result);\n  bool (__fastcall *hasFile)(PackAccessStrategy *this, const Core::Path *);\n  void (__fastcall *setSubPathAsPackName)(PackAccessStrategy *this);\n};\n\n")])])]),a("h3",{attrs:{id:"zombie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zombie"}},[t._v("#")]),t._v(" "),a("code",[t._v("Zombie")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj Zombie : HumanoidMonster\n{\n};\n\n")])])]),a("h3",{attrs:{id:"zombievillager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zombievillager"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZombieVillager")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(4)) ZombieVillager : Zombie\n{\n  int villagerConversionTime;\n  bool mSpawnedFromVillage;\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-biome-layerzooms-zoom4xvoronoi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-biome-layerzooms-zoom4xvoronoi"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<Biome *,LayerZooms::Zoom4xVoronoi>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) ZoomLayerCommon<Biome *,LayerZooms::Zoom4xVoronoi> : MixerLayer<Biome *,Biome *>\n{\n  LayerZooms::Zoom4xVoronoi mZoom;\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-biome-layerzooms-zoom4xvoronoi-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-biome-layerzooms-zoom4xvoronoi-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<Biome *,LayerZooms::Zoom4xVoronoi>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZoomLayerCommon<Biome *,LayerZooms::Zoom4xVoronoi>_vtbl\n{\n  void (__fastcall *~LayerBase)(LayerDetails::LayerBase *this);\n  void (__fastcall *init)(LayerDetails::LayerBase *this, __int64);\n  LayerDetails::TransferData<Biome *> *(__fastcall *_allocateAndFill)(Layer<Biome *> *this, LayerDetails::TransferData<Biome *> *result, unsigned __int64, int, int, unsigned int, unsigned int);\n  void (__fastcall *_fillArea)(MixerLayer<Biome *,Biome *> *this, LayerDetails::WorkingData<Biome *,Biome *> *, int, int, int, int, int);\n  std::tuple<int,int,unsigned int,unsigned int> *(__fastcall *_getAreaRead)(MixerLayer<Biome *,Biome *> *this, std::tuple<int,int,unsigned int,unsigned int> *result, int, int, unsigned int, unsigned int);\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-enum-layervalues-terrain-layerzooms-zoom2xfuzzy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-enum-layervalues-terrain-layerzooms-zoom2xfuzzy"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<enum LayerValues::Terrain,LayerZooms::Zoom2xFuzzy>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) ZoomLayerCommon<enum LayerValues::Terrain,LayerZooms::Zoom2xFuzzy> : MixerLayer<enum LayerValues::Terrain,enum LayerValues::Terrain>\n{\n  LayerZooms::Zoom2xFuzzy mZoom;\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-enum-layervalues-terrain-layerzooms-zoom2xfuzzy-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-enum-layervalues-terrain-layerzooms-zoom2xfuzzy-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<enum LayerValues::Terrain,LayerZooms::Zoom2xFuzzy>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZoomLayerCommon<enum LayerValues::Terrain,LayerZooms::Zoom2xFuzzy>_vtbl\n{\n  void (__fastcall *~LayerBase)(LayerDetails::LayerBase *this);\n  void (__fastcall *init)(LayerDetails::LayerBase *this, __int64);\n  LayerDetails::TransferData<enum LayerValues::Terrain> *(__fastcall *_allocateAndFill)(Layer<enum LayerValues::Terrain> *this, LayerDetails::TransferData<enum LayerValues::Terrain> *result, unsigned __int64, int, int, unsigned int, unsigned int);\n  void (__fastcall *_fillArea)(MixerLayer<enum LayerValues::Terrain,enum LayerValues::Terrain> *this, LayerDetails::WorkingData<enum LayerValues::Terrain,enum LayerValues::Terrain> *, int, int, int, int, int);\n  std::tuple<int,int,unsigned int,unsigned int> *(__fastcall *_getAreaRead)(MixerLayer<enum LayerValues::Terrain,enum LayerValues::Terrain> *this, std::tuple<int,int,unsigned int,unsigned int> *result, int, int, unsigned int, unsigned int);\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-enum-layervalues-terrain-layerzooms-zoom2x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-enum-layervalues-terrain-layerzooms-zoom2x"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<enum LayerValues::Terrain,LayerZooms::Zoom2x>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) ZoomLayerCommon<enum LayerValues::Terrain,LayerZooms::Zoom2x> : MixerLayer<enum LayerValues::Terrain,enum LayerValues::Terrain>\n{\n  LayerZooms::Zoom2x mZoom;\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-enum-layervalues-terrain-layerzooms-zoom2x-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-enum-layervalues-terrain-layerzooms-zoom2x-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<enum LayerValues::Terrain,LayerZooms::Zoom2x>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZoomLayerCommon<enum LayerValues::Terrain,LayerZooms::Zoom2x>_vtbl\n{\n  void (__fastcall *~LayerBase)(LayerDetails::LayerBase *this);\n  void (__fastcall *init)(LayerDetails::LayerBase *this, __int64);\n  LayerDetails::TransferData<enum LayerValues::Terrain> *(__fastcall *_allocateAndFill)(Layer<enum LayerValues::Terrain> *this, LayerDetails::TransferData<enum LayerValues::Terrain> *result, unsigned __int64, int, int, unsigned int, unsigned int);\n  void (__fastcall *_fillArea)(MixerLayer<enum LayerValues::Terrain,enum LayerValues::Terrain> *this, LayerDetails::WorkingData<enum LayerValues::Terrain,enum LayerValues::Terrain> *, int, int, int, int, int);\n  std::tuple<int,int,unsigned int,unsigned int> *(__fastcall *_getAreaRead)(MixerLayer<enum LayerValues::Terrain,enum LayerValues::Terrain> *this, std::tuple<int,int,unsigned int,unsigned int> *result, int, int, unsigned int, unsigned int);\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-layervalues-prebiome-layerzooms-zoom2x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-layervalues-prebiome-layerzooms-zoom2x"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<LayerValues::PreBiome,LayerZooms::Zoom2x>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) ZoomLayerCommon<LayerValues::PreBiome,LayerZooms::Zoom2x> : MixerLayer<LayerValues::PreBiome,LayerValues::PreBiome>\n{\n  LayerZooms::Zoom2x mZoom;\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-layervalues-prebiome-layerzooms-zoom2x-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-layervalues-prebiome-layerzooms-zoom2x-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<LayerValues::PreBiome,LayerZooms::Zoom2x>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZoomLayerCommon<LayerValues::PreBiome,LayerZooms::Zoom2x>_vtbl\n{\n  void (__fastcall *~LayerBase)(LayerDetails::LayerBase *this);\n  void (__fastcall *init)(LayerDetails::LayerBase *this, __int64);\n  LayerDetails::TransferData<LayerValues::PreBiome> *(__fastcall *_allocateAndFill)(Layer<LayerValues::PreBiome> *this, LayerDetails::TransferData<LayerValues::PreBiome> *result, unsigned __int64, int, int, unsigned int, unsigned int);\n  void (__fastcall *_fillArea)(MixerLayer<LayerValues::PreBiome,LayerValues::PreBiome> *this, LayerDetails::WorkingData<LayerValues::PreBiome,LayerValues::PreBiome> *, int, int, int, int, int);\n  std::tuple<int,int,unsigned int,unsigned int> *(__fastcall *_getAreaRead)(MixerLayer<LayerValues::PreBiome,LayerValues::PreBiome> *this, std::tuple<int,int,unsigned int,unsigned int> *result, int, int, unsigned int, unsigned int);\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-biome-layerzooms-zoom2x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-biome-layerzooms-zoom2x"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<Biome *,LayerZooms::Zoom2x>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) ZoomLayerCommon<Biome *,LayerZooms::Zoom2x> : MixerLayer<Biome *,Biome *>\n{\n  LayerZooms::Zoom2x mZoom;\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-biome-layerzooms-zoom2x-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-biome-layerzooms-zoom2x-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<Biome *,LayerZooms::Zoom2x>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZoomLayerCommon<Biome *,LayerZooms::Zoom2x>_vtbl\n{\n  void (__fastcall *~LayerBase)(LayerDetails::LayerBase *this);\n  void (__fastcall *init)(LayerDetails::LayerBase *this, __int64);\n  LayerDetails::TransferData<Biome *> *(__fastcall *_allocateAndFill)(Layer<Biome *> *this, LayerDetails::TransferData<Biome *> *result, unsigned __int64, int, int, unsigned int, unsigned int);\n  void (__fastcall *_fillArea)(MixerLayer<Biome *,Biome *> *this, LayerDetails::WorkingData<Biome *,Biome *> *, int, int, int, int, int);\n  std::tuple<int,int,unsigned int,unsigned int> *(__fastcall *_getAreaRead)(MixerLayer<Biome *,Biome *> *this, std::tuple<int,int,unsigned int,unsigned int> *result, int, int, unsigned int, unsigned int);\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-int-layerzooms-zoom2x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-int-layerzooms-zoom2x"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<int,LayerZooms::Zoom2x>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) ZoomLayerCommon<int,LayerZooms::Zoom2x> : MixerLayer<int,int>\n{\n  LayerZooms::Zoom2x mZoom;\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-int-layerzooms-zoom2x-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-int-layerzooms-zoom2x-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<int,LayerZooms::Zoom2x>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZoomLayerCommon<int,LayerZooms::Zoom2x>_vtbl\n{\n  void (__fastcall *~LayerBase)(LayerDetails::LayerBase *this);\n  void (__fastcall *init)(LayerDetails::LayerBase *this, __int64);\n  LayerDetails::TransferData<int> *(__fastcall *_allocateAndFill)(Layer<int> *this, LayerDetails::TransferData<int> *result, unsigned __int64, int, int, unsigned int, unsigned int);\n  void (__fastcall *_fillArea)(MixerLayer<int,int> *this, LayerDetails::WorkingData<int,int> *, int, int, int, int, int);\n  std::tuple<int,int,unsigned int,unsigned int> *(__fastcall *_getAreaRead)(MixerLayer<int,int> *this, std::tuple<int,int,unsigned int,unsigned int> *result, int, int, unsigned int, unsigned int);\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-enum-biometemperaturecategory-layerzooms-zoom2x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-enum-biometemperaturecategory-layerzooms-zoom2x"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<enum BiomeTemperatureCategory,LayerZooms::Zoom2x>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj __declspec(align(8)) ZoomLayerCommon<enum BiomeTemperatureCategory,LayerZooms::Zoom2x> : MixerLayer<enum BiomeTemperatureCategory,enum BiomeTemperatureCategory>\n{\n  LayerZooms::Zoom2x mZoom;\n};\n\n")])])]),a("h3",{attrs:{id:"zoomlayercommon-enum-biometemperaturecategory-layerzooms-zoom2x-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoomlayercommon-enum-biometemperaturecategory-layerzooms-zoom2x-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZoomLayerCommon<enum BiomeTemperatureCategory,LayerZooms::Zoom2x>_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZoomLayerCommon<enum BiomeTemperatureCategory,LayerZooms::Zoom2x>_vtbl\n{\n  void (__fastcall *~LayerBase)(LayerDetails::LayerBase *this);\n  void (__fastcall *init)(LayerDetails::LayerBase *this, __int64);\n  LayerDetails::TransferData<enum BiomeTemperatureCategory> *(__fastcall *_allocateAndFill)(Layer<enum BiomeTemperatureCategory> *this, LayerDetails::TransferData<enum BiomeTemperatureCategory> *result, unsigned __int64, int, int, unsigned int, unsigned int);\n  void (__fastcall *_fillArea)(MixerLayer<enum BiomeTemperatureCategory,enum BiomeTemperatureCategory> *this, LayerDetails::WorkingData<enum BiomeTemperatureCategory,enum BiomeTemperatureCategory> *, int, int, int, int, int);\n  std::tuple<int,int,unsigned int,unsigned int> *(__fastcall *_getAreaRead)(MixerLayer<enum BiomeTemperatureCategory,enum BiomeTemperatureCategory> *this, std::tuple<int,int,unsigned int,unsigned int> *result, int, int, unsigned int, unsigned int);\n};\n\n")])])]),a("h3",{attrs:{id:"zlib-filefunc-def-s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlib-filefunc-def-s"}},[t._v("#")]),t._v(" "),a("code",[t._v("zlib_filefunc_def_s")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct zlib_filefunc_def_s\n{\n  void *(__fastcall *zopen_file)(void *, const char *, int);\n  unsigned int (__fastcall *zread_file)(void *, void *, void *, unsigned int);\n  unsigned int (__fastcall *zwrite_file)(void *, void *, const void *, unsigned int);\n  int (__fastcall *ztell_file)(void *, void *);\n  int (__fastcall *zseek_file)(void *, void *, unsigned int, int);\n  int (__fastcall *zclose_file)(void *, void *);\n  int (__fastcall *zerror_file)(void *, void *);\n  void *opaque;\n};\n\n")])])]),a("h3",{attrs:{id:"zip64-internal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zip64-internal"}},[t._v("#")]),t._v(" "),a("code",[t._v("zip64_internal")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct zip64_internal\n{\n  zlib_filefunc64_32_def_s z_filefunc;\n  void *filestream;\n  linkedlist_data_s central_dir;\n  int in_opened_file_inzip;\n  curfile64_info ci;\n  unsigned __int64 begin_pos;\n  unsigned __int64 add_position_when_writting_offset;\n  unsigned __int64 number_entry;\n  char *globalcomment;\n};\n\n")])])]),a("h3",{attrs:{id:"zlibfileaccesswrapper-ctor-l5-lambda-4e6540f9300ff5f13a4b0e6d8886056d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlibfileaccesswrapper-ctor-l5-lambda-4e6540f9300ff5f13a4b0e6d8886056d"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZlibFileAccessWrapper::{ctor}::__l5::<lambda_4e6540f9300ff5f13a4b0e6d8886056d>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZlibFileAccessWrapper::{ctor}::__l5::<lambda_4e6540f9300ff5f13a4b0e6d8886056d>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"zlibfileaccesswrapper-ctor-l5-lambda-5b91378e54ed645a4a53fb6a63063e0e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlibfileaccesswrapper-ctor-l5-lambda-5b91378e54ed645a4a53fb6a63063e0e"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZlibFileAccessWrapper::{ctor}::__l5::<lambda_5b91378e54ed645a4a53fb6a63063e0e>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZlibFileAccessWrapper::{ctor}::__l5::<lambda_5b91378e54ed645a4a53fb6a63063e0e>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"zlibfileaccesswrapper-ctor-l5-lambda-7c1d8f960511cf37c16fa19eb0eb7786"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlibfileaccesswrapper-ctor-l5-lambda-7c1d8f960511cf37c16fa19eb0eb7786"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZlibFileAccessWrapper::{ctor}::__l5::<lambda_7c1d8f960511cf37c16fa19eb0eb7786>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZlibFileAccessWrapper::{ctor}::__l5::<lambda_7c1d8f960511cf37c16fa19eb0eb7786>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"zlibfileaccesswrapper-ctor-l5-lambda-820b5f8f4afd36dc7d61d48f18fa7f36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlibfileaccesswrapper-ctor-l5-lambda-820b5f8f4afd36dc7d61d48f18fa7f36"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZlibFileAccessWrapper::{ctor}::__l5::<lambda_820b5f8f4afd36dc7d61d48f18fa7f36>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZlibFileAccessWrapper::{ctor}::__l5::<lambda_820b5f8f4afd36dc7d61d48f18fa7f36>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"zlibfileaccesswrapper-ctor-l5-lambda-869fc17f49cf97ef0f6604be49825694"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlibfileaccesswrapper-ctor-l5-lambda-869fc17f49cf97ef0f6604be49825694"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZlibFileAccessWrapper::{ctor}::__l5::<lambda_869fc17f49cf97ef0f6604be49825694>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZlibFileAccessWrapper::{ctor}::__l5::<lambda_869fc17f49cf97ef0f6604be49825694>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"zlibfileaccesswrapper-ctor-l5-lambda-982c3505019204722080b3746c05d493"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlibfileaccesswrapper-ctor-l5-lambda-982c3505019204722080b3746c05d493"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZlibFileAccessWrapper::{ctor}::__l5::<lambda_982c3505019204722080b3746c05d493>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZlibFileAccessWrapper::{ctor}::__l5::<lambda_982c3505019204722080b3746c05d493>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"zlibfileaccesswrapper-ctor-l5-lambda-aab1f6d42a2e2665b9648455aede595f"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zlibfileaccesswrapper-ctor-l5-lambda-aab1f6d42a2e2665b9648455aede595f"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZlibFileAccessWrapper::{ctor}::__l5::<lambda_aab1f6d42a2e2665b9648455aede595f>")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __cppobj ZlibFileAccessWrapper::{ctor}::__l5::<lambda_aab1f6d42a2e2665b9648455aede595f>\n{\n};\n\n")])])]),a("h3",{attrs:{id:"zombie-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zombie-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("Zombie_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ Zombie_vtbl\n{\n  bool (__fastcall *hasComponent)(Actor *this, const HashedString *);\n  void (__fastcall *reloadHardcoded)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadHardcodedClient)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *initializeComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *_serverInitItemStackIds)(Actor *this);\n  void (__fastcall *_doInitialMove)(Actor *this);\n  bool (__fastcall *checkAllSensitiveWords)(Actor *this);\n  bool (__fastcall *checkNameTag)(Actor *this);\n  void (__fastcall *~Actor)(Actor *this);\n  void (__fastcall *reset)(Actor *this);\n  int (__fastcall *getOnDeathExperience)(Actor *this);\n  ActorType (__fastcall *getOwnerEntityType)(Actor *this);\n  void (__fastcall *remove)(Actor *this);\n  void (__fastcall *setPos)(Actor *this, const Vec3 *);\n  const PredictedMovementValues *(__fastcall *getPredictedMovementValues)(Actor *this);\n  const Vec3 *(__fastcall *getPos)(Actor *this);\n  const Vec3 *(__fastcall *getPosOld)(Actor *this);\n  const Vec3 *(__fastcall *getPosExtrapolated)(Actor *this, const Vec3 *result, float);\n  Vec3 *(__fastcall *getAttachPos)(Actor *this, Vec3 *result, ActorLocation, float);\n  Vec3 *(__fastcall *getFiringPos)(Actor *this, Vec3 *result);\n  void (__fastcall *setRot)(Actor *this, const Vec2 *);\n  void (__fastcall *move)(Actor *this, IActorMovementProxy *, const Vec3 *);\n  void (__fastcall *move)(Actor *this, const Vec3 *);\n  Vec3 *(__fastcall *getInterpolatedRidingPosition)(Actor *this, Vec3 *result, float);\n  float (__fastcall *getInterpolatedBodyRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedHeadRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedBodyYaw)(Actor *this, float);\n  float (__fastcall *getYawSpeedInDegreesPerSecond)(Actor *this);\n  float (__fastcall *getInterpolatedWalkAnimSpeed)(Actor *this, float);\n  Vec3 *(__fastcall *getInterpolatedRidingOffset)(Actor *this, Vec3 *result, float);\n  void (__fastcall *checkBlockCollisions)(Actor *this);\n  void (__fastcall *checkBlockCollisions)(Actor *this, const AABB *, std::function<void __cdecl(BlockSource &,Block const &,BlockPos const &,Actor &)>);\n  bool (__fastcall *isFireImmune)(Actor *this);\n  bool (__fastcall *breaksFallingBlocks)(Actor *this);\n  void (__fastcall *blockedByShield)(Actor *this, const ActorDamageSource *, Actor *);\n  void (__fastcall *teleportTo)(Actor *this, const Vec3 *, bool, int, int, const ActorUniqueID *);\n  bool (__fastcall *tryTeleportTo)(Actor *this, const Vec3 *, bool, bool, int, int);\n  void (__fastcall *chorusFruitTeleport)(Actor *this, Vec3 *);\n  void (__fastcall *lerpTo)(Actor *this, const Vec3 *, const Vec2 *, int);\n  void (__fastcall *lerpMotion)(Actor *this, const Vec3 *);\n  std::unique_ptr<AddActorBasePacket> *(__fastcall *getAddPacket)(Actor *this, std::unique_ptr<AddActorBasePacket> *result);\n  void (__fastcall *normalTick)(Actor *this);\n  void (__fastcall *baseTick)(Actor *this);\n  void (__fastcall *rideTick)(Actor *this);\n  void (__fastcall *positionRider)(Actor *this, Actor *, float);\n  float (__fastcall *getRidingHeight)(Actor *this);\n  bool (__fastcall *startRiding)(Actor *this, Actor *);\n  void (__fastcall *addRider)(Actor *this, Actor *);\n  void (__fastcall *flagRiderToRemove)(Actor *this, Actor *);\n  std::string *(__fastcall *getExitTip)(Actor *this, std::string *result, const std::string *, InputMode);\n  bool (__fastcall *intersects)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *, float);\n  bool (__fastcall *isInWall)(Actor *this);\n  bool (__fastcall *isInvisible)(Actor *this);\n  bool (__fastcall *canShowNameTag)(Actor *this);\n  bool (__fastcall *canExistInPeaceful)(Actor *this);\n  void (__fastcall *setNameTagVisible)(Actor *this, bool);\n  const std::string *(__fastcall *getNameTag)(Actor *this);\n  unsigned __int64 (__fastcall *getNameTagAsHash)(Actor *this);\n  std::string *(__fastcall *getFormattedNameTag)(Actor *this, std::string *result);\n  void (__fastcall *filterFormattedNameTag)(Actor *this, const UIProfanityContext *);\n  void (__fastcall *setNameTag)(Actor *this, const std::string *);\n  bool (__fastcall *getAlwaysShowNameTag)(Actor *this);\n  void (__fastcall *setScoreTag)(Actor *this, const std::string *);\n  const std::string *(__fastcall *getScoreTag)(Actor *this);\n  bool (__fastcall *isInWater)(Actor *this);\n  bool (__fastcall *hasEnteredWater)(Actor *this);\n  bool (__fastcall *isImmersedInWater)(Actor *this);\n  bool (__fastcall *isInWaterOrRain)(Actor *this);\n  bool (__fastcall *isInLava)(Actor *this);\n  bool (__fastcall *isUnderLiquid)(Actor *this, MaterialType);\n  bool (__fastcall *isOverWater)(Actor *this);\n  void (__fastcall *makeStuckInBlock)(Actor *this, const Vec3 *);\n  float (__fastcall *getCameraOffset)(Actor *this);\n  float (__fastcall *getShadowHeightOffs)(Actor *this);\n  float (__fastcall *getShadowRadius)(Actor *this);\n  Vec3 *(__fastcall *getHeadLookVector)(Actor *this, Vec3 *result, float);\n  bool (__fastcall *canSeeInvisible)(Actor *this);\n  bool (__fastcall *canSee)(Actor *this, const Vec3 *);\n  bool (__fastcall *canSee)(Actor *this, const Actor *);\n  bool (__fastcall *isSkyLit)(Actor *this, float);\n  float (__fastcall *getBrightness)(Actor *this, float);\n  bool (__fastcall *interactPreventDefault)(Actor *this);\n  void (__fastcall *playerTouch)(Actor *this, Player *);\n  void (__fastcall *onAboveBubbleColumn)(Actor *this, const bool);\n  void (__fastcall *onInsideBubbleColumn)(Actor *this, const bool);\n  bool (__fastcall *isImmobile)(Actor *this);\n  bool (__fastcall *isSilent)(Actor *this);\n  bool (__fastcall *isPickable)(Actor *this);\n  bool (__fastcall *isFishable)(Actor *this);\n  bool (__fastcall *isSleeping)(Actor *this);\n  bool (__fastcall *isShootable)(Actor *this);\n  void (__fastcall *setSneaking)(Actor *this, bool);\n  bool (__fastcall *isBlocking)(Actor *this);\n  bool (__fastcall *isDamageBlocked)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *isAlive)(Actor *this);\n  bool (__fastcall *isOnFire)(Actor *this);\n  bool (__fastcall *isOnHotBlock)(Actor *this);\n  bool (__fastcall *isCreativeModeAllowed)(Actor *this);\n  bool (__fastcall *isSurfaceMob)(Actor *this);\n  bool (__fastcall *isTargetable)(Actor *this);\n  bool (__fastcall *isLocalPlayer)(Actor *this);\n  bool (__fastcall *isPlayer)(Actor *this);\n  bool (__fastcall *canAttack)(Actor *this, Actor *, bool);\n  void (__fastcall *setTarget)(Actor *this, Actor *);\n  Actor *(__fastcall *findAttackTarget)(Actor *this);\n  bool (__fastcall *isValidTarget)(Actor *this, Actor *);\n  bool (__fastcall *attack)(Actor *this, Actor *);\n  void (__fastcall *performRangedAttack)(Actor *this, Actor *, float);\n  void (__fastcall *adjustDamageAmount)(Actor *this, int *);\n  int (__fastcall *getEquipmentCount)(Actor *this);\n  void (__fastcall *setOwner)(Actor *this, const ActorUniqueID);\n  void (__fastcall *setSitting)(Actor *this, bool);\n  void (__fastcall *onTame)(Actor *this);\n  void (__fastcall *onFailedTame)(Actor *this);\n  int (__fastcall *getInventorySize)(Actor *this);\n  int (__fastcall *getEquipSlots)(Actor *this);\n  int (__fastcall *getChestSlots)(Actor *this);\n  void (__fastcall *setStanding)(Actor *this, bool);\n  bool (__fastcall *canPowerJump)(Actor *this);\n  void (__fastcall *setCanPowerJump)(Actor *this, bool);\n  bool (__fastcall *isJumping)(Actor *this);\n  bool (__fastcall *isEnchanted)(Actor *this);\n  void (__fastcall *rideJumped)(Actor *this);\n  void (__fastcall *rideLanded)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *shouldRender)(Actor *this);\n  bool (__fastcall *isInvulnerableTo)(Actor *this, const ActorDamageSource *);\n  ActorDamageCause (__fastcall *getBlockDamageCause)(Actor *this, const Block *);\n  void (__fastcall *actuallyHurt)(Actor *this, int, const ActorDamageSource *, bool);\n  void (__fastcall *animateHurt)(Actor *this);\n  bool (__fastcall *doFireHurt)(Actor *this, int);\n  void (__fastcall *onLightningHit)(Actor *this);\n  void (__fastcall *onBounceStarted)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *feed)(Actor *this, int);\n  void (__fastcall *handleEntityEvent)(Actor *this, ActorEvent, int);\n  float (__fastcall *getPickRadius)(Actor *this);\n  const HashedString *(__fastcall *getActorRendererId)(Actor *this);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const ItemStack *, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int);\n  void (__fastcall *despawn)(Actor *this);\n  void (__fastcall *killed)(Actor *this, Actor *);\n  void (__fastcall *awardKillScore)(Actor *this, Actor *, int);\n  void (__fastcall *setArmor)(Actor *this, ArmorSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getArmor)(Actor *this, ArmorSlot);\n  ArmorMaterialType (__fastcall *getArmorMaterialTypeInSlot)(Actor *this, ArmorSlot);\n  ArmorTextureType (__fastcall *getArmorMaterialTextureTypeInSlot)(Actor *this, ArmorSlot);\n  float (__fastcall *getArmorColorInSlot)(Actor *this, ArmorSlot, int);\n  const ItemStack *(__fastcall *getEquippedSlot)(Actor *this, EquipmentSlot);\n  void (__fastcall *setEquippedSlot)(Actor *this, EquipmentSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getCarriedItem)(Actor *this);\n  void (__fastcall *setCarriedItem)(Actor *this, const ItemStack *);\n  void (__fastcall *setOffhandSlot)(Actor *this, const ItemStack *);\n  const ItemStack *(__fastcall *getEquippedTotem)(Actor *this);\n  bool (__fastcall *consumeTotem)(Actor *this);\n  bool (__fastcall *save)(Actor *this, CompoundTag *);\n  void (__fastcall *saveWithoutId)(Actor *this, CompoundTag *);\n  bool (__fastcall *load)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *loadLinks)(Actor *this, const CompoundTag *, std::vector<ActorLink> *, DataLoadHelper *);\n  ActorType (__fastcall *getEntityTypeId)(Actor *this);\n  const HashedString *(__fastcall *queryEntityRenderer)(Actor *this);\n  ActorUniqueID *(__fastcall *getSourceUniqueID)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *setOnFire)(Actor *this, int);\n  AABB *(__fastcall *getHandleWaterAABB)(Actor *this, AABB *result);\n  void (__fastcall *handleInsidePortal)(Actor *this, const BlockPos *);\n  int (__fastcall *getPortalCooldown)(Actor *this);\n  int (__fastcall *getPortalWaitTime)(Actor *this);\n  AutomaticID<Dimension,int> *(__fastcall *getDimensionId)(Actor *this, AutomaticID<Dimension,int> *result);\n  bool (__fastcall *canChangeDimensions)(Actor *this);\n  void (__fastcall *changeDimension)(Actor *this, const ChangeDimensionPacket *);\n  void (__fastcall *changeDimension)(Actor *this, AutomaticID<Dimension,int>, bool);\n  ActorUniqueID *(__fastcall *getControllingPlayer)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *checkFallDamage)(Actor *this, float, bool);\n  void (__fastcall *causeFallDamage)(Actor *this, float);\n  void (__fastcall *handleFallDistanceOnServer)(Actor *this, float, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, int, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, const Block *, bool);\n  void (__fastcall *onSynchedDataUpdate)(Actor *this, int);\n  bool (__fastcall *canAddRider)(Actor *this, Actor *);\n  bool (__fastcall *canPickupItem)(Actor *this, const ItemStack *);\n  bool (__fastcall *canBePulledIntoVehicle)(Actor *this);\n  bool (__fastcall *inCaravan)(Actor *this);\n  bool (__fastcall *isLeashableType)(Actor *this);\n  void (__fastcall *tickLeash)(Actor *this);\n  void (__fastcall *sendMotionPacketIfNeeded)(Actor *this);\n  bool (__fastcall *canSynchronizeNewEntity)(Actor *this);\n  bool (__fastcall *stopRiding)(Actor *this, bool, bool, bool, bool);\n  void (__fastcall *startSwimming)(Actor *this);\n  void (__fastcall *stopSwimming)(Actor *this);\n  void (__fastcall *buildDebugInfo)(Actor *this, std::string *);\n  CommandPermissionLevel (__fastcall *getCommandPermissionLevel)(Actor *this);\n  AttributeInstance *(__fastcall *getMutableAttribute)(Actor *this, const Attribute *);\n  const AttributeInstance *(__fastcall *getAttribute)(Actor *this, const Attribute *);\n  int (__fastcall *getDeathTime)(Actor *this);\n  void (__fastcall *heal)(Actor *this, int);\n  bool (__fastcall *isInvertedHealAndHarm)(Actor *this);\n  bool (__fastcall *canBeAffected)(Actor *this, const MobEffectInstance *);\n  bool (__fastcall *canBeAffected)(Actor *this, int);\n  bool (__fastcall *canBeAffectedByArrow)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectAdded)(Actor *this, MobEffectInstance *);\n  void (__fastcall *onEffectUpdated)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectRemoved)(Actor *this, MobEffectInstance *);\n  AnimationComponent *(__fastcall *getAnimationComponent)(Actor *this);\n  void (__fastcall *openContainerComponent)(Actor *this, Player *);\n  void (__fastcall *swing)(Actor *this);\n  void (__fastcall *useItem)(Actor *this, ItemStackBase *, ItemUseMethod, bool);\n  bool (__fastcall *hasOutputSignal)(Actor *this, unsigned __int8);\n  int (__fastcall *getOutputSignal)(Actor *this);\n  void (__fastcall *getDebugText)(Actor *this, std::vector<std::string> *);\n  float (__fastcall *getMapDecorationRotation)(Actor *this);\n  float (__fastcall *getRiderYRotation)(Actor *this, const Actor *);\n  float (__fastcall *getYHeadRot)(Actor *this);\n  bool (__fastcall *isWorldBuilder)(Actor *this);\n  bool (__fastcall *isCreative)(Actor *this);\n  bool (__fastcall *isAdventure)(Actor *this);\n  bool (__fastcall *add)(Actor *this, ItemStack *);\n  bool (__fastcall *drop)(Actor *this, const ItemStack *, bool);\n  bool (__fastcall *getInteraction)(Actor *this, Player *, ActorInteraction *, const Vec3 *);\n  bool (__fastcall *canDestroyBlock)(Actor *this, const Block *);\n  void (__fastcall *setAuxValue)(Actor *this, int);\n  void (__fastcall *setSize)(Actor *this, float, float);\n  int (__fastcall *getLifeSpan)(Actor *this);\n  void (__fastcall *onOrphan)(Actor *this);\n  void (__fastcall *wobble)(Actor *this);\n  bool (__fastcall *wasHurt)(Actor *this);\n  void (__fastcall *startSpinAttack)(Actor *this);\n  void (__fastcall *stopSpinAttack)(Actor *this);\n  void (__fastcall *setDamageNearbyMobs)(Actor *this, bool);\n  bool (__fastcall *hasCritBox)(Actor *this);\n  bool (__fastcall *isCritHit)(Actor *this);\n  void (__fastcall *renderDebugServerState)(Actor *this, const Options *);\n  void (__fastcall *reloadLootTable)(Actor *this, const EquipmentTableDefinition *);\n  void (__fastcall *reloadLootTable)(Actor *this);\n  float (__fastcall *getDeletionDelayTimeSeconds)(Actor *this);\n  void (__fastcall *kill)(Actor *this);\n  void (__fastcall *die)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *shouldTick)(Actor *this);\n  std::shared_ptr<IActorMovementProxy> *(__fastcall *createMovementProxy)(Actor *this, std::shared_ptr<IActorMovementProxy> *result);\n  void (__fastcall *updateEntitySpecificMolangVariables)(Actor *this, RenderParams *);\n  bool (__fastcall *shouldTryMakeStepSound)(Actor *this);\n  float (__fastcall *getNextStep)(Actor *this, const float);\n  bool (__fastcall *canMakeStepSound)(Actor *this);\n  void (__fastcall *outOfWorld)(Actor *this);\n  bool (__fastcall *_hurt)(Actor *this, const ActorDamageSource *, int, bool, bool);\n  void (__fastcall *markHurt)(Actor *this);\n  void (__fastcall *readAdditionalSaveData)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *addAdditionalSaveData)(Actor *this, CompoundTag *);\n  void (__fastcall *_playStepSound)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *_playFlySound)(Actor *this, const BlockPos *, const Block *);\n  bool (__fastcall *_makeFlySound)(Actor *this);\n  void (__fastcall *checkInsideBlocks)(Actor *this, float);\n  void (__fastcall *pushOutOfBlocks)(Actor *this, const Vec3 *);\n  bool (__fastcall *updateWaterState)(Actor *this);\n  void (__fastcall *doWaterSplashEffect)(Actor *this);\n  void (__fastcall *spawnTrailBubbles)(Actor *this);\n  void (__fastcall *updateInsideBlock)(Actor *this);\n  LootTable *(__fastcall *getLootTable)(Actor *this);\n  LootTable *(__fastcall *getDefaultLootTable)(Actor *this);\n  void (__fastcall *_removeRider)(Actor *this, const ActorUniqueID *, bool, bool, bool);\n  void (__fastcall *_onSizeUpdated)(Actor *this);\n  void (__fastcall *_doAutoAttackOnTouch)(Actor *this, Actor *);\n  void (__fastcall *knockback)(Mob *this, Actor *, int, float, float, float, float, float);\n  void (__fastcall *resolveDeathLoot)(Mob *this, int, const ActorDamageSource *);\n  void (__fastcall *spawnAnim)(Mob *this);\n  void (__fastcall *setSleeping)(Mob *this, bool);\n  void (__fastcall *setSprinting)(Mob *this, bool);\n  void (__fastcall *playAmbientSound)(Mob *this);\n  LevelSoundEvent (__fastcall *getAmbientSound)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicks)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicksRange)(Mob *this);\n  const TextureUVCoordinateSet *(__fastcall *getItemInHandIcon)(Mob *this, const ItemStack *, int);\n  float (__fastcall *getSpeed)(Mob *this);\n  void (__fastcall *setSpeed)(Mob *this, float);\n  float (__fastcall *getJumpPower)(Mob *this);\n  bool (__fastcall *hurtEffects)(Mob *this, const ActorDamageSource *, int, bool, bool);\n  int (__fastcall *getMeleeWeaponDamageBonus)(Mob *this, Mob *);\n  int (__fastcall *getMeleeKnockbackBonus)(Mob *this);\n  void (__fastcall *travel)(Mob *this, IMobMovementProxy *, float, float, float);\n  void (__fastcall *travel)(Mob *this, float, float, float);\n  void (__fastcall *applyFinalFriction)(Mob *this, float, bool);\n  void (__fastcall *updateWalkAnim)(Mob *this);\n  void (__fastcall *aiStep)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *aiStep)(Mob *this);\n  void (__fastcall *pushActors)(Mob *this);\n  void (__fastcall *lookAt)(Mob *this, Actor *, float, float);\n  bool (__fastcall *isLookingAtAnEntity)(Mob *this);\n  bool (__fastcall *checkSpawnRules)(Mob *this, bool);\n  bool (__fastcall *checkSpawnObstruction)(Mob *this);\n  float (__fastcall *getAttackAnim)(Mob *this, float);\n  int (__fastcall *getItemUseDuration)(Mob *this);\n  float (__fastcall *getItemUseStartupProgress)(Mob *this);\n  float (__fastcall *getItemUseIntervalProgress)(Mob *this);\n  int (__fastcall *getItemuseIntervalAxis)(Mob *this);\n  int (__fastcall *getTimeAlongSwing)(Mob *this);\n  void (__fastcall *ate)(Mob *this);\n  float (__fastcall *getMaxHeadXRot)(Mob *this);\n  Mob *(__fastcall *getLastHurtByMob)(Mob *this);\n  void (__fastcall *setLastHurtByMob)(Mob *this, Mob *);\n  Player *(__fastcall *getLastHurtByPlayer)(Mob *this);\n  void (__fastcall *setLastHurtByPlayer)(Mob *this, Player *);\n  Mob *(__fastcall *getLastHurtMob)(Mob *this);\n  void (__fastcall *setLastHurtMob)(Mob *this, Actor *);\n  bool (__fastcall *isAlliedTo)(Mob *this, Mob *);\n  bool (__fastcall *doHurtTarget)(Mob *this, Actor *);\n  bool (__fastcall *canBeControlledByRider)(Mob *this);\n  void (__fastcall *leaveCaravan)(Mob *this);\n  void (__fastcall *joinCaravan)(Mob *this, Mob *);\n  bool (__fastcall *hasCaravanTail)(Mob *this);\n  ActorUniqueID *(__fastcall *getCaravanHead)(Mob *this, ActorUniqueID *result);\n  int (__fastcall *getArmorValue)(Mob *this);\n  float (__fastcall *getArmorCoverPercentage)(Mob *this);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int, const std::bitset<4> *);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *hurtArmorSlot)(Mob *this, const ActorDamageSource *, int, ArmorSlot);\n  void (__fastcall *setDamagedArmor)(Mob *this, ArmorSlot, const ItemStack *);\n  void (__fastcall *sendArmorDamage)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *sendArmor)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *containerChanged)(Mob *this, int);\n  void (__fastcall *updateEquipment)(Mob *this);\n  int (__fastcall *clearEquipment)(Mob *this);\n  std::vector<ItemStack const *> *(__fastcall *getAllArmor)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<int> *(__fastcall *getAllArmorID)(Mob *this, std::vector<int> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllHand)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllEquipment)(Mob *this, std::vector<ItemStack const *> *result);\n  int (__fastcall *getArmorTypeHash)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *clearVanishEnchantedItemsOnDeath)(Mob *this);\n  void (__fastcall *sendInventory)(Mob *this, bool);\n  int (__fastcall *getDamageAfterMagicAbsorb)(Mob *this, const ActorDamageSource *, int);\n  bool (__fastcall *createAIGoals)(Mob *this);\n  void (__fastcall *onBorn)(Mob *this, Actor *, Actor *);\n  bool (__fastcall *setItemSlot)(Mob *this, EquipmentSlot, const ItemStack *);\n  void (__fastcall *setTransitioningSitting)(Mob *this, bool);\n  void (__fastcall *attackAnimation)(Mob *this, Actor *, float);\n  int (__fastcall *getAttackTime)(Mob *this);\n  float (__fastcall *_getWalkTargetValue)(Mob *this, const BlockPos *);\n  bool (__fastcall *canExistWhenDisallowMob)(Mob *this);\n  bool (__fastcall *useNewAi)(Mob *this);\n  void (__fastcall *ascendLadder)(Mob *this);\n  void (__fastcall *ascendScaffolding)(Mob *this);\n  void (__fastcall *descendScaffolding)(Mob *this);\n  void (__fastcall *dropContainer)(Mob *this);\n  std::unique_ptr<BodyControl> *(__fastcall *initBodyControl)(Mob *this, std::unique_ptr<BodyControl> *result);\n  void (__fastcall *jumpFromGround)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *jumpFromGround)(Mob *this);\n  void (__fastcall *updateAi)(Mob *this);\n  void (__fastcall *newServerAiStep)(Mob *this);\n  void (__fastcall *_serverAiMobStep)(Mob *this);\n  int (__fastcall *getDamageAfterEnchantReduction)(Mob *this, const ActorDamageSource *, int);\n  int (__fastcall *getDamageAfterArmorAbsorb)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *dropBags)(Mob *this);\n  void (__fastcall *tickDeath)(Mob *this);\n  void (__fastcall *updateGliding)(Mob *this);\n  bool (__fastcall *_allowAscendingScaffolding)(Mob *this);\n  bool (__fastcall *isDarkEnoughToSpawn)(Monster *this);\n};\n\n")])])]),a("h3",{attrs:{id:"zombievillager-vtbl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zombievillager-vtbl"}},[t._v("#")]),t._v(" "),a("code",[t._v("ZombieVillager_vtbl")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct /*VFT*/ ZombieVillager_vtbl\n{\n  bool (__fastcall *hasComponent)(Actor *this, const HashedString *);\n  void (__fastcall *reloadHardcoded)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadHardcodedClient)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *initializeComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *reloadComponents)(Actor *this, Actor::InitializationMethod, const VariantParameterList *);\n  void (__fastcall *_serverInitItemStackIds)(Actor *this);\n  void (__fastcall *_doInitialMove)(Actor *this);\n  bool (__fastcall *checkAllSensitiveWords)(Actor *this);\n  bool (__fastcall *checkNameTag)(Actor *this);\n  void (__fastcall *~Actor)(Actor *this);\n  void (__fastcall *reset)(Actor *this);\n  int (__fastcall *getOnDeathExperience)(Actor *this);\n  ActorType (__fastcall *getOwnerEntityType)(Actor *this);\n  void (__fastcall *remove)(Actor *this);\n  void (__fastcall *setPos)(Actor *this, const Vec3 *);\n  const PredictedMovementValues *(__fastcall *getPredictedMovementValues)(Actor *this);\n  const Vec3 *(__fastcall *getPos)(Actor *this);\n  const Vec3 *(__fastcall *getPosOld)(Actor *this);\n  const Vec3 *(__fastcall *getPosExtrapolated)(Actor *this, const Vec3 *result, float);\n  Vec3 *(__fastcall *getAttachPos)(Actor *this, Vec3 *result, ActorLocation, float);\n  Vec3 *(__fastcall *getFiringPos)(Actor *this, Vec3 *result);\n  void (__fastcall *setRot)(Actor *this, const Vec2 *);\n  void (__fastcall *move)(Actor *this, IActorMovementProxy *, const Vec3 *);\n  void (__fastcall *move)(Actor *this, const Vec3 *);\n  Vec3 *(__fastcall *getInterpolatedRidingPosition)(Actor *this, Vec3 *result, float);\n  float (__fastcall *getInterpolatedBodyRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedHeadRot)(Actor *this, float);\n  float (__fastcall *getInterpolatedBodyYaw)(Actor *this, float);\n  float (__fastcall *getYawSpeedInDegreesPerSecond)(Actor *this);\n  float (__fastcall *getInterpolatedWalkAnimSpeed)(Actor *this, float);\n  Vec3 *(__fastcall *getInterpolatedRidingOffset)(Actor *this, Vec3 *result, float);\n  void (__fastcall *checkBlockCollisions)(Actor *this);\n  void (__fastcall *checkBlockCollisions)(Actor *this, const AABB *, std::function<void __cdecl(BlockSource &,Block const &,BlockPos const &,Actor &)>);\n  bool (__fastcall *isFireImmune)(Actor *this);\n  bool (__fastcall *breaksFallingBlocks)(Actor *this);\n  void (__fastcall *blockedByShield)(Actor *this, const ActorDamageSource *, Actor *);\n  void (__fastcall *teleportTo)(Actor *this, const Vec3 *, bool, int, int, const ActorUniqueID *);\n  bool (__fastcall *tryTeleportTo)(Actor *this, const Vec3 *, bool, bool, int, int);\n  void (__fastcall *chorusFruitTeleport)(Actor *this, Vec3 *);\n  void (__fastcall *lerpTo)(Actor *this, const Vec3 *, const Vec2 *, int);\n  void (__fastcall *lerpMotion)(Actor *this, const Vec3 *);\n  std::unique_ptr<AddActorBasePacket> *(__fastcall *getAddPacket)(Actor *this, std::unique_ptr<AddActorBasePacket> *result);\n  void (__fastcall *normalTick)(Actor *this);\n  void (__fastcall *baseTick)(Actor *this);\n  void (__fastcall *rideTick)(Actor *this);\n  void (__fastcall *positionRider)(Actor *this, Actor *, float);\n  float (__fastcall *getRidingHeight)(Actor *this);\n  bool (__fastcall *startRiding)(Actor *this, Actor *);\n  void (__fastcall *addRider)(Actor *this, Actor *);\n  void (__fastcall *flagRiderToRemove)(Actor *this, Actor *);\n  std::string *(__fastcall *getExitTip)(Actor *this, std::string *result, const std::string *, InputMode);\n  bool (__fastcall *intersects)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *);\n  bool (__fastcall *isFree)(Actor *this, const Vec3 *, float);\n  bool (__fastcall *isInWall)(Actor *this);\n  bool (__fastcall *isInvisible)(Actor *this);\n  bool (__fastcall *canShowNameTag)(Actor *this);\n  bool (__fastcall *canExistInPeaceful)(Actor *this);\n  void (__fastcall *setNameTagVisible)(Actor *this, bool);\n  const std::string *(__fastcall *getNameTag)(Actor *this);\n  unsigned __int64 (__fastcall *getNameTagAsHash)(Actor *this);\n  std::string *(__fastcall *getFormattedNameTag)(Actor *this, std::string *result);\n  void (__fastcall *filterFormattedNameTag)(Actor *this, const UIProfanityContext *);\n  void (__fastcall *setNameTag)(Actor *this, const std::string *);\n  bool (__fastcall *getAlwaysShowNameTag)(Actor *this);\n  void (__fastcall *setScoreTag)(Actor *this, const std::string *);\n  const std::string *(__fastcall *getScoreTag)(Actor *this);\n  bool (__fastcall *isInWater)(Actor *this);\n  bool (__fastcall *hasEnteredWater)(Actor *this);\n  bool (__fastcall *isImmersedInWater)(Actor *this);\n  bool (__fastcall *isInWaterOrRain)(Actor *this);\n  bool (__fastcall *isInLava)(Actor *this);\n  bool (__fastcall *isUnderLiquid)(Actor *this, MaterialType);\n  bool (__fastcall *isOverWater)(Actor *this);\n  void (__fastcall *makeStuckInBlock)(Actor *this, const Vec3 *);\n  float (__fastcall *getCameraOffset)(Actor *this);\n  float (__fastcall *getShadowHeightOffs)(Actor *this);\n  float (__fastcall *getShadowRadius)(Actor *this);\n  Vec3 *(__fastcall *getHeadLookVector)(Actor *this, Vec3 *result, float);\n  bool (__fastcall *canSeeInvisible)(Actor *this);\n  bool (__fastcall *canSee)(Actor *this, const Vec3 *);\n  bool (__fastcall *canSee)(Actor *this, const Actor *);\n  bool (__fastcall *isSkyLit)(Actor *this, float);\n  float (__fastcall *getBrightness)(Actor *this, float);\n  bool (__fastcall *interactPreventDefault)(Actor *this);\n  void (__fastcall *playerTouch)(Actor *this, Player *);\n  void (__fastcall *onAboveBubbleColumn)(Actor *this, const bool);\n  void (__fastcall *onInsideBubbleColumn)(Actor *this, const bool);\n  bool (__fastcall *isImmobile)(Actor *this);\n  bool (__fastcall *isSilent)(Actor *this);\n  bool (__fastcall *isPickable)(Actor *this);\n  bool (__fastcall *isFishable)(Actor *this);\n  bool (__fastcall *isSleeping)(Actor *this);\n  bool (__fastcall *isShootable)(Actor *this);\n  void (__fastcall *setSneaking)(Actor *this, bool);\n  bool (__fastcall *isBlocking)(Actor *this);\n  bool (__fastcall *isDamageBlocked)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *isAlive)(Actor *this);\n  bool (__fastcall *isOnFire)(Actor *this);\n  bool (__fastcall *isOnHotBlock)(Actor *this);\n  bool (__fastcall *isCreativeModeAllowed)(Actor *this);\n  bool (__fastcall *isSurfaceMob)(Actor *this);\n  bool (__fastcall *isTargetable)(Actor *this);\n  bool (__fastcall *isLocalPlayer)(Actor *this);\n  bool (__fastcall *isPlayer)(Actor *this);\n  bool (__fastcall *canAttack)(Actor *this, Actor *, bool);\n  void (__fastcall *setTarget)(Actor *this, Actor *);\n  Actor *(__fastcall *findAttackTarget)(Actor *this);\n  bool (__fastcall *isValidTarget)(Actor *this, Actor *);\n  bool (__fastcall *attack)(Actor *this, Actor *);\n  void (__fastcall *performRangedAttack)(Actor *this, Actor *, float);\n  void (__fastcall *adjustDamageAmount)(Actor *this, int *);\n  int (__fastcall *getEquipmentCount)(Actor *this);\n  void (__fastcall *setOwner)(Actor *this, const ActorUniqueID);\n  void (__fastcall *setSitting)(Actor *this, bool);\n  void (__fastcall *onTame)(Actor *this);\n  void (__fastcall *onFailedTame)(Actor *this);\n  int (__fastcall *getInventorySize)(Actor *this);\n  int (__fastcall *getEquipSlots)(Actor *this);\n  int (__fastcall *getChestSlots)(Actor *this);\n  void (__fastcall *setStanding)(Actor *this, bool);\n  bool (__fastcall *canPowerJump)(Actor *this);\n  void (__fastcall *setCanPowerJump)(Actor *this, bool);\n  bool (__fastcall *isJumping)(Actor *this);\n  bool (__fastcall *isEnchanted)(Actor *this);\n  void (__fastcall *rideJumped)(Actor *this);\n  void (__fastcall *rideLanded)(Actor *this, const Vec3 *, const Vec3 *);\n  bool (__fastcall *shouldRender)(Actor *this);\n  bool (__fastcall *isInvulnerableTo)(Actor *this, const ActorDamageSource *);\n  ActorDamageCause (__fastcall *getBlockDamageCause)(Actor *this, const Block *);\n  void (__fastcall *actuallyHurt)(Actor *this, int, const ActorDamageSource *, bool);\n  void (__fastcall *animateHurt)(Actor *this);\n  bool (__fastcall *doFireHurt)(Actor *this, int);\n  void (__fastcall *onLightningHit)(Actor *this);\n  void (__fastcall *onBounceStarted)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *feed)(Actor *this, int);\n  void (__fastcall *handleEntityEvent)(Actor *this, ActorEvent, int);\n  float (__fastcall *getPickRadius)(Actor *this);\n  const HashedString *(__fastcall *getActorRendererId)(Actor *this);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const ItemStack *, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, const Block *, int);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int, float);\n  ItemActor *(__fastcall *spawnAtLocation)(Actor *this, int, int);\n  void (__fastcall *despawn)(Actor *this);\n  void (__fastcall *killed)(Actor *this, Actor *);\n  void (__fastcall *awardKillScore)(Actor *this, Actor *, int);\n  void (__fastcall *setArmor)(Actor *this, ArmorSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getArmor)(Actor *this, ArmorSlot);\n  ArmorMaterialType (__fastcall *getArmorMaterialTypeInSlot)(Actor *this, ArmorSlot);\n  ArmorTextureType (__fastcall *getArmorMaterialTextureTypeInSlot)(Actor *this, ArmorSlot);\n  float (__fastcall *getArmorColorInSlot)(Actor *this, ArmorSlot, int);\n  const ItemStack *(__fastcall *getEquippedSlot)(Actor *this, EquipmentSlot);\n  void (__fastcall *setEquippedSlot)(Actor *this, EquipmentSlot, const ItemStack *);\n  const ItemStack *(__fastcall *getCarriedItem)(Actor *this);\n  void (__fastcall *setCarriedItem)(Actor *this, const ItemStack *);\n  void (__fastcall *setOffhandSlot)(Actor *this, const ItemStack *);\n  const ItemStack *(__fastcall *getEquippedTotem)(Actor *this);\n  bool (__fastcall *consumeTotem)(Actor *this);\n  bool (__fastcall *save)(Actor *this, CompoundTag *);\n  void (__fastcall *saveWithoutId)(Actor *this, CompoundTag *);\n  bool (__fastcall *load)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *loadLinks)(Actor *this, const CompoundTag *, std::vector<ActorLink> *, DataLoadHelper *);\n  ActorType (__fastcall *getEntityTypeId)(Actor *this);\n  const HashedString *(__fastcall *queryEntityRenderer)(Actor *this);\n  ActorUniqueID *(__fastcall *getSourceUniqueID)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *setOnFire)(Actor *this, int);\n  AABB *(__fastcall *getHandleWaterAABB)(Actor *this, AABB *result);\n  void (__fastcall *handleInsidePortal)(Actor *this, const BlockPos *);\n  int (__fastcall *getPortalCooldown)(Actor *this);\n  int (__fastcall *getPortalWaitTime)(Actor *this);\n  AutomaticID<Dimension,int> *(__fastcall *getDimensionId)(Actor *this, AutomaticID<Dimension,int> *result);\n  bool (__fastcall *canChangeDimensions)(Actor *this);\n  void (__fastcall *changeDimension)(Actor *this, const ChangeDimensionPacket *);\n  void (__fastcall *changeDimension)(Actor *this, AutomaticID<Dimension,int>, bool);\n  ActorUniqueID *(__fastcall *getControllingPlayer)(Actor *this, ActorUniqueID *result);\n  void (__fastcall *checkFallDamage)(Actor *this, float, bool);\n  void (__fastcall *causeFallDamage)(Actor *this, float);\n  void (__fastcall *handleFallDistanceOnServer)(Actor *this, float, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, int, bool);\n  void (__fastcall *playSynchronizedSound)(Actor *this, LevelSoundEvent, const Vec3 *, const Block *, bool);\n  void (__fastcall *onSynchedDataUpdate)(Actor *this, int);\n  bool (__fastcall *canAddRider)(Actor *this, Actor *);\n  bool (__fastcall *canPickupItem)(Actor *this, const ItemStack *);\n  bool (__fastcall *canBePulledIntoVehicle)(Actor *this);\n  bool (__fastcall *inCaravan)(Actor *this);\n  bool (__fastcall *isLeashableType)(Actor *this);\n  void (__fastcall *tickLeash)(Actor *this);\n  void (__fastcall *sendMotionPacketIfNeeded)(Actor *this);\n  bool (__fastcall *canSynchronizeNewEntity)(Actor *this);\n  bool (__fastcall *stopRiding)(Actor *this, bool, bool, bool, bool);\n  void (__fastcall *startSwimming)(Actor *this);\n  void (__fastcall *stopSwimming)(Actor *this);\n  void (__fastcall *buildDebugInfo)(Actor *this, std::string *);\n  CommandPermissionLevel (__fastcall *getCommandPermissionLevel)(Actor *this);\n  AttributeInstance *(__fastcall *getMutableAttribute)(Actor *this, const Attribute *);\n  const AttributeInstance *(__fastcall *getAttribute)(Actor *this, const Attribute *);\n  int (__fastcall *getDeathTime)(Actor *this);\n  void (__fastcall *heal)(Actor *this, int);\n  bool (__fastcall *isInvertedHealAndHarm)(Actor *this);\n  bool (__fastcall *canBeAffected)(Actor *this, const MobEffectInstance *);\n  bool (__fastcall *canBeAffected)(Actor *this, int);\n  bool (__fastcall *canBeAffectedByArrow)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectAdded)(Actor *this, MobEffectInstance *);\n  void (__fastcall *onEffectUpdated)(Actor *this, const MobEffectInstance *);\n  void (__fastcall *onEffectRemoved)(Actor *this, MobEffectInstance *);\n  AnimationComponent *(__fastcall *getAnimationComponent)(Actor *this);\n  void (__fastcall *openContainerComponent)(Actor *this, Player *);\n  void (__fastcall *swing)(Actor *this);\n  void (__fastcall *useItem)(Actor *this, ItemStackBase *, ItemUseMethod, bool);\n  bool (__fastcall *hasOutputSignal)(Actor *this, unsigned __int8);\n  int (__fastcall *getOutputSignal)(Actor *this);\n  void (__fastcall *getDebugText)(Actor *this, std::vector<std::string> *);\n  float (__fastcall *getMapDecorationRotation)(Actor *this);\n  float (__fastcall *getRiderYRotation)(Actor *this, const Actor *);\n  float (__fastcall *getYHeadRot)(Actor *this);\n  bool (__fastcall *isWorldBuilder)(Actor *this);\n  bool (__fastcall *isCreative)(Actor *this);\n  bool (__fastcall *isAdventure)(Actor *this);\n  bool (__fastcall *add)(Actor *this, ItemStack *);\n  bool (__fastcall *drop)(Actor *this, const ItemStack *, bool);\n  bool (__fastcall *getInteraction)(Actor *this, Player *, ActorInteraction *, const Vec3 *);\n  bool (__fastcall *canDestroyBlock)(Actor *this, const Block *);\n  void (__fastcall *setAuxValue)(Actor *this, int);\n  void (__fastcall *setSize)(Actor *this, float, float);\n  int (__fastcall *getLifeSpan)(Actor *this);\n  void (__fastcall *onOrphan)(Actor *this);\n  void (__fastcall *wobble)(Actor *this);\n  bool (__fastcall *wasHurt)(Actor *this);\n  void (__fastcall *startSpinAttack)(Actor *this);\n  void (__fastcall *stopSpinAttack)(Actor *this);\n  void (__fastcall *setDamageNearbyMobs)(Actor *this, bool);\n  bool (__fastcall *hasCritBox)(Actor *this);\n  bool (__fastcall *isCritHit)(Actor *this);\n  void (__fastcall *renderDebugServerState)(Actor *this, const Options *);\n  void (__fastcall *reloadLootTable)(Actor *this, const EquipmentTableDefinition *);\n  void (__fastcall *reloadLootTable)(Actor *this);\n  float (__fastcall *getDeletionDelayTimeSeconds)(Actor *this);\n  void (__fastcall *kill)(Actor *this);\n  void (__fastcall *die)(Actor *this, const ActorDamageSource *);\n  bool (__fastcall *shouldTick)(Actor *this);\n  std::shared_ptr<IActorMovementProxy> *(__fastcall *createMovementProxy)(Actor *this, std::shared_ptr<IActorMovementProxy> *result);\n  void (__fastcall *updateEntitySpecificMolangVariables)(Actor *this, RenderParams *);\n  bool (__fastcall *shouldTryMakeStepSound)(Actor *this);\n  float (__fastcall *getNextStep)(Actor *this, const float);\n  bool (__fastcall *canMakeStepSound)(Actor *this);\n  void (__fastcall *outOfWorld)(Actor *this);\n  bool (__fastcall *_hurt)(Actor *this, const ActorDamageSource *, int, bool, bool);\n  void (__fastcall *markHurt)(Actor *this);\n  void (__fastcall *readAdditionalSaveData)(Actor *this, const CompoundTag *, DataLoadHelper *);\n  void (__fastcall *addAdditionalSaveData)(Actor *this, CompoundTag *);\n  void (__fastcall *_playStepSound)(Actor *this, const BlockPos *, const Block *);\n  void (__fastcall *_playFlySound)(Actor *this, const BlockPos *, const Block *);\n  bool (__fastcall *_makeFlySound)(Actor *this);\n  void (__fastcall *checkInsideBlocks)(Actor *this, float);\n  void (__fastcall *pushOutOfBlocks)(Actor *this, const Vec3 *);\n  bool (__fastcall *updateWaterState)(Actor *this);\n  void (__fastcall *doWaterSplashEffect)(Actor *this);\n  void (__fastcall *spawnTrailBubbles)(Actor *this);\n  void (__fastcall *updateInsideBlock)(Actor *this);\n  LootTable *(__fastcall *getLootTable)(Actor *this);\n  LootTable *(__fastcall *getDefaultLootTable)(Actor *this);\n  void (__fastcall *_removeRider)(Actor *this, const ActorUniqueID *, bool, bool, bool);\n  void (__fastcall *_onSizeUpdated)(Actor *this);\n  void (__fastcall *_doAutoAttackOnTouch)(Actor *this, Actor *);\n  void (__fastcall *knockback)(Mob *this, Actor *, int, float, float, float, float, float);\n  void (__fastcall *resolveDeathLoot)(Mob *this, int, const ActorDamageSource *);\n  void (__fastcall *spawnAnim)(Mob *this);\n  void (__fastcall *setSleeping)(Mob *this, bool);\n  void (__fastcall *setSprinting)(Mob *this, bool);\n  void (__fastcall *playAmbientSound)(Mob *this);\n  LevelSoundEvent (__fastcall *getAmbientSound)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicks)(Mob *this);\n  int (__fastcall *getAmbientSoundPostponeTicksRange)(Mob *this);\n  const TextureUVCoordinateSet *(__fastcall *getItemInHandIcon)(Mob *this, const ItemStack *, int);\n  float (__fastcall *getSpeed)(Mob *this);\n  void (__fastcall *setSpeed)(Mob *this, float);\n  float (__fastcall *getJumpPower)(Mob *this);\n  bool (__fastcall *hurtEffects)(Mob *this, const ActorDamageSource *, int, bool, bool);\n  int (__fastcall *getMeleeWeaponDamageBonus)(Mob *this, Mob *);\n  int (__fastcall *getMeleeKnockbackBonus)(Mob *this);\n  void (__fastcall *travel)(Mob *this, IMobMovementProxy *, float, float, float);\n  void (__fastcall *travel)(Mob *this, float, float, float);\n  void (__fastcall *applyFinalFriction)(Mob *this, float, bool);\n  void (__fastcall *updateWalkAnim)(Mob *this);\n  void (__fastcall *aiStep)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *aiStep)(Mob *this);\n  void (__fastcall *pushActors)(Mob *this);\n  void (__fastcall *lookAt)(Mob *this, Actor *, float, float);\n  bool (__fastcall *isLookingAtAnEntity)(Mob *this);\n  bool (__fastcall *checkSpawnRules)(Mob *this, bool);\n  bool (__fastcall *checkSpawnObstruction)(Mob *this);\n  float (__fastcall *getAttackAnim)(Mob *this, float);\n  int (__fastcall *getItemUseDuration)(Mob *this);\n  float (__fastcall *getItemUseStartupProgress)(Mob *this);\n  float (__fastcall *getItemUseIntervalProgress)(Mob *this);\n  int (__fastcall *getItemuseIntervalAxis)(Mob *this);\n  int (__fastcall *getTimeAlongSwing)(Mob *this);\n  void (__fastcall *ate)(Mob *this);\n  float (__fastcall *getMaxHeadXRot)(Mob *this);\n  Mob *(__fastcall *getLastHurtByMob)(Mob *this);\n  void (__fastcall *setLastHurtByMob)(Mob *this, Mob *);\n  Player *(__fastcall *getLastHurtByPlayer)(Mob *this);\n  void (__fastcall *setLastHurtByPlayer)(Mob *this, Player *);\n  Mob *(__fastcall *getLastHurtMob)(Mob *this);\n  void (__fastcall *setLastHurtMob)(Mob *this, Actor *);\n  bool (__fastcall *isAlliedTo)(Mob *this, Mob *);\n  bool (__fastcall *doHurtTarget)(Mob *this, Actor *);\n  bool (__fastcall *canBeControlledByRider)(Mob *this);\n  void (__fastcall *leaveCaravan)(Mob *this);\n  void (__fastcall *joinCaravan)(Mob *this, Mob *);\n  bool (__fastcall *hasCaravanTail)(Mob *this);\n  ActorUniqueID *(__fastcall *getCaravanHead)(Mob *this, ActorUniqueID *result);\n  int (__fastcall *getArmorValue)(Mob *this);\n  float (__fastcall *getArmorCoverPercentage)(Mob *this);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int, const std::bitset<4> *);\n  void (__fastcall *hurtArmor)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *hurtArmorSlot)(Mob *this, const ActorDamageSource *, int, ArmorSlot);\n  void (__fastcall *setDamagedArmor)(Mob *this, ArmorSlot, const ItemStack *);\n  void (__fastcall *sendArmorDamage)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *sendArmor)(Mob *this, const std::bitset<4> *);\n  void (__fastcall *containerChanged)(Mob *this, int);\n  void (__fastcall *updateEquipment)(Mob *this);\n  int (__fastcall *clearEquipment)(Mob *this);\n  std::vector<ItemStack const *> *(__fastcall *getAllArmor)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<int> *(__fastcall *getAllArmorID)(Mob *this, std::vector<int> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllHand)(Mob *this, std::vector<ItemStack const *> *result);\n  std::vector<ItemStack const *> *(__fastcall *getAllEquipment)(Mob *this, std::vector<ItemStack const *> *result);\n  int (__fastcall *getArmorTypeHash)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this);\n  void (__fastcall *dropEquipmentOnDeath)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *clearVanishEnchantedItemsOnDeath)(Mob *this);\n  void (__fastcall *sendInventory)(Mob *this, bool);\n  int (__fastcall *getDamageAfterMagicAbsorb)(Mob *this, const ActorDamageSource *, int);\n  bool (__fastcall *createAIGoals)(Mob *this);\n  void (__fastcall *onBorn)(Mob *this, Actor *, Actor *);\n  bool (__fastcall *setItemSlot)(Mob *this, EquipmentSlot, const ItemStack *);\n  void (__fastcall *setTransitioningSitting)(Mob *this, bool);\n  void (__fastcall *attackAnimation)(Mob *this, Actor *, float);\n  int (__fastcall *getAttackTime)(Mob *this);\n  float (__fastcall *_getWalkTargetValue)(Mob *this, const BlockPos *);\n  bool (__fastcall *canExistWhenDisallowMob)(Mob *this);\n  bool (__fastcall *useNewAi)(Mob *this);\n  void (__fastcall *ascendLadder)(Mob *this);\n  void (__fastcall *ascendScaffolding)(Mob *this);\n  void (__fastcall *descendScaffolding)(Mob *this);\n  void (__fastcall *dropContainer)(Mob *this);\n  std::unique_ptr<BodyControl> *(__fastcall *initBodyControl)(Mob *this, std::unique_ptr<BodyControl> *result);\n  void (__fastcall *jumpFromGround)(Mob *this, IMobMovementProxy *);\n  void (__fastcall *jumpFromGround)(Mob *this);\n  void (__fastcall *updateAi)(Mob *this);\n  void (__fastcall *newServerAiStep)(Mob *this);\n  void (__fastcall *_serverAiMobStep)(Mob *this);\n  int (__fastcall *getDamageAfterEnchantReduction)(Mob *this, const ActorDamageSource *, int);\n  int (__fastcall *getDamageAfterArmorAbsorb)(Mob *this, const ActorDamageSource *, int);\n  void (__fastcall *dropBags)(Mob *this);\n  void (__fastcall *tickDeath)(Mob *this);\n  void (__fastcall *updateGliding)(Mob *this);\n  bool (__fastcall *_allowAscendingScaffolding)(Mob *this);\n  bool (__fastcall *isDarkEnoughToSpawn)(Monster *this);\n};\n\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);